Gst-nvdspostprocess (Alpha) — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvdspost...Gst-nvdspostprocess (Alpha)#TheGst-nvdspostprocessplugin is a customizable plugin which provides a custom library interface for post processing on Tensor output of inference plugins (nvinfer/nvinferserver).
Currently the plugin supports detection and classification models for parsing. The plugin connects to post processing lib provided as plugin parameter.
The parsing parameters can be specified via a config file.
Refer to sectionGst-nvdspostprocess File Configuration Specificationsbelow for more details.For the plugin to perform parsing of inference tensor output, it is necessary to attach tensor output by settingoutput-tensor-metaas1in inference configuration file and disabling
parsing in the inference plugin by settingnetwork-typeas100i.e. network type other. Similarly, inGst-nvinferserverwe can enable the following configs in the configuration file.output_control{output_tensor_meta:true}and to disable native post processing, update:infer_config{postprocess{other{}}}.Default plugin implementation provides following functionalities.It parses the tensor meta attached to frame meta or object meta.Attaches the output of tensor parsing either to frame meta or object meta.The default custom library (postprocesslib_impl) provided with the plugin implements these functionalities.
It can be configured to parse detection and classification networks. For multiple inference plugins in pipeline require multiple post process plugin instances corresponding to them.Inputs and Outputs#InputsInput Video Gst BuffersMetadata (NvDsBatchMeta)Tensor Meta (NvDsInferTensorMeta)Control parameterspostprocesslib-config-filepostprocesslib-namegpu-idOutputOutput Video Gst BuffersOriginal Metadata (NvDsBatchMeta) (with addition of Object Meta/Classifier Meta)Features#The following table summarizes the features of the plugin.Gst-nvdspostprocess features#FeatureDescriptionReleaseDetection output parsingParses detector tensor data  and attaches the results as object metadataDS 6.1Classification output parsingParses Classification tensor data and attaches the result as classifier attributes in metadataDS 6.1Yolo detector (YoloV3/V3-tiny/V2/V2-tiny) parsingSupport for parsing of Yolo detector outputDS 6.1FasterRCNN output parsing—DS 6.1Single Shot Detector (SSD) output parsing—DS 6.1Gst-nvdspostprocess File Configuration Specifications#The Gst-nvdspreprocess configuration file uses a “YAML” format
Refer to examples likeconfig_detector.yml,config_classifier_car_color.ymllocated at/opt/nvidia/deepstream/deepstream/sources/gst-plugins/gst-nvdspostprocess/.
Thepropertygroup configures the general behavior of the plugin.
Theclass-attrs-allgroup configures parameters for all classes for detector post processor.
Theclass-attrs-<id>group configures parameters<id>specific class for detector post processor.The following two tables describes the keys supported forpropertygroups andclass-attrs-<id>groups respectively.Gst-nvdspostprocess property Group Supported Keys#PropertyMeaningType and RangeExamplegpu-idGPU to be used for processingIntegergpu-id: 0process-modeMode of operation Full Frame (Primary 1) or on Object (Secondary 2)Integer 1=Primary(On Full Frame) ,2=Secondary (On Object)process-mode: 1gie-unique-idPerform tensor meta parsing on output of gie-unique-idInteger >0gie-unique-id: 1num-detected-classesNumber of classes detected by Detector networkInteger >0num-detected-classes: 4cluster-modeClustering mode to be used on detector outputInteger 1=DBSCAN 2=NMS 3=DBSCAN+NMS Hybrid 4=None(No Clustering)cluster-mode: 2output-blob-namesArray of output layer names which are to be parsedString delimited by semicolonoutput-blob-names: conv2d_bbox;conv2d_cov/Sigmoidnetwork-typeType of network to be parsedInteger 0=Detector 1=Classifiernetwork-type: 1labelfile-pathPathname of a text file containing the labels for the modelStringlabelfile-path: /opt/nvidia/deepstream/deepstream/samples/models/Primary_Detector/labels.txtclassifier-thresholdMinimum threshold label probability. The GIE outputs the label having the highest probability if it is greater than this thresholdFloat, >0.0classifier-threshold: 0.4operate-on-gie-idUnique ID of the GIE on whose metadata (bounding boxes) this GIE is to operate on, applicable for process-mode=2Integer >0operate-on-gie-id: 1parse-classifier-func-nameName of the custom classifier output parsing function. If not specified, post process lib uses the parsing function for softmax layers.Stringparse-classifier-func-name: NvDsPostProcessClassiferParseCustomSoftmaxparse-bbox-func-nameName of the custom bounding box parsing function. If not specified, post process lib uses the  function for the resnet model provided by the SDKStringparse-bbox-func-name: NvDsPostProcessParseCustomResnetGst-nvdspostprocess class-attr-<id> Group Supported Keys#PropertyMeaningType and RangeExampletopkKeep only top K objects with highest detection scores.Integer, >0. -1 to disabletopk: 10nms-iou-thresholdMaximum IOU score between two proposals after which the proposal with the lower confidence will be rejected.Float, >0.0nms-iou-threshold: 0.2pre-cluster-thresholdDetection threshold to be applied prior to clustering operationFloat, >0.0pre-cluster-threshold: 0.5post-cluster-thresholdDetection threshold to be applied post clustering operationFloat, >0.0post-cluster-threshold: 0.5epsEpsilon values for DBSCAN algorithmFloat, >0.0eps: 0.2dbscan-min-scoreMinimum sum of confidence of all the neighbors in a cluster for it to be considered a valid cluster.Float, >0.0dbscan-min-score: 0.7Gst Properties#The following table describes the Gst properties of the Gst-nvdspostprocess plugin.Gst-nvspostprocess gst properties#PropertyMeaningType and RangeExample notesgpu-idDevice ID of GPU to use for post-processing (dGPU only)Integer,0-4,294,967,295gpu-id=1postprocesslib-nameLow level Post process library to be used for output parsingstringpostprocesslib-name=./postprocesslib_impl/libpostprocess_impl.sopostprocesslib-config-fileSet postprocess yaml config file to be usedstringpostprocesslib-config-file= config_detector.ymlSample pipelines#Given below are some sample pipelines, please set appropriate configuration file and library paths.For multi-stream detector and classifier (dGPU):gst-launch-1.0uridecodebin\uri=file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 \! m.sink_0 nvstreammux name=m width=1920 height=1080 batch-size=2   ! \nvinfer config-file-path=config_infer_primary_post_process.txt  \! nvdspostprocess \postprocesslib-config-file=config_detector.yml \postprocesslib-name= ./postprocesslib_impl/libpostprocess_impl.so \! queue ! nvinfer \config-file-path= config_infer_secondary_vehiclemake_postprocess.txt \! nvdspostprocess \postprocesslib-config-file= config_classifier_vehicle_make.yml \postprocesslib-name= ./postprocesslib_impl/libpostprocess_impl.so ! queue ! nvinfer \config-file-path= config_infer_secondary_vehicletypes_postprocess.txt \! nvdspostprocess  postprocesslib-config-file= \config_classifier_vehicle_type.yml  postprocesslib-name= \./postprocesslib_impl/libpostprocess_impl.so    ! queue ! nvmultistreamtiler !  nvvideoconvert \gpu-id=0 ! nvdsosd ! nveglglessink sync=1 -v  uridecodebin \uri=file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 ! m.sink_1For multi-stream detector and classifier (Jetson):gst-launch-1.0uridecodebin\uri=file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 \! m.sink_0 nvstreammux name=m width=1920 height=1080 batch-size=2   ! \nvinfer config-file-path=config_infer_primary_post_process.txt  \! nvdspostprocess \postprocesslib-config-file=config_detector.yml \postprocesslib-name= ./postprocesslib_impl/libpostprocess_impl.so \! queue ! nvinfer \config-file-path= config_infer_secondary_vehiclemake_postprocess.txt \! nvdspostprocess \postprocesslib-config-file=config_classifier_vehicle_make.yml \postprocesslib-name= ./postprocesslib_impl/libpostprocess_impl.so ! queue ! nvinfer \config-file-path= config_infer_secondary_vehicletypes_postprocess.txt \! nvdspostprocess  postprocesslib-config-file= \config_classifier_vehicle_type.yml  postprocesslib-name= \./postprocesslib_impl/libpostprocess_impl.so ! queue ! nvmultistreamtiler !  nvvideoconvert \gpu-id=0 ! nvdsosd ! nv3dsink sync=1 -v  uridecodebin \uri=file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4 ! m.sink_1previousGst-nvdsudpsinknextGst-nvds3dfilterOn this pageInputs and OutputsFeaturesGst-nvdspostprocess File Configuration SpecificationsGst PropertiesSample pipelinesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.