Gst-nvmsgconv — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvmsgconvGst-nvmsgconv#The Gst-nvmsgconv plugin is responsible for converting metadata into message payloads based on schema.
DeepStream 5.0 supports two variations of the schema, full and minimal. The Gst-nvmsgconv plugin can be configured to use either one of the schemas.
By default, the plugin uses the full DeepStream schema to generate the payload in JSON format. The full schema supports elaborate semantics for object detection, analytics modules, events, location, sensor and 3D tracking. Each payload has information about a single object.
You can use the minimal variation of the schema to communicate minimal information with the back end. This provides a small footprint for the payload to be transmitted from DeepStream to a message broker. Each payload can have information for multiple objects in the frame.Gst-nvmsgconv plugin interface with a low levelnvmsgconvlibrary which provides APIs for payload generation using below metadata types:NVDS_EVENT_MSG_META(NvDsEventMsgMeta) type metadata attached to the buffer as user metadata of frame meta. For the batched buffer, metadata of all objects of a frame must be under the corresponding frame meta. This is the default option.By parsing theNVDS_FRAME_META(NvDsFrameMeta) type andNVDS_OBJECT_META(NvDsObjectMeta) type in Gst buffer and available fields in these metadata types are used to create message payload based on schema type. To use this option,  set gst propertymsg2p-newapi= true.This API also supports attaching a custom user message blob(a json formatted string) for each payload if the msg blob is added as user metadata of NvDsFrameMeta.
Additionally, with this API there’s also an other gst property you can use to set the frame interval at which each payload is generated.frame-interval= <interval>. If this is not set, the default frame interval at which frames are generates is every 30 framesThe generated payload (NvDsPayload) in both the above cases are attached back to the input buffer asNVDS_PAYLOAD_METAtype user metadata.Additionally, Gst-nvmsgconv plugin provides optional properties:
-debug-payload-dir: Absolute path of the directory to dump payloads for debugging
-multiple-payloads: Generate multiple message payloadsInputs and Outputs#InputsGst Buffer with NvDsEventMsgMeta or NvDsFrameMeta/NvDsObjectMetaControl parametersconfigmsg2p-libpayload-typecomp-iddebug-payload-dir (optional)multiple-payloads (optional)msg2p-newapi (optional)frame-interval (optional)OutputSame Gst Buffer with additional NvDsPayload metadata. This metadata contains information about the payload generated by the plugin.Features#The following table summarizes the features of the plugin.Gst-nvmsgconv plugin features#FeatureDescriptionReleasePayload in JSON formatMessage payload is generated in JSON formatDS 3.0Supports DeepStream schema specificationDeepStream schema spec implementation for messagesDS 3.0Custom schema specificationProvision for custom schemas for messagesDS 3.0Key-value file parsing for static propertiesRead static properties of sensor/place/module in the form of key-value pair from a text fileDS 3.0CSV file parsing for static propertiesRead static properties of sensor/place/module from a CSV fileDS 3.0DeepStream 4.0.1 minimalistic schemaMinimal variation of the DeepStream message schemaDS 4.0New msgconv apiSupports generation of deepStream message schema payloads(full & minimal) directly using Gst buffer frame & object metadataDS 6.0Payload generation intervalSet frame intervals at which payloads are generatedDS 6.0Gst Properties#The following table describes the Gst-nvmsgconv plugin’s Gst properties.Gst-nvmsgconv plugin gst properties#PropertyMeaningType and RangeExample / NotesPlatformsconfigAbsolute pathname of a configuration file that defines static properties of various sensors, places, and modules.Stringconfig=msgconv_config.txt 
or
config=msgconv_config.csvdGPU
Jetsonmsg2p-libAbsolute pathname of the library containing a custom implementation of the nvds_msg2p_* interface for custom payload generation.Stringmsg2p-lib=libnvds_msgconv_custom.sodGPU
Jetsonpayload-typeType of schema payload to be generated. Possible values are:PAYLOAD_DEEPSTREAM: Payload using DeepStream schema.PAYLOAD_DEEPSTREAM_MINIMAL: Payload using minimal DeepStream schema.PAYLOAD_CUSTOM: Payload using custom schemas.Integer,
0 to 4,294,967,295payload-type=0
or
payload-type=257dGPU
Jetsoncomp-idComponent ID of the plugin from which metadata is to be processed.Integer,
0 to 4,294,967,295comp-id=2
Default is NvDsEventMsgMetadGPU
Jetsondebug-payload-dirDirectory to dump payloadStringdebug-payload-dir=<absolute path>
Default is NULLdGPU
Jetsonmultiple-payloadsGenerate multiple message payloadsBooleanmultiple-payloads=1
Default is 0dGPU
Jetsonmsg2p-newapiGenerate payloads using Gst buffer frame/object metadataBooleanmsg2p-newapi=1
Default is 0dGPU
Jetsonframe-intervalFrame interval at which payload is generatedInteger,
1 to  4,294,967,295frame-interval=25
Default is 30dGPU
Jetsondummy-payloadBy default payload is generated if NVDS_EVENT_MSG_META is attached to buffer. With this dummy payload can be generated if there is no NVDS_EVENT_MSG_META attached to bufferBooleandummy-payload=true
Default is falsedGPU
JetsonNvMsgConv low level library API’s#Gst-nvmsgconv plugin interface with a low level nvmsgconv library which provides APIs for payload generation:nvds_msg2p_generateto generate message payload usingNVDS_EVENT_MSG_META(NvDsEventMsgMeta) typenvds_msg2p_generate_newto generate message payload using GST buffers(NVDS_FRAME_META(NvDsFrameMeta) andNVDS_OBJECT_META(NvDsObjectMeta) type)Deepstream sample test apps have options to use either of API’s to generate message payloaddeepstream-test4-appUse commandline option –msg2p-meta to choose the metadata type to create payload.0=Event Msg meta(default), Create NVDS_EVENT_MSG_META type of meta and attach to buffer1=nvdsmeta, Use the fields within NvDsFrameMeta/NvDsObjectMeta to populate payloaddeepstream-test5-appConfig options present as below and default option creates payload using NvdsEventMsgMeta#(0): Create payload using NvdsEventMsgMeta#(1): New Api to create payload using NvDsFrameMetamsg-conv-msg2p-new-api=0For payload generation usingNVDS_EVENT_MSG_METAtype, users need:Create NVDS_EVENT_MSG_META type of meta and attach to buffer.Use NVDS_EVENT_MSG_META for different types of objects e.g. vehicle, person etc.Provide copy / free functions if meta data is extended through “extMsg” field.Whereas using the new NvMsgConv low level library API to generate payload, users do not need to worry about creating/destroying any payload object in their sample test application. The nvmsgconv low level library directly uses GST buffers(NVDS_FRAME_META/NVDS_OBJECT_META) to create payload.Schema Customization#This plugin can be used to implement a custom schema in two ways:By modifying the payload generator library: To perform a simple customization of DeepStream schema fields, modify the low-level payload generation library files inside directorysources/libs/nvmsgconv. Payload generated usingNVDS_EVENT_MSG_META(NvDsEventMsgMeta) type can be customized by modifyingsources/libs/nvmsgconv/deepstream_schema/eventmsg_payload.cpp.  If payload is generated using metadata within DS GST buffers(NVDS_FRAME_META(NvDsFrameMeta) type andNVDS_OBJECT_META(NvDsObjectMeta) type), you can customize payload genertion by modifying the filesources/libs/nvmsgconv/deepstream_schema/dsmeta_payload.cpp.By implementing thenvds_msg2pinterface: If a library that implements the custom schema needs to be integrated with the DeepStream SDK, wrap the library in thenvds_msg2pinterface and set the plugin’s msg2p-lib property to the library’s name. Set the payload-type property toPAYLOAD_CUSTOM.Seesources/libs/nvmsgconv/nvmsgconv.cppfor an example implementation of thenvds_msg2pinterface.Payload with Custom Objects#You can add a group of custom objects to theNvDsEventMsgMetastructure in theextMsgfield and specify their size in theextMsgSizefield. The meta copy (copy_func) and free (release_func) functions must handle the custom fields accordingly.
The payload generator library handles some standard types of objects (Vehicle, Person, Face, etc.) and generates the payload according to the schema selected. To handle custom object types, you must modify the payload generator librarynvmsgconv.cpp.
Seedeepstream-test4for details about adding custom objects asNVDS_EVENT_MSG_METAuser metadata with buffers for generating a custom payload to send to back end.If using Deepstream GST buffers(NVDS_FRAME_META(NvDsFrameMeta) type andNVDS_OBJECT_META(NvDsObjectMeta) type) to generate payload instead ofNvDsEventMsgMeta, You can attach a custom message blob(string) to payload usingNVDS_CUSTOM_MSG_BLOBtype by creating NvDsCustomMsgInfo object and specifying the fieldsmessage(custom message blob) andlen(size of the custom message). The low-level payload generation library parses every frame metadata and checks forNVDS_CUSTOM_MSG_BLOBtype and if present attaches it to the payload. This option is available when gst propertymsg2p-newapi= true (Using the new msgconv API).Similar to generating custom objects to theNvDsEventMsgMetastructure, referdeepstream-test4for details about adding custom objects, you can use the meta copy (copy_func) and free (release_func) functions to handle the custom fields and modify the application to attach a custom message usingNVDS_CUSTOM_MSG_BLOB(and NvDsCustomMsgInfo object) type instead ofNvDsEventMsgMetatype.previousGst-nvimageencnextGst-nvmsgbrokerOn this pageInputs and OutputsFeaturesGst PropertiesNvMsgConv low level library API’sSchema CustomizationPayload with Custom ObjectsPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.