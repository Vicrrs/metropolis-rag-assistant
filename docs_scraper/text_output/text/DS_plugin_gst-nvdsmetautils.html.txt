Gst-nvdsmetautils — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvdsmetautilsGst-nvdsmetautils#gst-nvdsmetautils contain nvdsmetainsert and nvdsmetaextract plugins. Below is the detailed explanation of each plugin, purpose and use-cases.Gst-nvdsmetainsert#The Gst-nvdsmetainsert plugin is a NvDsMeta utils plugin which provides a custom library hooking interface for single/batched audio/video frame(s) processing. Custom lib implementation can have algorithms to  serialize NvDsBatchmeta or custom gst user meta received on the input buffers depending upon the use case. The plugin accepts batched audio/video NVMM HW buffers, and outputs batched audio/video NVMM HW buffers with serialized metadata on the buffer as per the use case.Inputs and Outputs#InputsNVMM Gst Buffer.Control parametersserialize-libOutputNVMM Gst Buffer in place.Features#The following table summarizes the features of the plugin.Gst-nvdsmetainsert features#FeatureDescriptionReleaseSimplified APISimplified interface to implement custom library to add any algorithm without implementing new pluginDS 6.1Easy Data AccessingEasy access to GstBuffer and it’s metadata inside custom libraryDS 6.1Reference Impl.Reference implementation of custom library provides implementation for serialized data to be used with decoder, serializing and de-serializing of NvDsBatchmeta.DS 6.1customlib_impl Interfaces#serialize_data => Accepts a GstBuffer, serializes input meta and attaches it as NvDsUserMeta / gst meta on the same GstBuffer.Gst Properties#The following table describes the Gst properties of the Gst-nvdsmetainsert plugin.Gst-nvdsmetainsert gst properties#PropertyMeaningType and RangeExample/NotesPlatformsserialize-libSet serialization library Name to be used.StringDefault: nulldGPUUse Cases & Sample Pipelines#Below are two reference implementations, these can be extended to suit any particular use case.Use Case 1 - Attaching CustomMeta as SEI data in H264 :nvdsmetainsert plugin with sei_serialization library released as part of DS SDK 6.1 onwards,
serializes input metadata and attaches it on the same buffer as gst meta, nv encoder embeds this metadata in the bitstream with type as SEI unregistered data.Below pipeline demonstrates generation of dummy bounding boxes by nvdsvideotemplate plugin and this metadata is serialized by nvdsmetainsert plugin with serialization lib.
Serialized metadata is used by nv encoder to insert it as SEI unregistered data in H264 bitstream.exportUSE_NEW_NVSTREAMMUX=yesgst-launch-1.0filesrclocation=~/sample_720p.mp4!qtdemux!h264parse\!nvv4l2decoder!m.sink_0nvstreammuxname=m!nvdsvideotemplatedummy-meta-insert=1\customlib-name=libcustom_videoimpl.socustomlib-props="scale-factor:0.5"\!nvmultistreamtilerwidth=640height=480!nvdsmetainsertserialize-lib="libnvds_sei_serialization.so"\!nvv4l2h264encbitrate=1000000!filesinklocation=~/ds_maxine_sei.h264\filesrclocation=~/sample_720p.mp4!qtdemux!h264parse!nvv4l2decoder!m.sink_1Use Case 2 - Video NvDsBatchMeta Serialization :nvdsmetainsert plugin with nvds_video_meta_serialization library released as part of DS SDK 6.1 onwards,
serializes NvDsFrameMeta and NvDsObjectMeta and attaches as NvDsUserMeta inside NvDsFrameMeta on the same buffer.Below pipeline demonstrates serialization of NvDsFrameMeta and NvDsObjectMeta by nvdsmetainsert plugin with serialization lib. Serialized metadata is used by nvdsmetaextract plugin to
de-serialize and re-construct NvDsFrameMeta and NvDsObjectMeta.Setting CLEAR_NVDS_BATCH_META=yes is needed only for the demonstration of below pipeline, in actual use-case scenario like RDMA transfer this flag is not needed.exportCLEAR_NVDS_BATCH_META=yesexportUSE_NEW_NVSTREAMMUX=yesgst-launch-1.0filesrclocation=~/sample_720p.mp4!qtdemux!h264parse!nvv4l2decoder\!m.sink_0nvstreammuxname=m!nvvideoconvert!nvinferconfig-file-path=config_infer_primary.txt\!nvdsmetainsertserialize-lib="libnvds_video_metadata_serialization.so"\!nvdsmetaextractdeserialize-lib="libnvds_video_metadata_serialization.so"\!nvmultistreamtilerwidth=1280height=720!nvdsosd!nveglglessinkfilesrclocation=~/sample_720p.mp4\!qtdemux!h264parse!nvv4l2decoder!m.sink_1Use Case 3 - Audio NvDsBatchMeta Serialization :nvdsmetainsert plugin with nvds_audio_meta_serialization library released as part of DS SDK 6.1 onwards,
serializes NvDsAudioFrameMeta and attaches as NvDsUserMeta inside NvDsAudioFrameMeta on the same buffer.Below pipeline demonstrates serialization of NvDsAudioFrameMeta by nvdsmetainsert plugin with serialization lib. Serialized metadata is used by nvdsmetaextract plugin to de-serialize
and re-construct NvDsAudioFrameMeta.Setting CLEAR_NVDS_BATCH_META=yes is needed only for the demonstration of below pipeline, in actual use-case scenario like RDMA transfer this flag is not needed.exportCLEAR_NVDS_BATCH_META=yesexportUSE_NEW_NVSTREAMMUX=yesgst-launch-1.0\filesrclocation=~/noise_44_1k_16bits.wav!wavparse\!audioconvert!audioresample!"audio/x-raw, rate=(int)44100"!queue\!m.sink_0nvstreammuxname=mbatch-size=2!queue\!nvinferaudioaudio-framesize=44100audio-hopsize=11025batch-size=2\config-file-path=config_infer_audio_sonyc.txt\audio-transform="melsdb,fft_length=2560,hop_size=692,dsp_window=hann,num_mels=128,sample_rate=44100,p2db_ref=(float)1.0,p2db_min_power=(float)0.0,p2db_top_db=(float)80.0"\!nvdsmetainsertserialize-lib="libnvds_audio_metadata_serialization.so"\!nvdsmetaextractdeserialize-lib="libnvds_audio_metadata_serialization.so"\!fakesink\filesrclocation=~/noise_44_1k_16bits.wav!wavparse\!audioconvert!audioresample!"audio/x-raw, rate=(int)44100"!m.sink_1Gst-nvdsmetaextract#The Gst-nvdsmetaextract plugin is a NvDsMeta utils plugin which provides a custom library hooking interface for single/batched audio/video frame(s) processing. Custom lib implementation can have algorithms to de-serialize NvDsBatchmeta or custom gst user meta received on the input buffer depending upon the use case. The plugin accepts batched/non-batched audio/video NVMM HW buffers, and outputs batched/non-batched audio/video NVMM HW buffers with de-serialized metadata on the buffer as per the use case.Inputs and Outputs#InputsNVMM Gst Buffer.Control parametersdeserialize-libOutputNVMM Gst Buffer in place.Features#The following table summarizes the features of the plugin.Gst-nvdsmetaextract features#FeatureDescriptionReleaseSimplified APISimplified interface to implement custom library to add any algorithm without implementing new pluginDS 6.1Easy Data AccessingEasy access to GstBuffer and it’s metadata inside custom libraryDS 6.1Reference Impl.Reference implementation of custom library provides implementation for serialized data to be used with decoder, serializing and de-serializing of NvDsBatchmeta.DS 6.1customlib_impl Interfaces#deserialize_data => Accepts a GstBuffer, de-serializes input meta and attaches as gst meta / update existing NvDsBatchMeta on the same GstBuffer.Gst Properties#The following table describes the Gst properties of the Gst-nvdsmetaextract plugin.Gst-nvdsmetaextract gst properties#PropertyMeaningType and RangeExample/NotesPlatformsdeserialize-libSet de-serialization library Name to be used.StringDefault: nulldGPUUse Cases & Sample Pipelines#Below are two reference implementations, these can be extended to suit any particular use case.Use Case 1 : CustomMeta De-Serialization SEI in H264 :Nv decoder sends parsed SEI data of unregistered type which is serialized metadata inside bitstream, nvdsmetaextract plugin with sei_serialization library released as part of DS SDK 6.1 onwards,
de-serializes this metadata and add it on the outgoing buffer as gst metadata, this data can be consumed by downstream plugin as per the use-case.Below pipeline demonstrates parsing serialized SEI data in the bitstream, attaching it as Gst meta on the outgoing buffer and de-serializing it in nvdsmetaexract plugin:gst-launch-1.0filesrclocation=~/ds_maxine_sei.h264!h264parse!nvv4l2decoderextract-sei-type5-data=1\!nvdsmetaextractdeserialize-lib=libnvds_sei_serialization.so!nveglglessinkUse Case 2 : Video NvDsBatchMeta De-Serialization :Upstream component sends GstBuffer with serialized NvDsFrameMeta & NvDsObjectMeta attached as NvDsUserMeta inside NvDsFrameMeta, nvdsmetaextract plugin with nvds_video_meta_serialization library released as part of DS SDK 6.1 onwards,
de-serializes this NvDsUserMeta and re-constructs NvDsFrameMeta and NvDsObjectMeta as part of NvDsBatchMeta.Below pipeline demonstrates serialization of NvDsFrameMeta and NvDsObjectMeta by nvdsmetainsert plugin with serialization lib. Serialized metadata is used by nvdsmetaextract plugin to
de-serialize and re-construct NvDsFrameMeta and NvDsObjectMeta.Setting CLEAR_NVDS_BATCH_META=yes is needed only for the demonstration of below pipeline, in actual use-case scenario like RDMA transfer this flag is not needed.exportCLEAR_NVDS_BATCH_META=yesexportUSE_NEW_NVSTREAMMUX=yesgst-launch-1.0filesrclocation=~/sample_720p.mp4!qtdemux!h264parse!nvv4l2decoder\!m.sink_0nvstreammuxname=m!nvvideoconvert!nvinferconfig-file-path=config_infer_primary.txt\!nvdsmetainsertserialize-lib="libnvds_video_metadata_serialization.so"\!nvdsmetaextractdeserialize-lib="libnvds_video_metadata_serialization.so"\!nvmultistreamtilerwidth=1280height=720!nvdsosd!nveglglessinkfilesrclocation=~/sample_720p.mp4\!qtdemux!h264parse!nvv4l2decoder!m.sink_1Use Case 3 - Audio NvDsBatchMeta Serialization :Upstream component sends GstBuffer with serialized NvDsAudioFrameMeta attached as NvDsUserMeta inside NvDsAudioFrameMeta, nvdsmetaextract plugin with nvds_audio_meta_serialization library released as part of DS SDK 6.1 onwards,
de-serializes this NvDsUserMeta and re-constructs NvDsAudioFrameMeta as part of NvDsBatchMetaBelow pipeline demonstrates serialization of NvDsAudioFrameMeta by nvdsmetainsert plugin with serialization lib. Serialized metadata is used by nvdsmetaextract plugin to de-serialize
and re-construct NvDsAudioFrameMeta.Setting CLEAR_NVDS_BATCH_META=yes is needed only for the demonstration of below pipeline, in actual use-case scenario like RDMA transfer this flag is not needed.exportCLEAR_NVDS_BATCH_META=yesexportUSE_NEW_NVSTREAMMUX=yesgst-launch-1.0\filesrclocation=~/noise_44_1k_16bits.wav!wavparse\!audioconvert!audioresample!"audio/x-raw, rate=(int)44100"!queue\!m.sink_0nvstreammuxname=mbatch-size=2!queue\!nvinferaudioaudio-framesize=44100audio-hopsize=11025batch-size=2\config-file-path=config_infer_audio_sonyc.txt\audio-transform="melsdb,fft_length=2560,hop_size=692,dsp_window=hann,num_mels=128,sample_rate=44100,p2db_ref=(float)1.0,p2db_min_power=(float)0.0,p2db_top_db=(float)80.0"\!nvdsmetainsertserialize-lib="libnvds_audio_metadata_serialization.so"\!nvdsmetaextractdeserialize-lib="libnvds_audio_metadata_serialization.so"\!fakesink\filesrclocation=~/noise_44_1k_16bits.wav!wavparse\!audioconvert!audioresample!"audio/x-raw, rate=(int)44100"!m.sink_1previousGst-nvdsosdnextGst-nvdsvideotemplateOn this pageGst-nvdsmetainsertInputs and OutputsFeaturescustomlib_impl InterfacesGst PropertiesUse Cases & Sample PipelinesGst-nvdsmetaextractInputs and OutputsFeaturescustomlib_impl InterfacesGst PropertiesUse Cases & Sample PipelinesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.