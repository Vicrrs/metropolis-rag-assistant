Gst-nvdsudpsrc — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvdsudpsrcGst-nvdsudpsrc#The Gst-nvdsudpsrc plugin is a source type component which is used to receive the UDP-RTP packets from the network. Internally, the plugin usesRivermaxSDK APIs for network communications. NVIDIA Rivermax®offers a unique IP-based solution for any media and data streaming use case. For more details, see theRivermax Product Page..Rivermax utilizes the kernel bypass technology and RDMA capabilities to achieve better CPU performance, low latency, and higher bandwidth. On top ofRivermaxbased enhancements, some of memory and buffer management optimization have been implemented to further reduce the CPU utilization in case of high packet rate use cases.This component also supports RTP header and payload separation. RTP header and payloads can be received in separate memories. Header will always be in system memory while payload can directly be copied to GPU (Pinned) memory. This can avoid memory copies in cases when GPU processing is performed on the RTP payloads. Header and payload separation will happen only ifheader-sizeproperty is set to non-zero value and for fixed header size.High resolution uncompressed video streams have a very high number of RTP packets per second. In such case, OSS de-packetization component (rtpvrawdepay) becomes bottleneck to process stream real-time. To handle such cases,nvdsudpsrchas added support for de-packetization of uncompressed video and audio streams as per SMPTE 2110-20/30 specifications. In this mode, nvdsudpsrc will provide GstBuffer having complete video / audio frame as an output instead of RTP packets.NoteTo use de-packetization for uncompressed video and audio payloads withinnvdsudpsrc, there are certain assumptions regarding input stream.Each RTP packet must be of fixed size with fixed header and payload size.There should not be more than one sample row data (SRD) per RTP packet.With the support for de-packetization,nvdsudpsrccan now have four different operating modes based on the value ofcapsproperty of the component.Default modenvdsudpsrc will receive RTP packets having any type of payload from the network and push those packets to the downstream depayloader component for de-packetization. In this mode, nvdsudpsrc component is agnostic to content of the RTP packet. This is default mode and the source pad should have “application/x-rtp, ……” as caps.Uncompressed video frame as outputnvdsudpsrc will receive RTP packets having uncompressed video as payload and will do de-packetization as per SMPTE 2110-20 specification to form a video frame before sending to downstream components. This mode will be activated when caps property is set with “video/x-raw(memory:NVMM), …..” caps.Uncompressed audio frame as outputnvdsudpsrc will receive RTP packets having uncompressed audio as payload and will do de-packetization as per SMPTE 2110-30 specification to form an audio frame before sending to downstream components. This mode will be activated when the caps property is set with “audio/x-raw, …..” caps.Generic data as outputnvdsudpsrc will receive RTP packets having any type of payload and will do de-packetization to form a frame before sending to downstream components. In this case, the frame boundary is not decided based on the parsing of the RTP / payload header but based on the configurable value of the number of packets. i.e., the value ofpayload-multipleproperty will decide on how many packets are considered as a frame and nvdsudpsrc will remove the RTP header of those many packets and combine the payloads to form a frame. This mode will be activated when the caps property is set with “application/x-custom, …..” caps.System can also have Gstreamer provided OSS implementation of udp source (udpsrc) component. In that case system would have two implementations for udp source -udpsrcandnvdsudpsrc.nvdsudpsrccomponent can only be used with NVIDIA ConnectX-5 and above cards after having installedRivermaxSDK and its license.Download and setup theRivermax1.40.x SDK here:https://developer.nvidia.com/networking/rivermax-getting-startedFollow the instruction on the SDK page to obtainRivermaxdevelopment license.To selectnvdsudpsrcout of two installations, use eitherLOCAL_IFACE_IPenvironment variable orlocal-iface-ipproperty. Use the command below to export the environment variable:export LOCAL_IFACE_IP=<IP of NIC>nvdsudpsrccomponent also requiresCAP_NET_RAWcapability. Either run the application that usesnvdsudpsrccomponent with superuser privilege or set theCAP_NET_RAWcapabilities using the following command.sudosetcapCAP_NET_RAW=ep<absolutepathofapplication>For example:sudo setcap CAP_NET_RAW=ep /opt/nvidia/deepstream/deepstream/bin/deepstream-app

sudo setcap CAP_NET_RAW=ep /usr/bin/gst-launch-1.0Inputs and Outputs#InputsNoneControl parametersLOCAL_IFACE_IP ENV flag or local-iface-ip propertypayload-sizeheader-sizenum-packetsuriaddressportsource-addresscapsgpu-idpayload-multipleOutputGstBufferList having RTP packets as buffer content.GstBuffer having uncompressed audio or video frame.Features#The following table summarizes the features of the plugin.Gst-nvdsudpsrc plugin features#FeatureDescriptionReleaseSupports header and payload separationSeparate memories can be allocated for RTP header and payloadDS 6.0Supports any type of RTP packet (Compressed, Uncompressed, audio etc.)No restriction on content of RTP payloadDS 6.0Supports RTCP packetsIn addition to RTP, RTCP packets can also be receivedDS 6.0Supports RTP payload directly in GPU memoryContent of RTP payload can directly be in GPU memory. This can avoid copy if GPU processing of payload is requiredDS 6.0Supports de-packetization of uncompressed videoRTP packets having uncompressed video as payload can be depacketized and converted to video frame as per SMPTE 2110-20 specificationDS 6.3Supports de-packetization of uncompressed audioRTP packets having uncompressed audio as payload can be depacketized and converted to audio frame as per SMPTE 2110-30 specificationDS 6.3Supports de-packetization of generic payloadRTP packets having fixed header and payload size can be depacketized to form a frame. In this mode headers will be removed and payloads will be combined to form a frameDS 6.3Gst Properties#The following table describes the Gst-nvdsudpsrc plugin’s Gst properties.Gst-nvdsudpsrc plugin gst properties#PropertyMeaningType and RangeExample / NotesPlatformsportThe port number to receive the RTP packets fromInteger,
0 to 65535Port=5004dGPU
JetsonaddressIP address of the server to receive packets fromStringaddress=192.168.4.60dGPU
JetsonuriUri of the server in the form of udp://<ip>:<port>Stringuri=udp://192.168.4.60:5004dGPU
Jetsonpayload-sizeSize of payload in RTP packetInteger,
0 to 65535payload-size=1500dGPU
Jetsonheader-sizeRTP header sizeInteger,
0 to 65535header-size=12dGPU
Jetsonnum-packetsNumber of packets for which memory to allocateInteger,
0 to 2147483647num-packets=10000dGPU
Jetsonlocal-iface-ipIP Address associated with network interface through which to receive the dataStringlocal-iface-ip=192.168.2.20dGPU
Jetsonbuffer-sizeSize of the kernel receive buffer in bytesInteger,
0 to 2147483647buffer-size=50000dGPU
JetsonreuseEnable reuse of the portBooleanreuse=1dGPU
Jetsonmulticast-ifaceThe network interface on which to join the multicast groupStringmulticast-iface=eth0dGPU
Jetsonauto-multicastAutomatically join/leave multicast groupsBooleanauto-multicast=1dGPU
JetsonloopUsed for setting the multicast loop parameterBooleanloop=1dGPU
Jetsonsource-addressUnicast address to receive the data only from that senderStringsource-address=”192.168.3.4”dGPU
Jetsongpu-idGPU device id to allocate the buffersInteger, -1 to 32767gpu-id=0dGPU Jetsonpayload-multipleOutput buffer to be multiple of these number of packetsInteger, 0 to 65535payload-multiple=4320dGPU JetsonExample pipelines#Pipeline to receive and play 24 bit 2 channel 48k audio stream:LOCAL_IFACE_IP=<ip address of NIC> gst-launch-1.0 nvdsudpsrc address=<unicast / multicast address> port=<port number> ! 'application/x-rtp, media=(string)audio, clock-rate=(int)48000, encoding-name=(string)L24, encoding-params=(string)2, channels=(int)2, payload=(int)97' ! rtpL24depay ! rawaudioparse use-sink-caps=1 ! queue ! autoaudiosink -v --gst-debug=3Pipeline to receive and display 10bit YUV 4:2:2 1080p30 video stream:gst-launch-1.0 nvdsudpsrc address=<unicast / multicast address> port=<port number> local-iface-ip=<ip addr of NIC> ! 'application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)RAW, sampling=(string)YCbCr-4:2:2, depth=(string)10, width=(string)1920, height=(string)1080, colorimetry=(string)BT709, payload=(int)96' ! rtpvrawdepay ! nvvideoconvert ! nveglglessink -v --gst-debug=3Pipeline to receive and display 10bit YUV 4:2:2 1080p30 video stream withoutadditionaldepayloadcomponent:gst-launch-1.0 nvdsudpsrc address=<unicast / multicast address> port=<port number> local-iface-ip=<ip addr of NIC> caps='video/x-raw(memory:NVMM), width=1920, height=1080, format=(string)UYVP, framerate=30/1' header-size=20 payload-size=1200 ! nvvideoconvert ! nveglglessink -v --gst-debug=3Pipeline to receive and display 10bit YUV 4:2:2 1080p30 video stream without additional depayload component and usingGPUDirect:gst-launch-1.0 nvdsudpsrc address=<unicast / multicast address> port=<port number> local-iface-ip=<ip addr of NIC> caps='video/x-raw(memory:NVMM), width=1920, height=1080, format=(string)UYVP, framerate=30/1' header-size=20 payload-size=1200 gpu-id=0 ! nvvideoconvert ! nveglglessink -v --gst-debug=3Pipeline to receive and play 24 bit 2 channel 48k audio stream without additional depayload component:gst-launch-1.0 nvdsudpsrc address=<unicast / multicast address> local-iface-ip=<ip address of NIC> port=<port number> caps='audio/x-raw, format=(string)S24BE, layout=(string)interleaved, rate=(int)48000, channels=(int)2' payload-size=288 header-size=12 ! autoaudiosink -v --gst-debug=3Pipeline to receive and depacketize generic payload. Following pipeline receives uncompressed video as generic paylaod:gst-launch-1.0 nvdsudpsrc address=<unicast / multicast address> local-iface-ip=<ip address of NIC> port=<port number> caps='application/x-custom', header-size=20, payload-size=1200, payload-multiple=4320 ! fakesink -v --gst-debug=3previousGst-nvdsanalyticsnextGst-nvdsudpsinkOn this pageInputs and OutputsFeaturesGst PropertiesExample pipelinesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.