Python Sample Apps and Bindings Source Details — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formPython...Python Sample Apps and Bindings Source Details#Sample Application Source Details#The following table shows the location of the Python sample applications underNVIDIA-AI-IOT/deepstream_python_apps.Python sample application source details#Reference test applicationPath inside the GitHub repoDescriptionSimple test application 1apps/­deepstream-test1Simple example of how to use DeepStream elements for a single H.264 stream: filesrc → decode → nvstreammux → nvinfer (primary detector) → nvdsosd → renderer.Simple test application 2apps/­deepstream-test2Simple example of how to use DeepStream elements for a single H.264 stream: filesrc → decode → nvstreammux → nvinfer (primary detector) → nvtracker → nvinfer (secondary classifier) → nvdsosd → renderer.Simple test application 3apps/­deepstream-test3Builds on deepstream-test1 (simple test application 1) to demonstrate how to:Use multiple sources in the pipelineUse a uridecodebin to accept any type of input (e.g. RTSP/File), any GStreamer supported container format, and any codecConfigure Gst-nvstreammux to generate a batch of frames and infer on it for better resource utilizationExtract the stream metadata, which contains useful information about the frames in the batched bufferSimple test application 4apps/­deepstream-test4Builds on deepstream-test1 for a single H.264 stream: filesrc, decode, nvstreammux, nvinfer, nvdsosd, renderer to demonstrate how to:Use the Gst-nvmsgconv and Gst-nvmsgbroker plugins in the pipelineCreate NVDS_META_EVENT_MSG type metadata and attach it to the bufferUse NVDS_META_EVENT_MSG for different types of objects, e.g. vehicle and personImplement “copy” and “free” functions for use if metadata is extended through the extMsg fieldUSB camera source applicationapps/­deepstream-test1-usbcamSimple test application 1 modified to process a single stream from a USB camera.RTSP output applicationapps/­deepstream-test1-rtsp-outSimple test application 1 modified to output visualization stream over RTSP.Image data access applicationapps/­deepstream-imagedata-multistreamBuilds on simple test application 3 to demonstrate how to:Access decoded frames as NumPy arrays in the pipelineCheck detection confidence of detected objects (DBSCAN or NMS clustering required)Modify frames and see the changes reflected downstream in the pipelineUse OpenCV to annotate the frames and save them to fileSSD detector output parser applicationapps/­deepstream-ssd-parserDemonstrates how to perform custom post-processing for inference output from Triton Inference Server:Use SSD model on Triton Inference Server for object detectionEnable custom post-processing and raw tensor export for Triton Inference Server via configuration file settingsAccess inference output tensors in the pipeline for post-processing in PythonAdd detected objects to the metadataOutput the OSD visualization to MP4 fileOptical flow applicationapps/deepstream-opticalflowDemonstrates how to obtain opticalflow meta data and also demonstrates how to:Access optical flow vectors as numpy arrayVisualize optical flow using obtained flow vectors and OpenCVSegmentation applicationapps/deepstream-segmentationDemonstrates how to obtain segmentation meta data and also demonstrates how to:Acess segmentation masks as numpy arrayVisualize segmentation using obtained masks and OpenCVAnalytics applicationapps/deepstream-nvdsanalyticsDemonstrates how to use the nvdsanalytics plugin and obtain analytics metadataRuntime source add/delete applicationapps/runtime_source_add_deleteDemonstrates how to add and delete input sources at runtimeFace redaction applicationapps/deepstream-imagedata-multistream-redactionDemonstrates how to access image data and perform face redactionRTSP input/output applicationapps/deepstream-rtsp-in-rtsp-outMulti-stream pipeline with RTSP input and outputPreprocess applicationapps/deepstream-preprocess-testDemonstrates how to use nvdspreprocess plugin and perform custom preprocessing on provided ROIsDemuxer applicationapps/deepstream-demux-multi-in-multi-outBuilds on deepstream-test3 to demonstrate how to use nvstreamdemux plugin to split batches and output separate buffer/streams.CuPy applicationapps/deepstream-imagedata-multistream-cupyDemonstrates how to access GPU buffer in a multistream source as a CuPy array and modify images in place.Segmask applicationapps/deepstream-segmaskDemonstrates how to extract NvOSD_MaskParams from stream metadata and resize and binarize mask array for interpretable segmentation mask.Custom binding applicationapps/deepstream-custom-binding-testDemonstrates how to use NvDsUserMeta to attach and extract custom data structure written in Python bindings to/from the buffer.Python Bindings and Application Development#This section provides details about DeepStream application development in Python.
Python bindings are available here:NVIDIA-AI-IOT/deepstream_python_apps.
Read more about Pyds APIhere.Prerequisites#Ubuntu 22.04DeepStream SDK 7.0 or laterPython 3.10Gst Python v1.20.3If Gst python installation is missing on Jetson, follow the instructions in bindingsreadme.Running Sample Applications#Clone thedeepstream_python_appsrepo under<DeepStreamROOT>/sources:gitclonehttps://github.com/NVIDIA-AI-IOT/deepstream_python_appsThis will create the following directory:<DeepStreamROOT>/sources/deepstream_python_appsThe Python apps are under theappsdirectory. Go into each app directory and follow instructions in the README.NoteThe app configuration files contain relative paths for models.Pipeline Construction#DeepStream pipelines can be constructed usingGstPython, the GStreamer framework’s Python bindings. See sample applications main functions for pipeline construction examples.MetaData Access#DeepStream MetaData contains inference results and other information used in analytics. The MetaData is attached to theGstBufferreceived by each pipeline component. The metadata format is described in detail in the SDK MetaData documentation and API Guide.
The SDK MetaData library is developed in C/C++. Python bindings provide access to the MetaData from Python applications. Please find Python bindings source and packages atNVIDIA-AI-IOT/deepstream_python_apps.Memory Management#Memory for MetaData is shared by the Python and C/C++ code paths. For example, a MetaData item may be added by a probe function written in Python and needs to be accessed by a downstream plugin written in C/C++. The deepstream-test4 app contains such usage. The Python garbage collector does not have visibility into memory references in C/C++, and therefore cannot safely manage the lifetime of such shared memory. Because of this complication, Python access to MetaData memory is typically achieved via references without claiming ownership.Allocations#When MetaData objects are allocated in Python, an allocation function is provided by the bindings to ensure proper memory ownership of the object. If the constructor is used, the the object will be claimed by the garbage collector when its Python references terminate. However, the object will still need to be accessed by C/C++ code downstream, and therefore must persist beyond those Python references.
Example: To allocate anNvDsEventMsgMetainstance, use this:msg_meta = pyds.alloc_nvds_event_msg_meta() *# get reference to allocated instance without claiming memory ownership*NOT this:msg_meta = NvDsEventMsgMeta() *# memory will be freed by the garbage collector when msg_meta goes out of scope in Python*Allocators are available for the following structs:NvDsVehicleObject:alloc_nvds_vehicle_object()NvDsPersonObject:alloc_nvds_person_object()NvDsFaceObject:alloc_nvds_face_object()NvDsEventMsgMeta:alloc_nvds_event_msg_meta()NvDsEvent:alloc_nvds_event()NvDsPayload:alloc_nvds_payload()Genericbuffer:alloc_buffer(size)String Access#Some MetaData structures contain string fields. Sections below provide details on accessing them.Setting String Fields#Setting a string field results in the allocation of a string buffer in the underlying C++ code.obj.type="Type"This will cause a memory buffer to be allocated, and the string “TYPE” will be copied into it. This memory is owned by the C code and will be freed later. To free the buffer in Python code, use:pyds.free_buffer(obj.type)NoteNvOSD_TextParams.display_textstring now gets freed automatically when a new string is assigned.Reading String Fields#Directly reading a string field returns C address of the field in the form of an int, for example:obj=pyds.NvDsVehicleObject.cast(data);print(obj.type)This will print an int representing the address ofobj.typein C (which is a char*).
To retrieve the string value of this field, usepyds.get_string(), for example:print(pyds.get_string(obj.type))Casting#Some MetaData instances are stored in GList form. To access the data in a GList node, the data field needs to be cast to the appropriate structure. This casting is done via cast() member function for the target type:NvDsBatchMeta.castNvDsFrameMeta.castNvDsObjectMeta.castNvDsUserMeta.castNvDsClassifierMeta.castNvDsDisplayMeta.castNvDsLabelInfo.castNvDsEventMsgMeta.castNvDsVehicleObject.castNvDsPersonObject.castIn version v0.5, standalone cast functions were provided. Those are now deprecated and superseded by the cast() functions above:glist_get_nvds_batch_metaglist_get_nvds_frame_metaglist_get_nvds_object_metaglist_get_nvds_user_metaglist_get_nvds_classifier_metaglist_get_nvds_display_metaglist_get_nvds_label_infoglist_get_nvds_event_msg_metaglist_get_nvds_vehicle_objectglist_get_nvds_person_objectExample:l_frame=batch_meta.frame_meta_listframe_meta=pyds.NvDsFrameMeta.cast(l_frame.data)Callback Function Registration#Custom MetaData added toNvDsUserMetarequire custom copy and release functions. The MetaData library relies on these custom functions to perform deep-copy of the custom structure, and free allocated resources. These functions are registered as callback function pointers in theNvDsUserMetastructure. Callback functions are registered using these functions:pyds.set_user_copyfunc(NvDsUserMeta_instance,copy_function)pyds.set_user_releasefunc(NvDsUserMeta_instance,free_func)NoteCallbacks need to be unregistered with the bindings library before the application exits. The bindings library currently keeps global references to the registered functions, and these cannot last beyond bindings library unload which happens at application exit. Use the following function to unregister all callbacks:pyds.unset_callback_funcs()See the deepstream-test4 sample application for an example of callback registration and deregistration.Limitation: The bindings library currently only supports a single set of callback functions for each application. The last registered function will be used.Optimizations and Utilities#Python interpretation is generally slower than running compiled C/C++ code. To provide better performance, some operations are implemented in C and exposed via the bindings interface. This is currently experimental and will expand over time.
The following optimized functions are available:pyds.NvOSD_ColorParams.set(doublered,doublegreen,doubleblue,doublealpha)This is a simple function that performs the same operations as the following:txt_params.text_bg_clr.red=redtxt_params.text_bg_clr.green=greentxt_params.text_bg_clr.blue=bluetxt_params.text_bg_clr.alpha=alphaThese are performed on each object in deepstream_test_4.py, causing the aggregate processing time to slow down the pipeline. Pushing this function into the C layer helps to increase performance.generate_ts_rfc3339(buffer,buffer_size)This function populates the input buffer with a timestamp generated according to RFC3339:%Y-%m-%dT%H:%M:%S.nnnZ\0Image Data Access#Decoded images are accessible asNumPyarrays via theget_nvds_buf_surfacefunction. This function is documented in the API Guide.
See thedeepstream-imagedata-multistreamsample application for an example of image data usage.previousC/C++ Sample Apps Source DetailsnextDeepStream Reference Application - deepstream-appOn this pageSample Application Source DetailsPython Bindings and Application DevelopmentPrerequisitesRunning Sample ApplicationsPipeline ConstructionMetaData AccessMemory ManagementAllocationsString AccessSetting String FieldsReading String FieldsCastingCallback Function RegistrationOptimizations and UtilitiesImage Data AccessPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.