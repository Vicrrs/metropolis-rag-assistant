MetaData in the DeepStream SDK — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewMetaData in...MetaData in the DeepStream SDK#Gst Buffer is the basic unit of data transfer in GStreamer. Each Gst Buffer has associated metadata. The DeepStream SDK attaches the DeepStream metadata object, NvDsBatchMeta, described in the following sections.
To read more about Gst Buffer, refer toGStreamer documentation.NvDsBatchMeta: Basic Metadata Structure#DeepStream uses an extensible standard structure for metadata. The basic metadata structureNvDsBatchMetastarts with batch level metadata, created inside the Gst-nvstreammux plugin. Subsidiary metadata structures hold frame, object, classifier, and label data. DeepStream also provides a mechanism for adding user-specific metadata at the batch, frame, or object level.
DeepStream attaches metadata to a Gst Buffer by attaching anNvDsBatchMetastructure and settingGstNvDsMetaType.meta_typetoNVDS_BATCH_GST_METAin the Gst-nvstreammux plugin. When your application processes the Gst Buffer, it can iterate over the attached metadata to find NVDS_BATCH_GST_META.
The functiongst_buffer_get_nvds_batch_meta()extractsNvDsBatchMetafrom the Gst Buffer. (See the declaration insources/include/gstnvdsmeta.h.) See thedeepstream-test1sample application for an example of this function’s usage. For more details, see the DeepStream SDK API reference documentation inDeepStream API Guides.User/Custom Metadata Addition inside NvDsBatchMeta#To attach user-specific metadata at the batch, frame, or object level withinNvDsBatchMeta, you must acquire an instance ofNvDsUserMetafrom the user meta pool by callingnvds_acquire_user_meta_from_pool(). (Seesources/includes/nvdsmeta.hfor details.) Then you must initializeNvDsUserMeta. The members you must set areuser_meta_data,meta_type,copy_func, andrelease_func.
For more details, see the sample application source code insources/apps/sample_apps/deepstream-user-metadata-test/deepstream_user_metadata_app.c.Adding Custom Meta in Gst Plugins Upstream from Gst-nvstreammux#The DeepStream SDK creates batch level metadata in the Gst-nvstreammux plugin. It holdsNvDsBatchMetametadata in a hierarchy of batches, frames within batches, and objects within frames.Adding metadata to the plugin before Gst-nvstreammux#This procedure introduces metadata to the DeepStream pipeline at a plugin before Gst-nvstreammux.Set the plugin’s following members of the plugin’s NvDsMeta structure:copy_funcfree_funcmeta_typegst_to_nvds_meta_transform_funcgst_to_nvds_meta_release_funcAttach the metadata by callinggst_buffer_add_nvds_meta()and set themeta_typein the NvDsMeta instance returned bygst_buffer_add_nvds_meta().The Gst-nvstreammux plugin transforms the input gst-meta created in step 2 from the Gst Buffer into anNvDsUserMetaobject associated with the corresponding NvDsFrameMeta object. It adds this object to theframe_user_datalist.Search theframe_user_meta_listin the NvDsFrameMeta object for themeta_typethat was set in step 2, and access the attached metadata.See the sample application source code insources/apps/sample_apps/deepstream-gst-metadata-test/deepstream_gst_metadata.cfor more details. If gst meta is not attached withgst_buffer_add_nvds_meta(), it is not transformed into DeepStream metadata. It is still available in the Gst Buffer.New metadata fields#TheNvDsObjectMetastructure from DeepStream 5.0 GA release has three bbox info and two confidence values:detector_bbox_info- Holds bounding box parameters of the object when detected by detector.tracker_bbox_info- Holds bounding box parameters of the object when processed by tracker.rect_params- Holds bounding box coordinates of the object processed by the last module that updates it in the pipeline. These bounding box coordinates are clipped so that they do not fall outside frame boundary.These bounding box parameters are used to overlay:confidence- Holds a confidence value for the object, set by the inference module.tracker_confidence- Holds a confidence value for the object set by NvDCF. Will be1.0in the case of the other trackers (e.g.,IOU,NvSORTandNvDeepSORT) that do not have visual tracking capability.As noted in the description above, the bbox coordinates from detector and tracker are stored separately in the newly introduceddetector_bbox_infoandtracker_bbox_info, respectively. The bbox inforect_paramscontinues to hold the bbox info as in previous DeepStream versions, for backward compatibility. Note thatrect_paramswill be deprecated in future release.
Preexistingconfidenceparameter holds the detector confidence value, while a newly introducedtracker_confidenceparameter will hold the tracker confidence value.previousGStreamer Plugin OverviewnextGst-nvdspreprocess (Alpha)On this pageNvDsBatchMeta: Basic Metadata StructureUser/Custom Metadata Addition inside NvDsBatchMetaAdding Custom Meta in Gst Plugins Upstream from Gst-nvstreammuxAdding metadata to the plugin before Gst-nvstreammuxNew metadata fieldsPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.