Docker Containers — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formDocker ContainersDocker Containers#DeepStream 7.1 provides Docker containers for dGPU on both x86 and ARM platforms (like SBSA, GH100, etc.,) and Jetson platforms. These containers provide a convenient, out-of-the-box way to deploy DeepStream applications by packaging all associated dependencies within the container. The associated Docker images are hosted on the NVIDIA container registry in the NGC web portal athttps://ngc.nvidia.com. They use thenvidia-dockerpackage, which enables access to the required GPU resources from containers. This section describes the features supported by the DeepStream Docker container for dGPU on both x86 and ARM and Jetson platforms.NoteThe DeepStream 7.1 containers for dGPU on x86 and ARM (SBSA) and Jetson are distinct, so you must get the right image for your platform.NoteWith DS 7.1, DeepStream docker containers do not package libraries necessary for certain multimedia operations like audio data parsing, CPU decode, and CPU encode.
This change could affect processing certain video streams/files like mp4 that include audio track.
Run the below script inside the docker images to install additional packages (e.g.gstreamer1.0-libav,gstreamer1.0-plugins-good,gstreamer1.0-plugins-bad,gstreamer1.0-plugins-uglyas required) that might be necessary to use all of the DeepStreamSDK features:/opt/nvidia/deepstream/deepstream/user_additional_install.shNoteThe scriptprepare_classification_test_video.shpresent at/opt/nvidia/deepstream/deepstream/samplesrequiresffmpegto be installed. Some of the low level codec libraries need to be re-installed along with ffmpeg.Use the following command to install/re-install  ffmpeg:apt-getinstall--reinstalllibflac8libmp3lame0libxvidcore4ffmpegPrerequisites#Installdocker-ceby following theofficial instructions.Once you have installeddocker-ce, follow thepost-installation stepsto ensure that the
docker can be run withoutsudo.Installnvidia-container-toolkitby following theinstall-guide.Get anNGCaccount and API key:Go to NGC and search theDeepStreamin theContainertab. This
message is displayed: “Sign in to access the PULL feature of this repository”.Enter your Email address and clickNext, or clickCreate an Account.Choose your organization when prompted forOrganization/Team.ClickSign In.Log in to the NGC docker registry (nvcr.io) using the commanddockerloginnvcr.ioand enter the following credentials:a.Username:"$oauthtoken"b.Password:"YOUR_NGC_API_KEY"whereYOUR_NGC_API_KEYcorresponds to the key you generated from step 3.Sample commands to run a docker container:# Pull the required docker.  Refer Docker Containers table to get docker container name.$dockerpull<requireddockercontainername># Step to run the docker$exportDISPLAY=:0$xhost+$dockerrun-it--rm--net=host--gpusall-eDISPLAY=$DISPLAY--device/dev/snd-v/tmp/.X11-unix/:/tmp/.X11-unix<requireddockercontainername>A Docker Container for dGPU#TheContainerspage in the NGC web portal gives instructions for pulling and running the container, along with a description of its contents. The dGPU container is calleddeepstreamand the Jetson container is calleddeepstream-l4t.
Unlike the container in DeepStream 3.0, the dGPU DeepStream 7.1 container supports DeepStream application development within the container. It contains the same build tools and development libraries as the DeepStream 7.1 SDK.
In a typical scenario, you build, execute and debug a DeepStream application within the DeepStream container. Once your application is ready, you can use the DeepStream 7.1 container as a base image to create your own Docker container holding your application files (binaries, libraries, models, configuration file, etc.,). Here is an example snippet ofDockerfilefor creating your own Docker container:FROMnvcr.io/nvidia/deepstream:7.1-<containertype>COPYmyapp/root/apps/myapp# To get video driver libraries at runtime (libnvidia-encode.so/libnvcuvid.so)ENVNVIDIA_DRIVER_CAPABILITIES$NVIDIA_DRIVER_CAPABILITIES,videoThisDockerfilecopies your application (from directorymydsapp) into the container (pathname/root/apps). Note that you must ensure the DeepStream 7.1 image location from NGC is accurate.Table below lists the docker containers for dGPU released with DeepStream 7.1:Docker Containers for dGPU#ContainerContainer pull commandsTriton devel docker (contains the entire SDK along with a development environment for building DeepStream applications and graph composer)dockerpullnvcr.io/nvidia/deepstream:7.1-gc-triton-develTriton Inference Server docker with Triton Inference Server and dependencies installed along with a development environment for building DeepStream applicationsdockerpullnvcr.io/nvidia/deepstream:7.1-triton-multiarchDeepStream samples docker (contains the runtime libraries, GStreamer plugins, reference applications and sample streams, models and configs)dockerpullnvcr.io/nvidia/deepstream:7.1-samples-multiarchSee theDeepStream 7.1 Release Notesfor information regardingnvcr.ioauthentication and more.NoteSee thedGPU containeron NGC for more details and instructions to run the dGPU containers.Suggested Setup for Video Subsystem on x86 dGPU docker#NoteThis does not affect dGPUs which utilize Nvidia Driver 560 series on RTX series.DeepStream 7.1 supports Cuda-12.6 in the compute stack and also in the docker container by default. Data Center GPUs are currently only supported by driver 535.183.06, which comes with Cuda-12.2 driver by default.Even though CUDA supports forward compatibility with newer runtime versions like Cuda-12.6, other components such as Cuda-GL Interop do not support forward compatibility and might not work as expected which are required for display sink to work.
Hence, for other components such as Cuda-GL Interop to work, Cuda-12.2 toolkit also must be installed along with the default Cuda-12.6 runtime inside the docker container.For users who need to use/enable display output, following steps are suggested inside the docker to implement this workaround:Start the docker as shown in the step above.Install cuda-toolkit-12-2. Please followthese instructionsPLEASENOTE: From the Cuda-12 installation instructions mentioned in link above, please replace :sudoapt-get-yinstallcudawithsudoapt-get-yinstallcuda-toolkit-12-2Change default CUDA version to point to Cuda-12.2 inside the docker using update alternatives:update-alternatives--setcuda/usr/local/cuda-12.2To check which version of CUDA is currently in use inside the docker, run :update-alternatives--displaycudaNoteSimilar limitation is also present for dGPU driver 550, which comes with Cuda-12.4 by default and Cuda-12.6 based docker containers which need to use/enable display.For users who need to use/enable display on systems using dGPU driver 550, please enable cuda-toolkit-12-4 in addition to Cuda-12.6 inside the container by following similar steps as above.Replace step no. 2 with cuda-toolkit-12-4 installation instructionsfound hereA Docker Container for Jetson#As of JetPack release 4.2.1,NVIDIA Container Runtimefor Jetson has been added, enabling you to run GPU-enabled containers on Jetson devices. Using this capability, DeepStream 7.1 can be run inside containers on Jetson devices using Docker images on NGC.
Pull the container and execute it according to the instructions on theNGC Containerspage.
The DeepStream container no longer expects CUDA, TensorRT to be installed on the Jetson device, because it is included within the container image.
Make sure that the BSP is installed using JetPack and nvidia-container tools installed from Jetpack or apt server (See instructions below) on your Jetson prior to launching the DeepStream container.
The Jetson Docker containers are for deployment only. They do not support DeepStream software development within a container. You can build applications natively on the Jetson target and create containers for them by adding binaries to your docker images. Alternatively, you can generate Jetson containers from your workstation using instructions in theBuilding Jetson Containers on an x86 Workstationsection in the NVIDIA Container Runtime for Jetson documentation.
The table below lists the docker containers for Jetson released with DeepStream 7.1:Docker Containers for Jetson#ContainerContainer pull commandsDeepStream samples docker
(contains the runtime libraries, GStreamer plugins, reference applications and sample streams, models and configs)dockerpullnvcr.io/nvidia/deepstream:7.1-samples-multiarchDeepStream Triton docker
(contains contents of the samples docker plus devel libraries and Triton Inference Server backends)dockerpullnvcr.io/nvidia/deepstream:7.1-triton-multiarchNoteFor the Jetson Triton Container an error message is printed “Failed to detect NVIDIA driver version” when running the docker. No impact on functionality is observed currently.See theDeepStream 7.1 Release Notesfor information regardingnvcr.ioauthentication and more.NoteSee theJetson containeron NGC for more details and instructions to run the Jetson containers.A Docker Container for dGPU on ARM (IGX/dGPU, GH100, GH200, SBSA)#TheContainerspage in the NGC web portal gives instructions for pulling and running the container, along with a description of its contents. The dGPU on ARM container is calleddeepstream:<version>-triton-arm-sbsaand the Jetson container is calleddeepstream-l4t.
Unlike the container in DeepStream 3.0, the dGPU DeepStream 7.1 container supports DeepStream application development within the container. It contains the same build tools and development libraries as the DeepStream 7.1 SDK.
In a typical scenario, you build, execute and debug a DeepStream application within the DeepStream container. Once your application is ready, you can use the DeepStream 7.1 container as a base image to create your own Docker container holding your application files (binaries, libraries, models, configuration file, etc.,). Here is an example snippet ofDockerfilefor creating your own Docker container:FROMnvcr.io/nvidia/deepstream:7.1-<containertype>COPYmyapp/root/apps/myapp# To get video driver libraries at runtime (libnvidia-encode.so/libnvcuvid.so)ENVNVIDIA_DRIVER_CAPABILITIES$NVIDIA_DRIVER_CAPABILITIES,videoThisDockerfilecopies your application (from directorymydsapp) into the container (pathname/root/apps). Note that you must ensure the DeepStream 7.1 image location from NGC is accurate.Table below lists the docker containers for dGPU on ARM released with DeepStream 7.1:Docker Containers for dGPU on ARM#ContainerContainer pull commandsTriton Inference Server docker with Triton Inference Server and dependencies installed along with a development environment for building DeepStream applicationsdockerpullnvcr.io/nvidia/deepstream:7.1-triton-arm-sbsaSee theDeepStream 7.1 Release Notesfor information regardingnvcr.ioauthentication and more.NoteSee thedGPU on ARM containeron NGC for more details and instructions to run the dGPU on ARM (SBSA) containers.Known Limitation with Video Subsystem and Workaround#With DS 7.1 arm sbsa docker, video display will not work by default on dGPU on ARM systems. Please see sectionKnown Limitation with Video Subsystem and Workaroundfor details and workaround.Creating custom DeepStream dockers for dGPU or Jetson using DeepStreamSDK package#NoteSee theDeepStream Dockerfile Guideon GitHub for more details.Recommended Minimal L4T Setup necessary to run the new docker images on Jetson#Users are encouraged to install the L4T BSP alone from Jetpack and later use command line to install NVIDIA Container runtime from Debian repo
to save space on the Jetson device.1. In Step 02 ofsdkmanagerJetpack setup, select “Jetson OS” and de-select “Jetson SDK Components” to flash just the BSP.
Refer to the screenshot below for reference.Instructions for installing nvidia-container from command line:FlashBSPfromJetpackandbootRun"sudo apt update"Run"sudo apt install docker.io"Run"sudo apt install nvidia-container"Run"sudo apt install nvidia-l4t-gstreamer"Run"sudo apt install nvidia-l4t-dla-compiler"Run"sudo service docker restart"previousQuickstart GuidenextC/C++ Sample Apps Source DetailsOn this pagePrerequisitesA Docker Container for dGPUSuggested Setup for Video Subsystem on x86 dGPU dockerA Docker Container for JetsonA Docker Container for dGPU on ARM (IGX/dGPU, GH100, GH200, SBSA)Known Limitation with Video Subsystem and WorkaroundCreating custom DeepStream dockers for dGPU or Jetson using DeepStreamSDK packageRecommended Minimal L4T Setup necessary to run the new docker images on JetsonPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.