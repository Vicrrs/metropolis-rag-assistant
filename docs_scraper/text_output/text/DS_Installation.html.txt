Installation — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formInstallationInstallation#NVIDIA®DeepStream Software Development Kit (SDK) is an accelerated AI framework to build intelligent video analytics (IVA) pipelines. DeepStream runs on NVIDIA®T4, NVIDIA® Hopper, NVIDIA®Ampere, NVIDIA®ADA and platforms such as NVIDIA®Jetson AGX Orin™, NVIDIA®Jetson Orin™ NX, NVIDIA®Jetson Orin™ Nano. For dGPU platforms Enterprise GPUs are highly recommended for deployments that are expected to run 24x7. Gaming GPUs are not designed to perform in such type of environments.Jetson Setup#This section explains how to prepare a Jetson device before installing the DeepStream SDK.NoteSteps to install DeepStream SDK locally, assume that~/.local/bin/has been added to the~/.bashrcor~/.profileInstall Jetson SDK components#Download NVIDIA SDK Manager fromhttps://developer.nvidia.com/embedded/jetpack. You will use this to install JetPack 6.1 GA (corresponding to L4T 36.4 release)NVIDIA SDK Manager is a graphical application which flashes and installs the JetPack packages.The flashing procedure takes approximately 10-30 minutes, depending on the host system.NoteIf you are using Jetson Orin nano developer kit, you can download the SD card image fromhttps://developer.nvidia.com/embedded/jetpack. This comes packaged with CUDA, TensorRT and cuDNN.Prerequisites#NoteSometimes while running gstreamer pipeline or sample apps,
user can encounter error :GLib(gthread-posix.c):UnexpectederrorfromClibraryduring'pthread_setspecific':Invalidargument.Aborting.The issue is caused because of a bug in glib 2.0-2.72 version which comes with ubuntu22.04 by default.
The issue is addressed in glib2.76 and its installation is required to fix the issue (GNOME/glib).Migrate glib to newer version#In order to migrate to newer glib version (e.g. 2.76.6) follow below steps:Prerequisites: Install below packages:pip3installmesonpip3installninjaNoteOn baremetal, usesudopip3installmesonandsudopip3installninjafor root permissionsCompilation and installation steps:$gitclonehttps://github.com/GNOME/glib.git$cdglib$gitcheckout<glib-version-branch># e.g. 2.76.6$mesonbuild--prefix=/usr$ninja-Cbuild/$cdbuild/$ninjainstallNoteOn baremetal, usesudoninjainstallto install with root permissionsCheck and confirm the newly installed glib version:pkg-config--modversionglib-2.0Install Dependencies#Install prerequisite packages#Enter the following commands to install the prerequisite packages:$sudoaptinstall\libssl3\libssl-dev\libgstreamer1.0-0\gstreamer1.0-tools\gstreamer1.0-plugins-good\gstreamer1.0-plugins-bad\gstreamer1.0-plugins-ugly\gstreamer1.0-libav\libgstreamer-plugins-base1.0-dev\libgstrtspserver-1.0-0\libjansson4\libyaml-cpp-devNoteSometimes with RTSP streams the application gets stuck on reaching EOS. This is because of an issue in rtpjitterbuffer component.
To fix this issue, a script “update_rtpmanager.sh” at/opt/nvidia/deepstream/deepstream/has been provided with
required details to update gstrtpmanager library. The script should be executed once above mentioned packages are
installed as prerequisite.Install librdkafka (to enable Kafka protocol adaptor for message broker)#Clone thelibrdkafkarepository from GitHub:$gitclonehttps://github.com/confluentinc/librdkafka.gitConfigure and build the library:$cdlibrdkafka$gitcheckouttags/v2.2.0$./configure--enable-ssl$make$sudomakeinstallCopy the generated libraries to thedeepstreamdirectory:$sudomkdir-p/opt/nvidia/deepstream/deepstream/lib$sudocp/usr/local/lib/librdkafka*/opt/nvidia/deepstream/deepstream/lib$sudoldconfigInstall latest NVIDIA BSP packages#Installation of JetPack 6.1 GA will ensure that  latest NVIDIA BSP packages are installed.Install the DeepStream SDK#Method 1: Using SDK ManagerSelectDeepStreamSDKfrom theAdditionalSDKssection along with JP 6.1 GA software components for installation.Method 2: Using the DeepStream tar package:https://catalog.ngc.nvidia.com/orgs/nvidia/resources/deepstreamDownload the DeepStream 7.1 Jetson tar packagedeepstream_sdk_v7.1.0_jetson.tbz2to the Jetson device.Enter the following commands to extract and install the DeepStream SDK:$sudotar-xvfdeepstream_sdk_v7.1.0_jetson.tbz2-C/$cd/opt/nvidia/deepstream/deepstream-7.1$sudo./install.sh$sudoldconfigMethod 3: Using the DeepStream Debian package:https://catalog.ngc.nvidia.com/orgs/nvidia/resources/deepstreamDownload the DeepStream 7.1 Jetson Debian packagedeepstream-7.1_7.1.0-1_arm64.debto the Jetson device. Enter the following command:$sudoapt-getinstall./deepstream-7.1_7.1.0-1_arm64.debMethod 4: Use Docker containersDeepStream docker containers are available on NGC. See theDocker Containerssection to learn about developing and deploying DeepStream using docker containers.NoteVerification: Once DeepStream SDK installation is successful, refer toExpected output (deepstream-app)for the expected output.dGPU Setup for Ubuntu#This section explains how to prepare anUbuntux86_64system with NVIDIA dGPU devices before installing the DeepStream SDK.NoteSteps to install DeepStream SDK locally, assume that~/.local/bin/has been added to the~/.bashrcor~/.profileNoteThis document uses the term dGPU (“discrete GPU”) to refer to NVIDIA GPU expansion card products such as NVIDIA Tesla®T4, NVIDIA® Hopper, NVIDIA®Ampere, NVIDIA®ADA, NVIDIA GeForce®RTX 2080, NVIDIA GeForce®RTX 3080, NVIDIA GeForce®RTX 4080 and GeForce®/NVIDIA RTX/QUADRO.
This version of DeepStream SDK runs on GPUs supported by NVIDIA driver 535.183.06 for Data Center GPUs and 560.35.03 for RTX GPUs and NVIDIA TensorRT™ 10.3.0.26 and later versions.Prerequisites#You must install the following components:Ubuntu 22.04GStreamer 1.20.3NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs)CUDA 12.6TensorRT 10.3.0.26Remove all previous DeepStream installations#Enter the following commands to remove all previous DeepStream 3.0 or prior installations:$sudorm-rf/usr/local/deepstream/usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstnv*/usr/bin/deepstream*/usr/lib/x86_64-linux-gnu/gstreamer-1.0/libnvdsgst*/usr/lib/x86_64-linux-gnu/gstreamer-1.0/deepstream*/opt/nvidia/deepstream/deepstream*$sudorm-rf/usr/lib/x86_64-linux-gnu/libv41/plugins/libcuvidv4l2_plugin.soTo remove DeepStream 4.0 or later installations:Open theuninstall.shfile in/opt/nvidia/deepstream/deepstream/Run the following script assudo./uninstall.shNoteSometimes while running gstreamer pipeline or sample apps,
user can encounter error :GLib(gthread-posix.c):UnexpectederrorfromClibraryduring'pthread_setspecific':Invalidargument.Aborting.The issue is caused because of a bug in glib 2.0-2.72 version which comes with ubuntu22.04 by default.
The issue is addressed in glib2.76 and its installation is required to fix the issue (GNOME/glib).Migrate glib to newer version#In order to migrate to newer glib version (e.g. 2.76.6) follow below steps:Prerequisites: Install below packages:pip3installmesonpip3installninjaNoteOn baremetal x86, usesudopip3installmesonandsudopip3installninjafor root permissionsCompilation and installation steps:$gitclonehttps://github.com/GNOME/glib.git$cdglib$gitcheckout<glib-version-branch># e.g. 2.76.6$mesonbuild--prefix=/usr$ninja-Cbuild/$cdbuild/$ninjainstallNoteOn baremetal x86, usesudoninjainstallto install with root permissionsCheck and confirm the newly installed glib version:pkg-config--modversionglib-2.0Install Dependencies#Install prerequisite packages#Enter the following commands to install the necessary packages before installing the DeepStream SDK:$sudoaptinstall\libssl3\libssl-dev\libgles2-mesa-dev\libgstreamer1.0-0\gstreamer1.0-tools\gstreamer1.0-plugins-good\gstreamer1.0-plugins-bad\gstreamer1.0-plugins-ugly\gstreamer1.0-libav\libgstreamer-plugins-base1.0-dev\libgstrtspserver-1.0-0\libjansson4\libyaml-cpp-dev\libjsoncpp-dev\protobuf-compiler\gcc\make\git\python3NoteSometimes with RTSP streams the application gets stuck on reaching EOS. This is because of an issue in rtpjitterbuffer component.
To fix this issue,a script “update_rtpmanager.sh” at/opt/nvidia/deepstream/deepstream/has been provided with
required details to update gstrtpmanager library. The script should be executed once above mentioned packages are
installed as prerequisite.Install CUDA Toolkit 12.6#Run the following commands (reference,https://developer.nvidia.com/cuda-downloads):$sudoapt-keyadv--fetch-keyshttps://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/3bf863cc.pub$sudoadd-apt-repository"deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/ /"$sudoapt-getupdate$sudoapt-getinstallcuda-toolkit-12-6NoteIf you observe following errors while CUDA installation, refer tohttps://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/.W: GPG error: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC
E: The repository 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64 InRelease' is no longer signed.Install NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs)#Download and install using NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs) from NVIDIA Unix drivers page at:https://www.nvidia.cn/Download/driverResults.aspx/222416/en-us/Run the following commands:ForDataCenterGPUs:$chmod755NVIDIA-Linux-x86_64-535.183.06.run$sudo./NVIDIA-Linux-x86_64-535.183.06.run--no-cc-version-checkForRTXGPUs:$chmod755NVIDIA-Linux-x86_64-560.35.03.run$sudo./NVIDIA-Linux-x86_64-560.35.03.run--no-cc-version-checkNoteEnsure gdm, lightdm or Xorg service is stopped while installing nvidia driverUse command :sudoservicegdmstopsudoservicelightdmstopsudopkill-9XorgInstall TensorRT 10.3.0.26#Run the following command to install TensorRT 10.3.0.26:version="10.3.0.26-1+cuda12.5"sudoapt-getinstalllibnvinfer-dev=${version}libnvinfer-dispatch-dev=${version}libnvinfer-dispatch10=${version}libnvinfer-headers-dev=${version}libnvinfer-headers-plugin-dev=${version}libnvinfer-lean-dev=${version}libnvinfer-lean10=${version}libnvinfer-plugin-dev=${version}libnvinfer-plugin10=${version}libnvinfer-vc-plugin-dev=${version}libnvinfer-vc-plugin10=${version}libnvinfer10=${version}libnvonnxparsers-dev=${version}libnvonnxparsers10=${version}tensorrt-dev=${version}NoteIt is assumed, “debhttps://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/” has been added, as mentioned in CUDA Toolkit 12.6 installation step.libnvparsers are deprecated since TRT 9.0.Install librdkafka (to enable Kafka protocol adaptor for message broker)#Clone thelibrdkafkarepository from GitHub:$gitclonehttps://github.com/confluentinc/librdkafka.gitConfigure and build the library:$cdlibrdkafka$gitcheckouttags/v2.2.0$./configure--enable-ssl$make$sudomakeinstallCopy the generated libraries to the deepstream directory:$sudomkdir-p/opt/nvidia/deepstream/deepstream/lib$sudocp/usr/local/lib/librdkafka*/opt/nvidia/deepstream/deepstream/lib$sudoldconfigInstall the DeepStream SDK#Method 1: Using the DeepStream Debian packageDownload the DeepStream 7.1 dGPU Debian packagedeepstream-7.1_7.1.0-1_amd64.deb:https://catalog.ngc.nvidia.com/orgs/nvidia/resources/deepstreamEnter the command:$sudoapt-getinstall./deepstream-7.1_7.1.0-1_amd64.debMethod 2: Download the DeepStream tar package:https://catalog.ngc.nvidia.com/orgs/nvidia/resources/deepstreamNavigate to the location of the downloaded DeepStream package to extract and install the DeepStream SDK:$sudotar-xvfdeepstream_sdk_v7.1.0_x86_64.tbz2-C/$cd/opt/nvidia/deepstream/deepstream-7.1/$sudo./install.sh$sudoldconfigMethod 3: Use Docker containersDeepStream docker containers are available on NGC. See theDocker Containerssection to learn about developing and deploying DeepStream using docker containers.NoteVerification: Once DeepStream SDK installation is successful, refer toExpected output (deepstream-app)for the expected output.IGX/dGPU on ARM Setup for Ubuntu (Alpha)#This section explains how to prepare aNVIDIA IGXsystem with NVIDIA dGPU devices before installing the DeepStream SDK.NoteThis document uses the term dGPU (“discrete GPU”) to refer to NVIDIA GPU expansion card products such as NVIDIA RTX A6000 and NVIDIA RTX 6000 Ada.
This version of DeepStream SDK has been validated with NVIDIA driver 535.183.01 and NVIDIA TensorRT™ 10.3.0.26.You must install the following components:Please refer IGX-Software Install Guide for installing Base-OS:IGX-Software GuideDockerNvidia Container ToolkitRun ARM SBSA docker on IGX/dGPU#Pull the DeepStream Triton Inference Server dockerdockerpullnvcr.io/nvidia/deepstream:7.1-triton-arm-sbsaStart the dockersudodockerrun-it--rm--runtime=nvidia--network=host-eNVIDIA_DRIVER_CAPABILITIES=compute,utility,video,graphics--gpusall--privileged-eDISPLAY=:0-v/tmp/.X11-unix:/tmp/.X11-unix-v/etc/X11:/etc/X11nvcr.io/nvidia/deepstream:7.1-triton-arm-sbsaKnown Limitation with Video Subsystem and Workaround#DeepStream 7.1 supports Cuda-12.6 in the compute stack and also in the docker container by default. Data Center GPUs are currently only supported by driver 535.183.06, which comes with Cuda-12.2 driver by default.Even though CUDA supports forward compatibility with newer runtime versions like Cuda-12.6, other components such as Cuda-GL Interop do not support forward compatibility which are required for display sink to work.
Hence, for other components such as Cuda-GL Interop to work, Cuda-12.2 toolkit also must be installed alongside Cuda-12.6 runtime inside the docker container.For users who need to use/enable display output, following steps can be utilized inside the docker to implement this workaround:Start the docker as shown in the step above.Install cuda-toolkit-12-2. Please followthese instructionsPLEASENOTE: From the Cuda-12 installation instructions mentioned in link above, please replace :sudoapt-get-yinstallcudawithsudoapt-get-yinstallcuda-toolkit-12-2Change default CUDA version to point to Cuda-12.2 inside the docker using update alternatives:update-alternatives--setcuda/usr/local/cuda-12.2To check which version of CUDA is currently in use inside the docker, run :update-alternatives--displaycudadGPU on ARM Setup for Ubuntu (Alpha)#This section explains how to prepare anUbuntuaarch64system with NVIDIA dGPU devices before installing the DeepStream SDK.NoteThis document uses the term dGPU (“discrete GPU”) to refer to NVIDIA GPU expansion card products such as NVIDIA Tesla T4, NVIDIA Hopper, NVIDIA Ampere, NVIDIA® ADA, NVIDIA GeForce GTX 1080, NVIDIA GeForce RTX 2080, NVIDIA GeForce RTX 3080, NVIDIA GeForce RTX 4080 and GeForce/NVIDIA RTX/QUADRO.
This version of DeepStream SDK runs on GPUs supported by NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs) and NVIDIA TensorRT™ 10.3.0.26.You must install the following components:NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs)DockerNvidia Container ToolkitPlease note: GH200 has been validated with Nvidia Driver 550 using Base-OSInstall NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs)#Download and install using NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs) from NVIDIA Unix drivers page at:https://www.nvidia.com/en-us/drivers/unix/linux-aarch64-archive/Run the following commands:ForDataCenterGPUs:$chmod755NVIDIA-Linux-aarch64-535.183.06.run$sudo./NVIDIA-Linux-aarch64-535.183.06.run--no-cc-version-checkForRTXGPUs:$chmod755NVIDIA-Linux-aarch64-560.35.03.run$sudo./NVIDIA-Linux-aarch64-560.35.03.run--no-cc-version-checkNoteEnsure gdm, lightdm or Xorg service is stopped while installing Nvidia driverUse command :sudoservicegdmstopsudoservicelightdmstopsudopkill-9XorgRun dGPU on ARM Docker (SBSA)#Pull the DeepStream Triton Inference Server dockerdockerpullnvcr.io/nvidia/deepstream:7.1-triton-arm-sbsaStart the dockersudodockerrun-it--rm--runtime=nvidia--network=host-eNVIDIA_DRIVER_CAPABILITIES=compute,utility,video,graphics--gpusall--privileged-eDISPLAY=:0-v/tmp/.X11-unix:/tmp/.X11-unix-v/etc/X11:/etc/X11nvcr.io/nvidia/deepstream:7.1-triton-arm-sbsaKnown Limitation with Video Subsystem and Workaround#DeepStream 7.1 supports Cuda-12.6 in the compute stack and also in the docker container by default. Data Center GPUs are currently only supported by driver 535.183.06, which comes with Cuda-12.2 driver by default.Even though CUDA supports forward compatibility with newer runtime versions like Cuda-12.6, other components such as Cuda-GL Interop do not support forward compatibility which are required for display sink to work.
Hence, for other components such as Cuda-GL Interop to work, Cuda-12.2 toolkit also must be installed along with the default Cuda-12.6 runtime inside the docker container.For users who need to use/enable display output, following steps can be utilized inside the docker to implement this workaround:Start the docker as shown in the step above.Install cuda-toolkit-12-2. Please followthese instructionsPLEASENOTE: From the Cuda-12 installation instructions mentioned in link above, please replace :sudoapt-get-yinstallcudawithsudoapt-get-yinstallcuda-toolkit-12-2Change default CUDA version to point to Cuda-12.2 inside the docker using update alternatives:update-alternatives--setcuda/usr/local/cuda-12.2To check which version of CUDA is currently in use inside the docker, run :update-alternatives--displaycudaNoteSimilar limitation is also present for dGPU driver 550, which comes with Cuda-12.4 by default and Cuda-12.6 based docker containers which need to use/enable display.For users who need to use/enable display on systems using dGPU driver 550, please enable cuda-toolkit-12-4 in addition to Cuda-12.6 inside the container by following similar steps as above.Replace step no. 2 with cuda-toolkit-12-4 installation instructionsfound heredGPU Setup for RedHat Enterprise Linux (RHEL)#DeepStream for RHEL is not supported in this release.Platform and OS Compatibility#The following table provides information about platform and operating system compatibility in the current and earlier versions of DeepStream.Jetson model Platform and OS Compatibility#DS releaseDS 6.1DS 6.1.1DS 6.2DS 6.3DS 6.4DS 7.0DS 7.1Jetson platformsAGX Xavier, Jetson NX, Jetson OrinAGX Xavier, Jetson NX, Jetson OrinXavier AGX , Xavier NX,  AGX Orin, Orin NXXavier AGX , Xavier NX,  AGX Orin, Orin NX, Orin nanoAGX Orin, Orin NX, Orin nanoAGX Orin, Orin NX, Orin nanoAGX Orin, Orin NX, Orin nanoOSL4T Ubuntu 20.04L4T Ubuntu 20.04L4T Ubuntu 20.04L4T Ubuntu 20.04L4T Ubuntu 22.04L4T Ubuntu 22.04L4T Ubuntu 22.04JetPack release5.0.1 DP5.0.2 GA Revision 15.1 GA5.1.2 GA6.0 DP6.0 GA6.1 GAL4T release34.1.135.135.2.135.436.236.336.4CUDA releaseCUDA 11.4CUDA 11.4CUDA 11.4CUDA 11.4CUDA 12.2CUDA 12.2CUDA 12.6cuDNN releasecuDNN 8.3.2.49cuDNN 8.4.1.50+cuDNN 8.6.0.166+cuDNN 8.6.0.166+cuDNN 8.9.4.25+cuDNN 8.9.4.25+cuDNN 9.3.0TensorRT releaseTRT 8.4.0.11TRT 8.4.1.5TRT 8.5.2.2TRT 8.5.2.2TRT 8.6.2.3TRT 8.6.2.3TRT 10.3.0.31OpenCV releaseOpenCV 4.2.0OpenCV 4.2.0OpenCV 4.2.0OpenCV 4.5.4OpenCV 4.8.0OpenCV 4.8.0OpenCV 4.8.0Vision­WorksNANANANANANANAGStreamerGStreamer 1.16.2GStreamer 1.16.2GStreamer 1.16.3GStreamer 1.16.3GStreamer 1.20.3GStreamer 1.20.3GStreamer 1.20.3Docker imagedeepstream-l4t:6.1deepstream-l4t:6.1.1deepstream-l4t:6.2deepstream-l4t:6.3deepstream:6.4deepstream:7.0deepstream:7.1dGPU model Platform and OS Compatibility#DS releaseDS 6.1DS 6.1.1DS 6.2DS 6.3DS 6.4DS 7.0DS 7.1GPU platformsT4, V100, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0)T4, V100, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0)T4, V100, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0), Hopper, ADAT4, V100, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0), Hopper, ADAT4, V100, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0), Hopper, ADAT4, V100, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0), Hopper, ADAT4, A2, A10, A30, A100, RTX Ampere (Ax000/RTX30x0), Hopper, ADAOSUbuntu 20.04Ubuntu 20.04Ubuntu 20.04Ubuntu 20.04Ubuntu 22.04Ubuntu 22.04Ubuntu 22.04GCCGCC 9.4.0GCC 9.4.0GCC 9.4.0GCC 9.4.0GCC 11.4.0GCC 11.4.0GCC 11.4.0CUDA releaseCUDA 11.6.1CUDA 11.7.1CUDA 11.8CUDA 12.1CUDA 12.2CUDA 12.2CUDA 12.6cuDNN releasecuDNN 8.4.0.27cuDNN 8.4.1.50+cuDNN 8.7.0.84-1+cuDNN 8.8.1.3-1+cuDNN 8.9.4.25-1+cuDNN 8.9.6.50-1+cuDNN 9.3.0TRT releaseTRT 8.2.5.1TRT 8.4.1.5TRT 8.5.2.2TRT 8.5.3.1TRT 8.6.1.6TRT 8.6.1.6TRT 10.3.0.26Display DriverR510.47.03R515.65.01R525.85.12R525.125.06R535.104.12R535.161.08R535.183.06(Data Center GPUs), R560.35.03(RTX GPUs)VideoSDK releaseSDK 9.1SDK 9.1SDK 9.1SDK 9.1SDK 9.1SDK 9.1SDK 9.1OFSDK release2.0.232.0.232.0.232.0.232.0.232.0.232.0.23GStreamer releaseGStreamer 1.16.2GStreamer 1.16.2GStreamer 1.16.3GStreamer 1.16.3GStreamer 1.20.3GStreamer 1.20.3GStreamer 1.20.3OpenCV releaseOpenCV 4.2.0OpenCV 4.2.0OpenCV 4.2.0OpenCV 4.2.0OpenCV 4.5.4OpenCV 4.5.4OpenCV 4.5.4Docker imagedeepstream:6.1deepstream:6.1.1deepstream:6.2deepstream:6.3deepstream:6.4deepstream:7.0deepstream:7.1NVAIE releaseNANANVAIE-3.xNVAIE-3.xNVAIE-4.xNANANoteBy default, OpenCV has been deprecated. However, OpenCV can be enabled in plugins such as nvinfer (nvdsinfer) and dsexample (gst-dsexample) by settingWITH_OPENCV=1in the Makefile of these components. Please refer component README for more instructions.NA: “Not Applicable”DeepStream 7.1 comes with Alpha support on ARM SBSA platform. This support is currently enabled by SBSA triton docker. SBSA category currently supports IGX/dGPU, GH100 and GH200.previousMigration GuidenextQuickstart GuideOn this pageJetson SetupInstall Jetson SDK componentsPrerequisitesMigrate glib to newer versionInstall DependenciesInstall prerequisite packagesInstall librdkafka (to enable Kafka protocol adaptor for message broker)Install latest NVIDIA BSP packagesInstall the DeepStream SDKdGPU Setup for UbuntuPrerequisitesRemove all previous DeepStream installationsMigrate glib to newer versionInstall DependenciesInstall prerequisite packagesInstall CUDA Toolkit 12.6Install NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs)Install TensorRT 10.3.0.26Install librdkafka (to enable Kafka protocol adaptor for message broker)Install the DeepStream SDKIGX/dGPU on ARM Setup for Ubuntu (Alpha)Run ARM SBSA docker on IGX/dGPUKnown Limitation with Video Subsystem and WorkarounddGPU on ARM Setup for Ubuntu (Alpha)Install NVIDIA driver 535.183.06 (for Data Center GPUs) and 560.35.03 (for RTX GPUs)Run dGPU on ARM Docker (SBSA)Known Limitation with Video Subsystem and WorkarounddGPU Setup for RedHat Enterprise Linux (RHEL)Platform and OS CompatibilityPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.