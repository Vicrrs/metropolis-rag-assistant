NvDsUdpExt — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsNvDsUdpExtNvDsUdpExt#NVIDIA DeepStream components to transfer data over the network using NVIDIA Rivermax SDK APIsUUID: 798c0dca-34b3-4f73-b794-ad5995186601Version: 1.6.0Author: NVIDIALicense: ProprietaryComponents#nvidia::deepstream::NvDsUdpSink#Send data over the network via UDP using NVIDIA Rivermax SDK APIs.
Refer tonvdsudpsink pluginComponent ID: 79b6bdc5-07fc-3aa9-95df-3b66a67c3d85Base Type: nvidia::deepstream::INvDsElementParameters#syncSync on the clockFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLmax-latenessMaximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64qosGenerate Quality-of-Service events upstreamFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLasyncGo asynchronously to PAUSEDFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLts-offsetTimestamp offset in nanosecondsFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64enable-last-sampleEnable the last-sample propertyFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLblocksizeSize in bytes to pull per buffer (0 = default)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64render-delayAdditional render delay of the sink in nanosecondsFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64throttle-timeThe time to keep between rendered buffers (0 = disabled)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64max-bitrateThe maximum bits per second to render (0 = disabled)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64processing-deadlineMaximum processing deadline in nanosecondsFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64local-iface-ipIP Address associated with network interface through which to receive the data.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGhostThe host/IP/Multicast group to send the packets toFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGportThe port to send the packets toFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64payload-sizeSize of payload in RTP / UDP packetFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64chunk-sizeNumber of memory chunks to allocateFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64packets-per-chunkNumber of packets per memory chunkFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64packets-per-lineNumber of packets per line, required for Rivermax media APIsFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64sdp-fileSDP file to parse the connection details. Set this property to use Rivermax media APIs for transmission. By default Rivermax Generic APIs are used.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_FILEauto-multicastAutomatically join/leave the multicast groups, FALSE means user has to do it himselfFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLloopUsed for setting the multicast loop parameter. TRUE = enable, FALSE = disableFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLclose-socketClose socket if passed as property on state changeFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLinHandle to anvidia::deepstream::NvDsStaticInputcomponent. Supported formats - ANYFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::deepstream::NvDsStaticInputnvidia::deepstream::NvDsUdpSrc#Receive data over the network via UDP using NVIDIA Rivermax SDK APIs.
Refer tonvdsudpsrc pluginComponent ID: a80d8bbc-dc5a-3daa-85c2-693ced731747Base Type: nvidia::deepstream::INvDsElementParameters#blocksizeSize in bytes to read per buffer (-1 = default)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64num-buffersNumber of buffers to output before sending EOS (-1 = unlimited)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64typefindRun typefind before negotiating (deprecated, non-functional)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLdo-timestampApply current stream time to buffersFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLportThe port to receive the packets from, 0=allocateFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64payload-sizeSize of payload in RTP / UDP packetFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64header-sizeSize of RTP headerFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64num-packetsNumber of packets for which memory to allocate.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64uriURI in the form of udp://multicast_group:portFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_STRINGlocal-iface-ipIP Address associated with network interface through which to receive the data.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGcapsThe caps of the source padFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_STRINGbuffer-sizeSize of the kernel receive buffer in bytes, 0=defaultFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64reuseEnable reuse of the port setting this property won’t have any effect. Port will always be reused. It is defined just to avoid warnings with rtspsrcFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLtimeoutPost a message after timeout nanoseconds (0 = disabled)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64addressAddress to receive packets forFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_STRINGmulticast-ifaceThe network interface on which to join the multicast group.This allows multiple interfaces seperated by comma. (“eth0,eth1”)Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_STRINGauto-multicastAutomatically join/leave multicast groupsFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLloopUsed for setting the multicast loop parameter. TRUE = enable, FALSE = disableFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLoutHandle to anvidia::deepstream::NvDsStaticOutputcomponent. Supported formats - ANYFlags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::deepstream::NvDsStaticOutputpreviousNvDsUcxExtnextNvDsVisualizationExtOn this pageComponentsnvidia::deepstream::NvDsUdpSinkParametersnvidia::deepstream::NvDsUdpSrcParametersPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.