Gst-nvdsudpsink — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvdsudpsinkGst-nvdsudpsink#The Gst-nvdsudpsink plugin is a sink type component which can be used to transmit the RTP packets over IP network. Internally, the plugin usesRivermaxSDK APIs for network communications. NVIDIA Rivermax®offers a unique IP-based solution for any media and data streaming use case. For more details see theRivermax Product Page.nvdsudpsinkcan operate in three different modes based on the input type and properties set to the component.RTP packets with Rivermax Generic APIThis is default mode. In this mode nvdsudpsink will receive RTP packets and transmit it to network using Rivermax generic APIs. nvdsudpsink doesn’t require any information about the content of RTP packets.RTP packets with Rivermax Media APIThis mode is for specific use case of SMPTE 2110-20, 30 streams. In this mode, nvdsudpsink supports SMPTE 2110-20 and SMPTE 2110-30 streams with traffic shaping. nvdsudpsink expects RTP packets having either uncompressed audio or video as payload and It will transmit those packets to network using Rivermax media APIs.Since Rivermax media APIs need to know the information about the data being transmitted for it to handle the traffic shaping, nvdsudpsink needs that information for Rivermax initialization in the form of SDP file.This mode can be enabled by settingsdp-fileproperty of the component. In this mode, for uncompressed video streams,packets-per-lineandpayload-sizeproperties along withsdp-filemust be set. Similarly, value ofmtuproperty of payloader component must be same aspayload-sizeofnvdsudpsink.For uncompressed audio streams in this mode,max-ptimeandptime-multipleproperties of payloader component must be set.Uncompressed data with Rivermax media APIIn this mode, nvdsudpsink expects uncompressed audio or video frames directly instead of RTP packets. The component will convert those frames to RTP packets and then transmit over network using Rivermax media API.This mode will be enabled if in addition to the requirements of mode #2 the incoming data is uncompressed video or audio frames instead of RTP packets.In this mode, ifrender-thread-coreproperty is set, a separate thread will be created to packetize the frame and transmit the packets. That thread will also be bound to the CPU core(s) provided as the value of the property.NoteIn this mode as uncompressed video input, only YUV 4:2:2 and RGB with 8 or 10 bit depth is supported.Payload size and packets per line for some of common formatsTo calculate the payload size and packets per line, use the following steps:Calculate line stride as follows:linestride=(width*pgroupsize)/pgroupcoverageDivide this stride into number of packets having equal bytes. This will be value of packet-per-line.Add 20 bytes to size of each packet calculated in step 2 for RTP + Payload header. This will be value for payload-size.NoteIt is assumed that there is only single Sample Row Data per RTP packet and line stride is equally divisible.Following are values for some of the common formats:YCbCr-4:2:21920x10808bit:payload-size:1300,packets-per-line:3YCbCr-4:2:21920x108010bit:payload-size:1220,packets-per-line:4YCbCr-4:2:01920x10808bit:payload-size:1460,packets-per-line:2YCbCr-4:2:01920x108010bit:payload-size:1220,packets-per-line:3RGB1920x10808bit:payload-size:1460,packets-per-line:4RGB1920x108010bit:payload-size:1220,packets-per-line:6Refer to theSMPTEST2110-20:2017for more information.System can also have Gstreamer provided OSS implementation of udp sink (udpsink) component. In that case system would have two implementations for udp sink -udpsinkandnvdsudpsink.nvdsudpsinkcomponent can only be used with NVIDIA ConnectX-5 and above cards after having installedRivermaxSDK and its license.Download and setup theRivermax1.40.x SDK here:https://developer.nvidia.com/networking/rivermax-getting-started.Follow the instruction on the SDK page to obtain development license for Rivermax.To selectnvdsudpsinkout of two installations, use eitherLOCAL_IFACE_IPenvironment variable orlocal-iface-ipproperty. Use the command below to export the environment variable:exportLOCAL_IFACE_IP=<IPofNIC>nvdsudpsinkcomponent also requiresCAP_NET_RAWcapability. Either run the application that usesnvdsudpsinkcomponent with superuser privilege or set theCAP_NET_RAWcapabilities using the following command.sudosetcapCAP_NET_RAW=ep<absolutepathofapplication>For example:sudosetcapCAP_NET_RAW=ep/opt/nvidia/deepstream/deepstream/bin/deepstream-appsudosetcapCAP_NET_RAW=ep/usr/bin/gst-launch-1.0Inputs and Outputs#InputsGstBufferList having RTP packets as buffer content.GstBuffer having uncompressed audio or video frame.Control parametersLOCAL_IFACE_IP ENV flag or local-iface-ip propertyhostportchunk-sizepackets-per-chunkpayload-sizesdp-filepackets-per-lineinternal-thread-coreptp-srcrender-thread-coreOutputNoneFeatures#The following table summarizes the features of the plugin.Gst-nvdsudpsink plugin features#FeatureDescriptionReleaseSupports Rivermax Generic and Media APIsBy default, it supports generic APIs, but media API can be enabled by setting sdp-file property.DS 6.1Supports any type of RTP packet (Compressed, Uncompressed, audio etc.) with Generic APIsNo restriction on content of RTP payload in case of Generic APIs.DS 6.1Supports RTCP packets,In addition to RTPRTCP packets can also be transmitted.DS 6.1Traffic shaping in case of Uncompressed streams (video and audio)By using Rivermax media APIs,packet pacing can be enabled for uncompressed video and audio streams.DS 6.1Supports SMPTE 2110-20Uncompressed SMPTE 2110-20 streams with packet pacing is supported through Rivermax media APIs.DS 6.1Supports SMPTE 2110-30Uncompressed SMPTE 2110-30 stream with packet pacing is supported through Rivermax media APIs.DS 6.1Supports RTP packetization of uncompressed videoUncompressed video as input can be converted to RTP packets as per SMPTE 2110-20 before sending to networkDS 6.2Supports RTP packetization of uncompressed audioUncompressed audio as input can be converted to RTP packets as per SMPTE 2110-30 before sending to networkDS 6.2Supports PTP clockIn addition to system clock, hardware clock from the PTP source (Network card) can be used to generate RTP packet timestampDS 6.2Supports render thread affinitySeparate thread to packetize and transmit the data. This thread can be bound to specific CPU core(s)DS 6.2Gst Properties#The following table describes the Gst-nvdsudpsink plugin’s Gst properties.Gst-nvdsudpsink plugin gst properties#PropertyMeaningType and RangeExample / NotesPlatformsportThe port number to send the RTP packets toInteger,
0 to 65535Port=5004dGPU
JetsonhostUnicast / Multicast address to send the packetsStringaddress=192.168.4.60dGPU
Jetsonchunk-sizeNumber of chunks to allocate in case of generic APIsInteger,
1 to 65535chunk-size=100dGPU
Jetsonpackets-per-chunkNumber of packets per chunkInteger,
1 to 65535packets-per-chunk=10dGPU
Jetsonpayload-sizeSize of payload in RTP packetInteger,
0 to 65535payload-size=1400dGPU
Jetsonpackets-per-lineNumber of packets per line in case of media APIsInteger,
1 to 65535packets-per-line=4dGPU
Jetsonsdp-filePath to SDP file, to enable the use of Rivermax media APIsStringsdp-file=”sdp_video.txt”dGPU
Jetsonlocal-iface-ipIP Address associated with network interface through which to transmit the dataStringlocal-iface-ip=”192.168.2.20”dGPU
Jetsoninternal-thread-coreCPU core to run Rivermax internal threadInteger,
-1 to 1023internal-thread-core=2dGPU
Jetsonptp-srcIP Address of PTP sourceStringptp-src=”192.168.2.20”dGPU Jetsonrender-thread-coreComma seperated list of CPU core(s) for rendering threadStringrender-thread-core=”2,3”dGPU JetsonExample pipelines#Pipeline to transmit 24 bit 2 channel 48k audio stream using Rivermax media API:gst-launch-1.0 audiotestsrc wave=8 ! 'audio/x-raw, format=(string)S24BE, rate=48000, channels=2, payload=(int)97' ! rtpL24pay ptime-multiple=1000000 max-ptime=1000000 seqnum-offset=0 pt=97 ! nvdsudpsink host=<ip address> port=<port number> local-iface-ip=<ip addr of NIC> sdp-file=<sdp file> internal-thread-core=4 -v --gst-debug=3Pipeline with separate payload component to transmit 10bit YUV 4:2:2 1080p30 video stream using Rivermax media API:gst-launch-1.0 videotestsrc ! 'video/x-raw, width=1920, height=1080, format=(string)UYVP, framerate=30/1' ! queue ! rtpvrawpay mtu=1220 ! nvdsudpsink host=<ip address> port=<port number> local-iface-ip=<ip addr of NIC> payload-size=1220 packets-per-line=4 sdp-file=<sdp file> -v --gst-debug=3Pipeline without additional payload component to transmit 10bit YUV 4:2:2 1080p60 video stream using Rivermax media API:gst-launch-1.0 videotestsrc ! 'video/x-raw, width=1920, height=1080, format=(string)UYVP, framerate=60/1' ! queue ! nvdsudpsink host=<ip address> port=<port number> local-iface-ip=<ip addr of NIC> payload-size=1220 packets-per-line=4 sdp-file=<sdp file> -v --gst-debug=3Pipeline that uses PTP hardware clock from NIC:gst-launch-1.0 videotestsrc ! 'video/x-raw, width=1920, height=1080, format=(string)UYVP, framerate=60/1' ! queue ! nvdsudpsink host=<ip address> port=<port number> local-iface-ip=<ip addr of NIC> payload-size=1220 packets-per-line=4 sdp-file=<sdp file> ptp-src=<ip addr of PTP source> -v --gst-debug=3Pipeline that uses separate render thread and bind it to CPU core(s):gst-launch-1.0 videotestsrc ! 'video/x-raw, width=1920, height=1080, format=(string)UYVP, framerate=60/1' ! queue ! nvdsudpsink host=<ip address> port=<port number> local-iface-ip=<ip addr of NIC> payload-size=1220 packets-per-line=4 sdp-file=<sdp file> ptp-src=<ip addr of PTP source> render-thread-core="list of core(s)" sync=0 -v --gst-debug=3previousGst-nvdsudpsrcnextGst-nvdspostprocess (Alpha)On this pageInputs and OutputsFeaturesGst PropertiesExample pipelinesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.