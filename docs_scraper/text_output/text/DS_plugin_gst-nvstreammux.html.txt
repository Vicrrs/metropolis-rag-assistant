Gst-nvstreammux — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvstreammuxGst-nvstreammux#The Gst-nvstreammux plugin forms a batch of frames from multiple input sources. When connecting a source to nvstreammux (the muxer), a new pad must be requested from the muxer usinggst_element_get_request_pad()and the pad templatesink_%u. For more information, seelink_element_to_streammux_sink_pad()in the DeepStream app source code.
The muxer forms a batched buffer of batch-size frames. (batch-size is specified using the gst object property.)
If the muxer’s output format and input format are the same, the muxer forwards the frames from that source as a part of the muxer’s output batched buffer. The frames are returned to the source when muxer gets back its output buffer. If the resolution is not the same, the muxer scales frames from the input into the batched buffer and then returns the input buffers to the upstream component.
The muxer pushes the batch downstream when the batch is filled, or the batch formation timeout batched-pushed-timeout is reached. The timeout starts running when the first buffer for a new batch is collected.
The muxer uses a round-robin algorithm to collect frames from the sources. It tries to collect an average of (batch-size/num-source) frames per batch from each source (if all sources are live and their frame rates are all the same). The number varies for each source, though, depending on the sources’ frame rates.
The muxer outputs a single resolution (i.e. all frames in the batch have the same resolution). This resolution can be specified using the width and height properties. The muxer scales all input frames to this resolution. The enable-padding property can be set to true to preserve the input aspect ratio while scaling by padding with black bands.
For DGPU platforms, the GPU to use for scaling and memory allocations can be specified with the gpu-id property.
For each source that needs scaling to the muxer’s output resolution, the muxer creates a buffer pool and allocates four buffers each of size:outputwidth*outputheight*fWherefis1.5forNV12format, or4.0forRGBA. The memory type is determined by thenvbuf-memory-typeproperty.
Set the live-source property to true to inform the muxer that the sources are live. In this case the muxer attaches the PTS of the last copied input buffer to the batched Gst Buffer’s PTS. If the property is set to false, the muxer calculates timestamps based on the frame rate of the source which first negotiates capabilities with the muxer.
The muxer attaches anNvDsBatchMetametadata structure to the output batched buffer. This meta contains information about the frames copied into the batch (e.g. source ID of the frame, original resolutions of the input frames, original buffer PTS of the input frames). The source connected to theSink_Npad will havepad_indexNinNvDsBatchMeta.
The muxer supports addition and deletion of sources at run time. When the muxer receives a buffer from a new source, it sends aGST_NVEVENT_PAD_ADDEDevent. When a muxer sink pad is removed, the muxer sends aGST_NVEVENT_PAD_DELETEDevent. Both events contain the source ID of the source being added or removed (seesources/includes/gst-nvevent.h). Downstream elements can reconfigure when they receive these events. Additionally, the muxer also sends aGST_NVEVENT_STREAM_EOSto indicate EOS from the source.
The muxer supports calculation of NTP timestamps for source frames. It supports two modes. In the system timestamp mode, the muxer attaches the current system time as NTP timestamp. In the RTCP timestamp mode, the muxer uses RTCP Sender Report to calculate NTP timestamp of the frame when the frame was generated at source. The NTP timestamp is set inntp_timestampfield ofNvDsFrameMeta. The mode can be toggled by setting theattach-sys-tsproperty. For more details, refer to section NTP Timestamp in DeepStream.Inputs and Outputs#InputsNV12/RGBA buffers from an arbitrary number of sourcesControl Parametersbatch-sizebatched-push-timeoutwidthheightenable-paddinggpu-id (dGPU only)live-sourcenvbuf-memory-typenum-surfaces-per-framebuffer-pool-sizeattach-sys-tsframe-durationOutputNV12/RGBA batched bufferGstNvBatchMeta (meta containing information about individual frames in the batched buffer)Features#The following table summarizes the features of the plugin.Gst-nvstreammux plugin features#FeatureDescriptionReleaseConfigurable batch size—DS 2.0Configurable batching timeout—DS 2.0Allows multiple input streams with different resolutions—DS 2.0Allows multiple input streams with different frame rates—DS 2.0Scales to user-determined resolution in muxer—DS 2.0Scales while maintaining aspect ratio with padding—DS 2.0Multi-GPU support—DS 2.0Input stream DRC support—DS 3.0User-configurable CUDA memory type (Pinned/Device/Unified) for output buffers—DS 3.0Custom message to inform application of EOS from individual sources—DS 3.0Supports adding and deleting run time sinkpads (input sources) and sending custom events to notify downstream components—DS 3.0Supports RGBA data handling at output—DS 3.0Gst Properties#The following table describes the Gst-nvstreammux plugin’s Gst properties.Gst-nvstreammux gst-properties#PropertyMeaningType and RangeExample Notesbatch-sizeMaximum number of frames in a batch.Integer,
0 to 4,294,967,295batch-size=30batched-push-timeoutTimeout in microseconds to wait after the first buffer is available to push the batch even if a complete batch is not formed.Signed integer,
-1 to 2,147,483,647batched-push-timeout= 40000
40 msecwidthIf non-zero, muxer scales input frames to this width.Integer,
0 to 4,294,967,295width=1280heightIf non-zero, muxer scales input frames to this height.Integer,
0 to 4,294,967,295height=720enable-paddingMaintains aspect ratio by padding with black borders when scaling input frames.Booleanenable-padding=1gpu-idID of the GPU on which to allocate device or unified memory to be used for copying or scaling buffers. (dGPU only.)Integer,
0 to 4,294,967,295gpu-id=1live-sourceIndicates to muxer that sources are live, e.g. live feeds like an RTSP or USB camera.Booleanlive-source=1nvbuf-memory-typeType of memory to be allocated.
For dGPU:0 (nvbuf-mem-default): Default memory, cuda-device1 (nvbuf-mem-cuda-pinned): Pinned/Host CUDA memory2 (nvbuf-mem-cuda-device) Device CUDA memory3 (nvbuf-mem-cuda-unified): Unified CUDA memoryFor Jetson:0 (nvbuf-mem-default): Default memory, surface array4 (nvbuf-mem-surface-array): Surface array memoryInteger, 0-4nvbuf-memory-type=1num-surfaces-per-frameMaximum number of surfaces per frameInteger, 1-4num-surfaces-per-frame=4buffer-pool-sizeNumber of buffers in output buffer poolInteger<=1024buffer-pool-size=4attach-sys-tsAttach system timestamp as ntp timestamp, otherwise ntp timestamp calculated from RTCP sender reportsbooleanattach-sys-ts=TRUEcompute-hwCompute engine to use for scaling.0 - Default1 - GPU2 - VIC (Jetson only)Integer, 0-2compute-hw=1interpolation-methodSet interpolation methodsInteger, refer to enum NvBufSurfTransform_Inter in nvbufsurftransform.h for valid valuesinterpolation-method=1sync-inputsBoolean property to sychronization of input frames using PTSBooleansync-inputs=1frame-durationDuration of input frames in milliseconds for use in NTP timestamp correction based on frame rate.
If set to 0, frame duration is inferred automatically from PTS values seen at RTP jitter buffer.
When there is change in frame duration between the RTP jitter buffer and the nvstreammux,
this property can be used to indicate the correct frame rate to the nvstreammux,
for e.g. when there is an audiobuffersplit GstElement before nvstreammux in the pipeline.
If set to -1 (GST_CLOCK_TIME_NONE), disables frame rate based NTP timestamp correction. (default)Unsigned Integer64, 0 to 18446744073709551615frame-duration=10drop-pipeline-eosBoolean property to control EOS propagation downstream from nvstreammux when all the sink pads are at EOS. (Experimental)Booleandrop-pipeline-eos=0(default) for dGPU/JetsonKnown Issues with Solutions and FAQ#1. gst-inspect is not updated properly when switching between legacy and new streammux#Delete gstreamer cache present by default in home directory (rm ~/.cache/gstreamer-1.0/registry.x86_64.bin) and rerun gst-inspect on the streammux pluginpreviousGst-nvtrackernextGst-nvstreammux NewOn this pageInputs and OutputsFeaturesGst PropertiesKnown Issues with Solutions and FAQ1. gst-inspect is not updated properly when switching between legacy and new streammuxPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.