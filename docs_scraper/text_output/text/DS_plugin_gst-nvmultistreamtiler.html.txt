Gst-nvmultistreamtiler — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvmultis...Gst-nvmultistreamtiler#The Gst-nvmultistreamtiler plugin composites a 2D tile from batched buffers. The plugin accepts batched NV12/RGBA data from upstream components. The plugin composites the tile based on stream IDs, obtained fromNvDsBatchMetaandNvDsFrameMetain row-major order (starting from source 0, left to right across the top row, then across the next row). Each source frame is scaled to the corresponding location in the tiled output buffer. The plugin can reconfigure if a new source is added and it exceeds the space allocated for tiles. It also maintains a cache of old frames to avoid display flicker if one source has a lower frame rate than other sources.Inputs and Outputs#InputsGst Buffer batched bufferNvDsBatchMeta with Gst Buffer batched (batch is one or more buffers)Formats supported: NV12/RGBAControl Parametersrowscolumnswidthheightgpu-id (dGPU only)compute-hw (Jetson only)show-sourcenvbuf-memory-typecustom-tile-configsquare-seq-gridOutputGst Buffer (single frame) with composited input framesTransformed metadata (NvDsBatchMeta)Formats supported: NV12/RGBAFeatures#The following table summarizes the features of the plugin.Gst-nvmultistreamtiler features#FeatureDescriptionReleaseComposites a 2D tile of input buffers—DS 2.0Scales bounding box with metadata coordinates according to scaling and position in tile—DS 2.0Multi-GPU support—DS 2.0Shows expanded preview for a single source—DS 2.0User configurable CUDA memory type (Pinned/Device/Unified) for output buffers—DS 3.0Reconfigures 2D tile for new sources added at runtime—DS 3.0Gst Properties#The following table describes the Gst-nvmultistreamtiler plugin’s Gst properties.Gst-nvmultistreamtiler gst properties#PropertyMeaningType and RangeExample NotesrowsNumber of rows in 2D tiled outputInteger,
1 to 4,294,967,295row=2columnsNumber of columns in 2D tiled outputInteger,
1 to 4,294,967,295columns=2widthWidth of 2D tiled output in pixelsInteger,
1 to 4,294,967,295width=1920heightHeight of 2D tiled output in pixelsInteger,
1 to 4,294,967,295height=1080show-sourceScale and show frames from a single source.
-1: composite and show all sources
For values ≥0, frames from that source are zoomed.Signed integer, −1 to 2,147,483,647show-source=2gpu-idID of the GPU on which device/unified memory is to be allocated, and in which buffers are copied or scaled. (dGPU only.)Integer,
1 to 4,294,967,295gpu-id=1nvbuf-memory-typeType of CUDA memory to be allocated.For dGPU:0 (nvbuf-mem-default): Default memory, cuda-device1 (nvbuf-mem-cuda-pinned): Pinned/Host CUDA memory2 (nvbuf-mem-cuda-device) Device CUDA memory3 (nvbuf-mem-cuda-unified): 
Unified CUDA memoryFor Jetson:0 (nvbuf-mem-default): Default memory, surface array4 (nvbuf-mem-surface-array): Surface array memoryInteger, 0-4nvbuf-memory-type=1custom-tile-configCustom tile position and resolution. Can be configured programmatically for all or none of the sources.Values of enum CustomTileConfigReserved for future use.
Default: null.compute-hwCompute Scaling HW to use. Applicable only for Jetson. dGPU systems uses GPU by default.0 (Default): Default, GPU for Tesla, VIC for Jetson1 (GPU): GPU2 (VIC): VICInteger: 0-2compute-hw=1square-seq-gridEnable automatic square tiling according to number of sources.
The tiles are placed sequentially on the grid with empty tiles at the endBooleansquare-seq-grid=1previousGst-nvstreamdemuxnextGst-nvdsosdOn this pageInputs and OutputsFeaturesGst PropertiesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.