Gst-nvvideo4linux2 — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvvideo4linux2Gst-nvvideo4linux2#DeepStream extends the open source V4L2 codec plugins (here calledGst-v4l2) to support hardware-accelerated codecs.Decoder#The OSS Gst-nvvideo4linux2 plugin leverages the hardware decoding engines on Jetson and DGPU platforms by interfacing with libv4l2 plugins on those platforms. It supports H.264, H.265, AV1, JPEG and MJPEG formats.
The plugin accepts an encoded bitstream and uses the NVDEC hardware engine to decode the bitstream. The decoded output can be NV12 or YUV444 format which depends on the encoded stream content.NoteWhen you use the v4l2 decoder for decoding JPEG images, you must use the open source jpegparse plugin before the decoder to parse encoded JPEG images.Inputs and Outputs#InputsAn encoded bitstream. Supported formats are H.264, H.265, AV1, JPEG and MJPEGH264 encoded bitstream in 8bit 4:2:0 format.H265 encoded bitstream in 8/10/12 bit 4:2:0 and 8/10/12 bit 4:4:4 format.AV1 encoded bitstream in 8bit 4:2:0 format.OutputH264 decoder outputs GstBuffer in 8bit semi-planar(NV12) 4:2:0 format.H265 decoder outputs GstBuffer in 8/10/12 bit semi-planar(NV12) 4:2:0 format, 8/10/12 bit planar(YUV444) 4:4:4 format.AV1 decoder outputs GstBuffer in 8bit semi-planar(NV12) 4:2:0 format.Features#The following table summarizes the features of the Gst-nvvideo4linux2 decoder plugin.Gst-nvvideo4linux2 plugin decoder features#FeatureDescriptionSupports H.264 decodeh264 encoded bitstream is decoded into 8bit NV12Supports H.265 decodeh265 encoded bitstream is decoded into 8/10/12 bit NV12 or 8/10/12 bit YUV444 depending on the stream contentSupports JPEG/MJPEG decode—User-configurable CUDA memory type (Pinned/Device/Unified) for output buffers—Note10/12bit YUV444 format support is applicable only for x86/dGPU platforms.Also, for 12bit NV12 format, the output caps shows I420_12LE. But the data is handled as semiplanar 12 bit data. This is a workaround since gstreamer v1.16 does not have the particular caps for 12 bit NV12. Downstream component should process it considering as 12bit NV12 only.Gst Properties#The following table summarizes the Gst properties of the Gst-nvvideo4linux2 decoder plugin.Gst-nvvideo4linux2 plugin decoder gst properties#PropertyMeaningType and RangeExample/NotesPlatformscapture-io-modeCapture I/O mode (matches src pad)(0): auto             - GST_V4L2_IO_AUTO(2): mmap          - GST_V4L2_IO_MMAPOn dGPU:Enum “GstNvV4l2IOMode”On Jetson:Enum “GstNvV4l2DecCaptureIOMode”Default: 0dGPU
Jetsoncapture-buffer-dynamic-allocationSet to enable capture buffer dynamic allocation(0): cap_buf_dyn_alloc_disabled - Capture buffer dynamic allocation disabled(1): fw_cap_buf_dyn_alloc_enabled - Capture buffer dynamic allocation enabled for forward playback(2): rw_cap_buf_dyn_alloc_enabled - Capture buffer dynamic allocation enabled for reverse playback(3): fw_rw_cap_buf_dyn_alloc_enabled - Capture buffer dynamic allocation enabled for forward and reverse playbackEnum “CaptureBufferDynamicAllocationModes”Default: 0Jetsoncudadec-memtypeMemory type for CUDA decoder buffers.(0): memtype_device   - Memory type Device(1): memtype_pinned   - Memory type Host Pinned(2): memtype_unified  - Memory type UnifiedEnum “CudaDecMemType”Default: 2dGPUdisable-dpbSet to disable DPB buffer for low latencyBooleanDefault: falseJetsondrop-frame-intervalInterval to drop the frames, e.g. a value of 5 means the decoder outputs every fifth frame, and others are dropped.Integer,
1 to 30Default: 0dGPU
Jetsonextract-sei-type5-dataSet to extract and attach SEI type5 unregistered data on output bufferBooleanDefault: falsedGPUenable-error-checkSet to enable error checkBooleanDefault: falseJetsonenable-frame-type-reportingSet to enable frame type reportingBooleanDefault: falseJetsonenable-full-frameWhether or not the data is full framedBooleanDefault: falseJetsonenable-max-performanceSet to enable max performanceBooleanDefault: falseJetsongpu-idDevice ID of GPU to use for decoding.IntegerDefault:0dGPUlow-latency-modeSet low latency mode for bitstreams having I and IPPP frames with no B framesBooleanDefault: falsedGPUmjpegSet to open MJPEG blockBooleanDefault: falseJetsonnum-extra-surfacesNumber of surfaces in addition to min decode surfaces given by the V4L2 driver.Integer, 1 to 24Default: 0dGPU
Jetsonoutput-io-modeOutput side I/O mode (matches sink pad)On dGPU:(0): auto             - GST_V4L2_IO_AUTO(2): mmap         - GST_V4L2_IO_MMAP(5): dmabuf-import    - GST_V4L2_IO_DMABUF_IMPORTOn Jetson:(0): auto             - GST_V4L2_IO_AUTO(2): mmap          - GST_V4L2_IO_MMAP(3): userptr        - GST_V4L2_IO_USERPTROn dGPU:Enum “GstNvV4l2IOMode”On Jetson:Enum “GstNvV4l2DecOutputIOMode”Default: 0, “auto”dGPU
Jetsonsei-uuidSet 16 bytes UUID string for SEI Parsing, extract-sei-type5-data should be TRUEStringDefault: nulldGPUskip-framesType of frames to skip during decoding.0 (decode_all): decode all frames1 (decode_non_ref): skips non-ref frames (Applicable only on Jetson platform)2 (decode_key): decode key framesEnum “SkipFrame”Default: 0dGPU
JetsonEncoder#The OSS Gst-nvvideo4linux2 plugin leverages the hardware accelerated encoding engine available on Jetson and dGPU platforms by interfacing with libv4l2 plugins on those platforms.
The plugin accepts RAW data in I420/NV12 or YUV444 format. It uses the NVENC hardware engine to encode RAW input. Encoded output is in elementary bitstream supported format.
To set appropriate tuning-info-id and preset-id properties please refer to Nvidia Video Codec SDK Documentation athttps://docs.nvidia.com/video-technologies/video-codec-sdk/11.1/nvenc-preset-migration-guide/index.htmlInputs and Outputs#InputsRAW input in I420/NV12 or YUV444 format8 bit I420/NV12 and YUV444 raw formats8/10 bit I420/NV12 and YUV444 raw formatsOutputGst Buffer with encoded output in H264, H265 and AV1 format.Features#The following table summarizes the features of the Gst-nvvideo4linux2 encoder plugin.Gst-nvvideo4linux2 plugin encoder features#FeatureDescriptionSupports H.264 encode8 bit I420/NV12, 8bit YUV444 raw format can be encoded into h264 bitstreamSupports H.265 encode8/10 bit I420/NV12, 8/10 bit YUV444 raw format can be encoded into h265 bitstreamNote8/10bit YUV444 format support is applicable only for x86/dGPU platforms.Gst Properties#The following table summarizes the Gst properties of the Gst-nvvideo4linux2 encoder plugin.Gst-nvvideo4linux2 plugin encoder gst properties#PropertyMeaningType and RangeExample/NotesPlatformsaqEnable spatial AQ and set its stengthUnsigned Integer, 0-15Default: 0, “auto”dGPUbit-packetizationWhether or not Packet size is based upon Number Of bitsBooleanDefault: falseJetsonbitrateSets bitrate for encoding, in bits/seconds.Unsigned IntegerDefault: 4000000dGPU
Jetsoncapture-io-modeCapture I/O mode (matches src pad)(0): auto - GST_V4L2_IO_AUTO(2): mmap - GST_V4L2_IO_MMAP(5): dmabuf-import  - GST_V4L2_IO_DMABUF_IMPORTEnum “GstNvV4l2IOMode”Default: 0, “auto”dGPU
JetsonconstqpSets constant QP values for I:P:B framesString, 1 to 51Default: nulldGPUcopy-metaCopies input metadata on output bufferBooleanDefault: falsedGPUcopy-timestampEnabling the flag allows to copy the timestamps from input to the capture stream.BooleanDefault: falseJetsoncontrol-rateSets rate control mode for v4l2 encoding(0): variable_bitrate - GST_V4L2_VIDENC_VARIABLE_BITRATE(1): constant_bitrate - GST_V4L2_VIDENC_CONSTANT_BITRATE(2): constantQP       - GST_V4L2_VIDENC_CONSTANT_QPEnum “GstV4l2VideoEncRateControlType”Default: 1, “constant_bitrate”dGPU
JetsoncqSets targetQuality (Constant Quality) level for VBR modeInteger, 0-51Default: 0, “auto”dGPUdisable-cabacSet Entropy Coding Type CAVLC(TRUE) or CABAC(FALSE)BooleanDefault: falseJetsonenable-losslessEnable lossless encoding for YUV444BooleanDefault: falseJetsonEnableMVBufferMetaEnable Motion Vector Meta data for encodingBooleanDefault: falseJetsonEnableTwopassCBREnable two pass CBR while encodingBooleanDefault: falseJetsonextended-colorformatSets extended colorformat pixel values 0 to 255 in VUI InfoBooleanDefault: falsedGPUforce-idrForce an IDR frameBooleanDefault: falsedGPUforce-intraForces an INTRA frameBooleanDefault: falsedGPUgpu-idDevice ID of GPU to used.Unsigned IntegerDefault:0dGPUidrintervalSets IDR Frame occurence frequency in encoded streamUnsigned IntegerDefault: 256dGPU
JetsoniframeintervalSets encoding intra-frame occurrence frequency.Unsigned IntegerDefault: 30dGPU
JetsoninitqpSet values of initQP in I:P:B order.
This provides rough hint to encoder to influence the qp difference between I, P and BStringDefault: nulldGPUinsert-audInsert H.264 Access Unit Delimiter(AUD)BooleanDefault: falseJetsoninsert-sps-ppsInsert H.264 SPS, PPS at every IDR frameBooleanDefault: falseJetsoninsert-vuiInsert H.264 VUI(Video Usability Information) in SPSBooleanDefault: falseJetsonintra-refreshIntra Refresh Parameters. Use string with unsigned integer values of Intra Refresh in enableIntraRefresh,intraRefreshPeriod,intraRefreshCnt in same order to set the property. e.g. 1,30,5StringDefault: nulldGPUmaxbitrateSet maxbitrate for v4l2 encoder. This mode is specified by setting rateControlMode to VBRUnsigned IntegerDefault: 0dGPUmaxperf-enableEnable or Disable Max Performance modeBooleanDefault: falseJetsonMeasureEncoderLatencyEnable Measure Encoder latency Per FrameBooleanDefault: falseJetsonnum-B-FramesNumber of B Frames between two reference frames (not recommended)Unsigned Integer, 0-2Default: 0Jetsonnum-Ref-FramesNumber of Reference Frames for encoderUnsigned Integer, 0-8Default: 1Jetsonoutput-io-modeSets output side I/O mode (matches sink pad)(0): auto - GST_V4L2_IO_AUTO(2): mmap - GST_V4L2_IO_MMAP(5): dmabuf-import - GST_V4L2_IO_DMABUF_IMPORTEnum “GstNvV4l2IOMode”Default: 0, “auto”dGPU
Jetsonpeak-bitratePeak bitrate in variable control-rate. The value must be >= bitrate (1.2*bitrate) is set by default (Default: 0)Unsigned IntegerDefault: 0Jetsonpoc-typeSet Picture Order Count type valueUnsigned Integer, 0-2Default: 1Jetsonpreset-idSets CUVID Preset ID for EncoderUnsigned Integer,
1 to 7Default: 1dGPUpreset-levelHW preset level for encoder.(0): DisablePreset    - Disable HW-Preset(1): UltraFastPreset  - UltraFastPreset for high perf(2): FastPreset       - FastPreset(3): MediumPreset     - MediumPreset(4): SlowPreset       - SlowPresetEnum “GstV4L2VideoEncHwPreset”Default: 1, “UltraFastPreset”JetsonProfileH.264/H.265 encoder profile.For H.264:(0): Baseline         - GST_V4L2_H264_VIDENC_BASELINE_PROFILE(2): Main             - GST_V4L2_H264_VIDENC_MAIN_PROFILE(4): High             - GST_V4L2_H264_VIDENC_HIGH_PROFILE(7): High444          - GST_V4L2_H264_VIDENC_HIGH_444_PREDICTIVEFor H.265:(0): Main             - GST_V4L2_H265_VIDENC_MAIN_PROFILE(1): Main10           - GST_V4L2_H265_VIDENC_MAIN10_PROFILE(3): FREXT            - GST_V4L2_H265_VIDENC_FREXT_PROFILEEnum “GstV4l2VideoEncProfileType”For H.264:Default: 0 (Baseline)For H.265:Default: 0 (Main)dGPU
JetsonPropertyMeaningType and RangeExample/NotesPlatformsqp-rangeSets quantization paramenter range for P, I and B frameString, 1 to 51Default: nulldGPU
Jetsonquant-b-framesQuantization parameter for B-frames (0xffffffff=component default), use with ratecontrol-enable = 0 and preset-level = 0Unsigned Integer, 0 - 4294967295Default: 4294967295Jetsonquant-i-framesQuantization parameter for I-frames (0xffffffff=component default), use with ratecontrol-enable = 0Unsigned Integer, 0 - 4294967295Default: 4294967295Jetsonquant-p-framesQuantization parameter for P-frames (0xffffffff=component default), use with ratecontrol-enable = 0 and preset-level = 0Unsigned Integer, 0 - 4294967295Default: 4294967295Jetsonratecontrol-enableEnable or Disable rate control modeBooleanDefault: trueJetsonslice-header-spacingSlice Header Spacing number of macroblocks/bits in one packetUnsigned Integer64Default: 0JetsonSliceIntraRefreshIntervalSet SliceIntraRefreshIntervalUnsigned IntegerDefault: 0JetsontemporalaqSet this to enable adaptive quantization (Temporal).BooleanDefault: falsedGPUtuning-info-idSets Tuning Info Preset for encoder.(1): HighQualityPreset - Tuning Preset for High Quality(2): LowLatencyPreset - Tuning Preset for Low Latency(3): UltraLowLatencyPreset - Tuning Preset for Low Latency(4): LosslessPreset   - Tuning Preset for LosslessEnum “GstV4L2VideoEncTuingInfoPreset”Default: 2 (LowLatencyPreset)dGPUvbvbufsizeSet VBV buffer size in bits.Unsigned IntegerDefault: 0 (default value by encoder)dGPUvbvinitSet VBV initial delay in bitsUnsigned IntegerDefault: 0 (default value by encoder)dGPUvbv-sizevirtual buffer sizeUnsigned IntegerDefault: 4000000JetsonpreviousGst-nvsegvisualnextGst-nvjpegdecOn this pageDecoderInputs and OutputsFeaturesGst PropertiesEncoderInputs and OutputsFeaturesGst PropertiesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.