Gst-nvdsanalytics — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvdsanalyticsGst-nvdsanalytics#This plugin performs analytics on metadata attached bynvinfer(primary detector) andnvtracker. Analytics refer to Region of Interest (ROI) Filtering, Overcrowding Detection, Direction Detection and Line Crossing. The plugin operates in batch mode, it handles the context for each stream independently. ROI based analytics work on primary detector output, but Direction Detection and Line Crossing requires a tracker-id as previous history/state is required to do both the analytics. The configuration for the rules for analytics is achieved using a configuration file. For all the analytics calculations bottom center coordinate of bounding box of an object is being used. If bounding box is defined as (x_left, y_top, width, height) then the bottom center coordinate would be (x_left + width/2, y_top + height)Thegst-nvdsanalyticsplugin extracts the metadata from the batched buffer sent by the upstream (nvtracker/nvinfer) element and passes it to the low-levelnvdsanalyticslibrary. The low-level library performs analytics based on the configured rules for each feature for each of the streams, the library returns the analytics output, which is for each tracked object as well for the complete frame.
The analytics output (Frame level) is encapsulated in theNvDsAnalyticsFrameMetastructure and is added as user meta with meta_type set toNVDS_USER_FRAME_META_NVDSANALYTICS.The user meta is added to theframe_user_meta_listmember ofNvDsFrameMeta.
The analytics output (per detected Object) is encapsulated in theNvDsAnalyticsObjInfostructure and is added as user meta with meta_type set toNVDS_USER_OBJ_META_NVDSANALYTICS. The user meta is added to theobj_user_meta_listmember ofNvDsObjectMeta.The definition ofNvDsAnalyticsObjInfoNvDsAnalyticsFrameMetais available insources/includes/nvds_analytics_meta.hheader file.
For guidance on how to access user metadata, see theUser/Custom Metadataaddition in theNvDsBatchMetaandTensor Metadata.Inputs and Outputs#InputsGStreamer buffer containing NV12/RGBA frame(s) with attached metadataControl Parametersenable: True Enables the plugin, False sets it in pass-through modeconfig-file: Configuration file which consist of the analytics rulesOutputOriginal NV12/RGBA batched bufferNvDsAnalyticsFrameMeta(meta containing information about individual frames in the batched buffer)NvDsAnalyticsObjInfo(meta containing information about individual objects in the individual frames of batched buffer)Features#The following table summarizes the features of the plugin.Gst-nvdsanalytics plugin features#FeatureDescriptionReleaseROI FilteringThis feature detects presence of objects in the ROI, the result is attached as metadata for every object, as well as total count of objects in ROI per frame.DS 5.0Overcrowding DetectionThis feature detects presence of objects in the ROI, the result is attached as metadata for every object, as well as total count of objects in ROI per frame along with overcrowding status, i.e. no of objects in ROI exceed a pre-configured threshold.DS 5.0Direction DetectionChecks using history of position of object and the current frame information if it is following a preconfigured direction. The result is attached as metadata for every object.DS 5.0Line CrossingThis feature checks if object is following a preconfigured direction for the virtual line and if it has crossed the virtual line. The result is attached to object when Line crossing also frame meta where cumulative count along with per frame count of line crossing is attached.DS 5.0Gst Properties#The following table describes the Gst properties of the Gst-nvdsanalytics plugin.Gst-nvdsanalytics plugin gst properties#PropertyMeaningType and RangeExample Notesunique-idUnique identification unsigned integer value for element to identify the output attached by the elementInteger,
0 to 4,294,967,295unique-id=17enableTrue Enables the plugin, False sets it in pass-through modeBooleanenable=1config-fileConfiguration file which consist of the analytics rulesStringconfig-file=config_nvdsanalytics.txtConfiguration File Parameters#The configuration file is located atsources/apps/sample_apps/deepstream-nvdsanalytics-test/config_nvdsanalytics.txt.The Gst-nvdsanalytics configuration file uses a “Key File” format described in:https://specifications.freedesktop.org/desktop-entry-spec/latestThe[property]group configures the general behavior of the plugin. It is the only mandatory group.The[roi-filtering-stream-<n>]group configures ROI filtering rules parameters for stream specified by<n>. For example,classes.[roi-filtering-stream-0]configures ROI filtering rules for stream ID0.The[overcrowding-<n>]group configures Overcrowding parameters for a stream specified by` <n>`.The[direction-detection-<n>]group configures Direction Detection parameters for a stream specified by<n>.The[line-crossing-<n>]group configures Line Crossing parameters for a stream specified by<n>.The following table respectively describe the keys supported for[property]groups and[<feature>-stream-<n>]groups.Gst-nvdsanalytics plugin config properties#PropertyApplicable GroupsMeaningType and RangeExample Notesenable[property] | [<feature>-stream-<n>]Common property to enable or disable the plugin or featureBooleanenable=1config-width[property]Width for which the analytics rules are configuredInteger, >0config-width=1280config-height[property]Height for which the analytics rules are configuredInteger, >0config-height=720osd-mode[property]0: Disables display of any lines, ROIS and text
1: Display only lines, rois and static text i.e. labels
2: Display all info from 1 in addition, information for all the eventsInteger0,1,2osd-mode=2display-font-size[property]Set OSD font size for the analytics dataInteger > 0display-font-size=12roi-<label>[roi-filtering-stream-<n>] | 
[overcrowding-stream-<n>]The ROI can be specified using roi key followed by its corresponding label (roi-<label>) the value consist of semi-colon delimited coordinates of the polygon (roi-<label>=x1;y1;x2;y2;x3;y3;x4;y4;x5;y5) . The user can specify a simple polygon with > 3 points. The points should be sequentially specified, as the relative position of points is required to check object in polygon.Stringroi-RF= 295;643;579;634;642;913;56;828
roi-OC= 295;643;579;634;642;913;56;828inverse-roi[roi-filtering-stream-<n>]If the flag set true, it indicates the object outside the configured ROI be attached with the ROI label, and count the objects outside the ROI and send as frame level outputBooleaninverse-roi=0class-id[<feature>-stream-<n>]The class ID separated by semi-colon for which analytic rules should be applied. | -1 indicate that the rules are to be applied to all the classesStringclass-id=0;1;2
or 
class-id=-1object-threshold[overcrowding-stream-<n>]The total count after which overcrowding flag should be indicated in the frame metadata.Integer, >=0object-threshold=10direction-<label>[direction-detection-stream-<n>]The value indicates the direction (x1;y1;x2;y2)  which corresponds to the configured <label>. When object is moving in configured direction, the label of the particular rule is attached to the object as user metadataStringdirection-South=284;840;360;662line-crossing-<label>[line-crossing-stream-<n>]The value indicates 2 coordinates of direction followed by 2 coordinates of virtual line. These coordinates are delimited using semi-colon (line-crossing-<label>=x1d;y1d;x2d;y2d;x1c;y1c;x2c;y2c). The direction indicates the direction of object in which it should be moving that can be considered for counting, so the object should be in direction x1d,y1d to x2d,y2d, which indicates a direction vector. The line crossing coordinates x1c,y1c and x2c,y2c indicate a virtual line which when an object following a configured direction crosses is then accounted for line crossing. <label> is string identification of the rule. Multiple line-crossings can be defined for a single streamStringline-crossing-Exit=789;672;1084;900;851;773;1203;732extended[line-crossing-stream-<n>]Boolean parameter to check crossings only on the configured line or for the extended line covering the video frame. If extended is 0, the line crossing only the configured line would be countedBooleanextended=0mode[line-crossing-stream-<n>]Parameter to allow user configuration of adherence of object direction with configured direction for crossing.
Possible options 
strict, balanced, loose. Operate as per name suggestion, where loose will just check if the object has crossed the line and would need the object just to be in same direction with very high toleranceStringmode=loosemode=strictmode=balancedNoteThe config-width, config-height, indicate the resolution at which analytics rules have been configured. If the runtime stream resolution is different than the configuration resolution. The plugin handles the resolution change and scales the rules for the runtime resolution. The configuration rules are not present in absolute pixel values.The following pipelines demonstrate plugin’s usage.For dGPU:gst-launch-1.0filesrclocation=streams/sample_1080p_h264.mp4!qtdemux!h264parse!nvv4l2decoder!m.sink_0nvstreammuxname=mwidth=1920height=1080batch-size=1live-source=1!nvinferconfig-file-path=sources/apps/sample_apps/deepstream-nvdsanalytics-test/nvdsanalytics_pgie_config.txt!nvtrackerll-lib-file=/opt/nvidia/deepstream/deepstream/lib/libnvds_nvdcf.soll-config-file=tracker_config.ymltracker-width=640tracker-height=384!nvdsanalyticsconfig-file=sources/apps/sample_apps/deepstream-nvdsanalytics-test/config_nvdsanalytics.txt!nvmultistreamtiler!nvvideoconvert!nvdsosd!nveglglessinkFor Jetson:gst-launch-1.0filesrclocation=streams/sample_1080p_h264.mp4!qtdemux!h264parse!nvv4l2decoder!m.sink_0nvstreammuxname=mwidth=1920height=1080batch-size=1live-source=1!nvinferconfig-file-path=sources/apps/sample_apps/deepstream-nvdsanalytics-test/nvdsanalytics_pgie_config.txt!nvtrackerll-lib-file=/opt/nvidia/deepstream/deepstream/lib/libnvds_nvdcf.soll-config-file=tracker_config.ymltracker-width=640tracker-height=384!nvdsanalyticsconfig-file=sources/apps/sample_apps/deepstream-nvdsanalytics-test/config_nvdsanalytics.txt!nvmultistreamtiler!nvvideoconvert!nvdsosd!nv3dsinkpreviousGst-nvmsgbrokernextGst-nvdsudpsrcOn this pageInputs and OutputsFeaturesGst PropertiesConfiguration File ParametersPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.