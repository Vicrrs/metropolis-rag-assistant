NTP Timestamp in DeepStream — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formNTP...NTP Timestamp in DeepStream#DeepStream 5.0+ supports the setting of NTP timestamps per frame. Calculated NTP timestamp is available inntp_timestampfield ofNvDsFrameMeta.
DeepStream calculates NTP timestamps in 2 ways:Host system timeas NTP timestamp - when the frame is received by theNvStreamMuxplugin in the DeepStream pipeline.This method requires you to synchronize host system to NTP clock.
To attach host system time as NTP timestamp, you’ll need to setattach-sys-tstoTRUEonnvstreammux.
Set theattach-sys-ts-as-ntpconfig parameter to1in[streammux]group of the application configuration file in the DeepStream reference app.NTP timestamp when attached at RTSP source - supported only if RTSP sources send RTCP Sender Reports (SR).To configure the pipeline to attach these timestamps:Setattach-sys-tstoFALSEonnvstreammux. Set theattach-sys-ts-as-ntpconfig parameter to0in[streammux]group of the application configuration file in the DeepStream reference app.After creating an“rtspsrc”element or an“uridecodebin”element, application must callconfigure_source_for_ntp_sync()function and pass theGstElementpointer to this API. (Refer tocreate_rtsp_src_bin()indeepstream_source_bin.cfile.) The API internally configures the pipeline to parse sender report and calculate NTP timestamps for each frame.Make sure RTSP source can send RTCP Sender Reports.Verify this by starting streaming from the source on a host and viewing the packets in a tool likewiresharkortsharkon the same host to confirm the presence of Sender Reports (SR).Example method to check if RTSP source sends RTCP sender reports using a tool liketshark:NoteWe assume RTSP source has IP address192.168.1.100Install tshark on a host:sudoapt-getinstalltsharkFind the host network interface that would be receiving the RTP/RTCP packets:$sudotshark-D...eno1...Start the monitoring usingtsharktool. Replace the network interface and source IP as applicable:$sudotshark-ieno1-f"src host 192.168.1.100"-Y"rtcp"On the same host, start streaming from the RTSP source only after starting the monitoring tool. Any client may be used:$gst-launch-1.0rtspsrclocation=<RTSPURLe.g.rtsp://192.168.1.100/stream1>!fakesinkThe output of thetsharkmonitoring tool should have lines containing"SenderReportSourcedescription". Here is a sample output:604110.500649319192.168.1.100→192.168.1.101RTCP94SenderReportSourcedescriptionpreviousOn the Fly Model UpdatenextAV Sync in DeepStreamPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.