Gst-nvdewarper — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvdewarperGst-nvdewarper#This plugin dewarps camera input. It accepts gpu-id and config-file as properties. Based on the selected configuration of surfaces, it can generate a maximum of four dewarped surfaces. It currently supports 18 dewarping projection types. Out of these,NVDS_META_SURFACE_FISH_PUSHBROOMandNVDS_META_SURFACE_FISH_VERTCYLare used in 360-D use case for dewarping 360° camera input.
The plugin performs its function in these steps:Reads the configuration file and creates a vector of surface configurations. It supports a maximum of four dewarp surface configurations.Receives the frame from the decoder. Based on the configuration, generates up to four dewarped surfaces.Scales these surfaces down to network/selected dewarper output resolution usingNPPAPIs.Pushes a buffer containing the dewarped surfaces to the downstream component.Inputs and Outputs#InputsA buffer containing a frame in RGBA formatControl parametersgpu-id; selects the GPU ID (dGPU only)config-file, containing the pathname of the dewarper configuration fileOutputDewarped RGBA surfacesNvDewarperSurfaceMetawith information associated with each surface (projection_type,surface_index, andsource_id), and the number of valid dewarped surfaces in the buffer (num_filled_surfaces)Features#The following table summarizes the features of the plugin.Gst-nvdewarper features#FeatureDescriptionReleaseConfigure number of dewarped surfacesSupports a maximum of four dewarper surfaces.DS 3.0Configure per-surface projection typeCurrently supports FishPushBroom and FishVertRadCyd projections.DS 3.0Configure per-surface projection typePerspectivePerspective projectionsDS 5.0Configure per-surface projection type18 projectionsDS 6.2Configure per-surface indexSurface index to be set in case of multiple surfaces having same projection type.DS 3.0Configure per-surface width and heightDS 3.0Configure per-surface dewarping parametersPer surface configurable yaw, roll, pitch, top angle, bottom angle, and focal length and CUDA address mode dewarping parameters. 
For PerspectivePerspective projection type, field of view, distortion and principal point can additionally be configured.DS 3.0Configurable dewarper output resolutionCreates a batch of up to four surfaces of a specified output resolution; internally scales all dewarper surfaces to output resolution.DS 3.0Configurable NVDS CUDA memory type—DS 3.0Multi-GPU support—DS 3.0Aisle view CSV calibration file supportIf set, properties in the [surface<n>] group are ignored.
Only supported for FishPushBroom and FishVertRadCyd.DS 3.0Spot view CSV calibration file supportIf set, properties in the [surface<n>] group are ignored.
Only supported for FishPushBroom and FishVertRadCyd.DS 3.0Configure source idSets the source ID information in the NvDewarperSurfaceMeta.DS 4.0Configurable number of output buffersNumber of allocated output dewarper buffers. Each buffer contains four dewarped output surfaces.DS 4.0Configurable number of surfaces per output bufferNumber of dewarped output surfaces per buffer. Maximum allowed value is 4.DS 5.0Support for advanced configuration parametersFisheye distortion coefficients, destination focal length, destination principal point, rotation axes sequence, rotation matrixDS 6.2Configuration File Parameters#The configuration file located atconfigs/deepstream-app/config_dewarper.txt.
The configuration file specifies per-surface configuration parameters in[surface<n>]groups, where<n>is an integer from0to3, representing dewarped surfaces0to3.Gst-nvdewarper configuration file [surface<n>] parameters#PropertyProperty TypeMeaningType and RangeExample Notesoutput-widthGlobalScale dewarped surfaces to specified output widthInteger, >0output-width=960output-heightGlobalScale dewarped surfaces to specified output heightInteger, >0output-height=752dewarp-dump-framesGlobalNumber of dewarped frames to dump.Integer, >0dewarp-dump-frames=10num-batch-buffersGlobalNumber of dewarped output surfaces per buffer, i.e batch-size of the buffer.Integer,
0 to 4num-batch-buffers=4projection-typeSurfaceSelects projection type. Supported types are:1: Fisheye to PushBroom2: Fisheye to Vertical Radial Cylindrical3: Perspective to Perspective4: Fisheye to Perspective5: Fisheye to Fisheye6: Fisheye to Cylindrical7: Fisheye to Equirectangular8: Fisheye to Panini9: Perspective to Equirectangular10: Perspective to Panini11: Equirectangular to Cylindrical12: Equirectangular to Equirectangular13: Equirectangular to Fisheye14: Equirectangular to Panini15: Equirectangular to Perspective16: Equirectangular to PushBroom17: Equirectangular to Stereographic18: Equirectangular to Vertical Radial CylindricalInteger, 1 to 18projection-type=1surface-indexSurfaceAn index that distinguishes surfaces of the same projection type.Integer, ≥0surface-index=0widthSurfaceDewarped surface width.Integer, >0width=3886heightSurfaceDewarped surface height.Integer, >0height=666top-angleSurfaceTop field of view angle, in degrees.Float, −180.0 to 180.0top-angle=0bottom-angleSurfaceBottom field of view angle, in degrees.Float, −180.0 to 180.0bottom-angle=0pitchSurfaceViewing parameter pitch in degrees.Float, 0.0 to 360.0pitch=90yawSurfaceViewing parameter yaw in degrees.Float, 0.0 to 360.0yaw=0rollSurfaceViewing parameter roll in degrees.Float, 0.0 to 360.0roll=0focal-lengthSurfaceFocal length of camera lens, in pixels per radian. Can be specified as :fxy : single float value<fx, fy> : array of two float values corresponding to focal lengths in x and y direction respectivelyFloats, >0.0focal-length=437 OR 
focal-length=442.63;395.106339src-fovSurfaceSource vertical field of view in degrees. Used to compute the source focal-length if the latter is not provided.Float, >0.0src-fov=180distortionSurfaceDistortion coefficients in the distortion polynomial for a fisheye/perspective source.For perspective source :Three radial coefficients:(k_0,k_1,k_2):r^'=r(1+k_0r^2+k_1r^4+k_2r^6)Two tangential coefficients:(k_3,k_4):x'=x+[1+2k_3xy+k_4(r^2+2x^2)]y^'=y+[k_3(r^2+2y^2+2k_4xy)]For fisheye source :Four radial coefficients(k_0,k_1,k_2,k_3):r^'=r(1+k_0r^2+k_1r^4+k_2r^6+k_3r^8)Array of 4/5 floatsdistortion=-0.3721;0.1023;-0.00203;0;0distortion=k_0,;k_1,;k_2;k_3;k_4If not provided, all coefficients are set to 0 (no distortion)src-x0SurfaceThe X coordinate of the center of projection of the source image, in pixel coordinates.Typically, it is (srcWidth-1)/2, but may be different if the image is calibrated or wraps around.Float, ≥0src-x0=479.5If not provided, will take its default value =(srcWidth-1)/2src-y0SurfaceThe Y coordinate of the center of projection of the source image, in pixel coordinates.Typically, it is (srcHeight-1)/2, but may be different if the image is calibrated or wraps around.Float, ≥0src-y0=375.5If not provided, will take its default value =(srcHeight-1)/2cuda-address-modeSurfaceCuda Texture addressing mode. 
Currently supports:0: cudaAddressModeClamp (Default) - sets points outside of border to nearest pixel value1: cudaAddressModeBorder - sets points outside of border to transparent blackInteger, 0 or 1cuda-address-mode=­1aisle-calibration-fileGlobalPathname of the configuration file for aisle view.Set for the 360 D application only for PushBroom and/or VertRadCyl projection types.If set, properties in the [surface<n>] group are ignored.
The configuration file is a CSV file with columns like sensorId and cameraId, and dewarping parameters like top-angle, bottom-angle, yaw, roll, pitch, focal-length, width, and height.Stringaisle-calibration-file=­csv_files/­nvaisle_2M.csvspot-calibration-fileGlobalPathname of the configuration file for spot view.Set for the 360 D application only for PushBroom and/or VertRadCyl projection types.If set, properties in the [surface<n>] group are ignored.
The configuration file is a CSV file with columns like sensorId and cameraId, and dewarping parameters like top-angle, bottom-angle, yaw, roll, pitch, focal-length, width, and height.Stringspot-calibration-file=­csv_files/-nvspot_2M.csv
For an example of a spot view configuration file, see the file in the example above.rot-axesSurfaceA three-character string that specifies the sequence of application of rotation angles.Possible values are : XYZ, XZY, YXZ, YZX, ZXY, ZYX where :X corresponds to pitch,Y corresponds to yaw andZ corresponds to roll.Default sequence of rotation is YXZString of three characters“rot-axes=ZXY”controlSurfaceA control parameter to vary the amount of warp. Applicable for Panini, Stereographic and Pushbroom projections.Floatcontrol=1.0.control=0 is identical to perspective output.rot-matrixSurfaceConfigures the rotation as a 3X3 rotation matrix. The matrix is specified in a right-handed screen space, with X to the right, Y downwards and Z outwards.If specified, this setting will override yaw, pitch, roll settings.Array of 9 floatsrot-matrix=0.5;-0.86;0;0.86;0.5;0;0;0.0;1.0dst-focal-lengthSurfaceSets destination image focal length.
Can be specified as :fxy : single float value<fx, fy> : array of two float valuesIf specified, this setting will override top-angle, bottom-angle settings.Floats, >0.0dst-focal-length=350;316dst-principal-pointSurfaceSet the X coordinate and Y coordinate in pixels of the principal point in destination imageIf specified, this setting will override top-angle, bottom-angle settings.Float, >0.0dst-principal-point=521.02;257.37NoteIn case viewing angles (top & bottom)/dst-focal-length/dst-principal-point are not provided, the destination center of projection (Principal Point) and Focal Length are kept the same as the source.To increase the flexibility,num-batch-buffersis also aGstProperty. The plugin properties are parsed in order, so ifnum-batch-buffersis passed both attached to theGstElementin thegstreamerpipeline (eg. withgst-launch-1.0command), and in the configuration file, the latest configuration applied will be used (see example below).Example:Config file (config_dewarper.txt) withnum-batch-buffers=2.Command Line argument with propertynum-batch-buffers=1.Pipelines:gst-launch-1.0…!nvdewarperconfig-file=config_dewarper.txtnum-batch-buffers=1!…gst-launch-1.0…!nvdewarpernum-batch-buffers=1config-file=config_dewarper.txt!…Pipeline 1 will result in 1 surface per buffer whereas pipeline 2 will result in 2 surfaces per buffer.This plugin can be tested with the one of the following pipelines.For dGPU:gst-launch-1.0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_cam6.mp4!qtdemux!h264parse!nvv4l2decoder!nvvideoconvert!nvdewarperconfig-file=/opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-dewarper-test/config_dewarper.txtsource-id=6!m.sink_0nvstreammuxname=mwidth=960height=752\batch-size=4num-surfaces-per-frame=4!nvmultistreamtiler!nveglglessinkPerspective Projection use-case:gst-launch-1.0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/yoga.mp4!qtdemux!h264parse!nvv4l2decoder!nvvideoconvert!nvdewarperconfig-file=/opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-dewarper-test/config_dewarper_perspective.txt!m.sink_0nvstreammuxname=mwidth=3680height=2428\batch-size=1num-surfaces-per-frame=1!nvmultistreamtiler!nveglglessinkFor Jetson:gst-launch-1.0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_cam6.mp4!qtdemux!h264parse!nvv4l2decoder!nvvideoconvert!nvdewarperconfig-file=/opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-dewarper-test/config_dewarper.txtsource-id=6!m.sink_0nvstreammuxname=mwidth=960height=752batch-size=4\num-surfaces-per-frame=4!nvmultistreamtiler!nv3dsinkPerspective Projection use-case:gst-launch-1.0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/yoga.mp4!qtdemux!h264parse!nvv4l2decoder!nvvideoconvert!nvdewarperconfig-file=/opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-dewarper-test/config_dewarper_perspective.txt!m.sink_0nvstreammuxname=mwidth=3680height=2428\batch-size=1num-surfaces-per-frame=1!nvmultistreamtiler!nv3dsinkImage File example dGPU:gst-launch-1.0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/yoga.jpg!nvjpegdec!nvvideoconvert!nvdewarperconfig-file=/opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-dewarper-test/config_dewarper_perspective.txt!nvvideoconvert!jpegenc!filesinklocation=output.jpgImage File example Jetson:gst-launch-1.0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/yoga.jpg!nvjpegdec!nvvideoconvert!nvdewarperconfig-file=/opt/nvidia/deepstream/deepstream/sources/apps/sample_apps/deepstream-dewarper-test/config_dewarper_perspective.txt!nvvideoconvert!jpegenc!filesinklocation=output.jpgTo better see the effect of cuda-address-mode you can change the dewarping size. For example, in config_dewarper_perspective.txt change [surface0] parameters to:width=7360height=4856cuda-address-mode=1The Gst-nvdewarper plugin always outputs aGStreamerbuffer which contains the number of dewarped surfaces defined bynum-batch-buffers(currently maximum of four surfaces are supported). These dewarped surfaces are scaled to the output resolution (output-width×output-height) set in the configuration file.
Also, thenum-surfaces-per-frameandbatch-sizeofGst-nvstreammuxmust be set accordingly. Batch-size must be a multiple of the number of dewarped surfaces, which should be set innum-surfaces-per-frame.Gst Properties#The following table describes the Gst-nvdewarper plugin’s Gst properties.Gst-nvdewarper gst properties#PropertyMeaningType and RangeExample and Notesconfig-fileAbsolute pathname of configuration file for the Gst-nvdewarper elementStringconfig-file= configs/ deepstream-app/ config_dewarper.txtgpu-idDevice ID of the GPU to be used (dGPU only)Integer,
0 to 4,294,967,295source-id=6source-idSource ID, e.g. camera IDInteger,
0 to 4,294,967,295num-output-buffers=4num-batch-buffersNumber of dewarped output surfaces per buffer, i.e., batch-size of the bufferInteger,
0 to 4num-batch-buffers=4nvbuf-memory-typeType of memory to be allocated.
For dGPU:0 (nvbuf-mem-default): Default memory, cuda-device1 (nvbuf-mem-cuda-pinned): Pinned/Host CUDA memory2 (nvbuf-mem-cuda-device) Device CUDA memory3 (nvbuf-mem-cuda-unified): Unified CUDA memoryFor Jetson:0 (nvbuf-mem-default): Default memory, surface array4 (nvbuf-mem-surface-array): Surface array memoryInteger, 0 to 4nvbuf-memory-type=3previousGst-nvvideoconvertnextGst-nvofOn this pageInputs and OutputsFeaturesConfiguration File ParametersGst PropertiesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.