Reference graphs — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formReference graphsReference graphs#This section provides details about the sample graphs for the DeepStream extensions. Most of these sample graphs are equivalents of the sample apps released as part of the DeepStreamSDK and demonstrate how to port/convert various portions of the “C/C++” based DeepStream applications into graphs and custom components/extensions.Installing the reference graphs#Download reference graphs:https://catalog.ngc.nvidia.com/orgs/nvidia/resources/gxf_and_gcInstall reference graphs:sudodpkg-ideepstream-reference-graphs-7.1.debGraphs are installed to:/opt/nvidia/deepstream/deepstream/reference_graphsdeepstream-test1#Simplest example of using DeepStream for object detection. Demonstrates decoding video from a file, performing object detection and overlaying bounding boxes on the frames.Graph Files#deepstream-test1.yaml – The main graph fileparameters.yaml – File containing parameters for the various components in the graphREADME - Contains detailed graph description and execution instructionsds_test1_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_test1_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-test1Sample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test1.yaml\parameters.yaml-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test1.yaml\parameters.yaml-d../common/target_aarch64.yamlGraph#Sample Output#deepstream-test2#Builds on top of deepstream-test1 and demonstrates object tracking and cascaded inferencing.Graph Files#deepstream-test2.yaml – The main graph fileparameters.yaml – File containing parameters for the various components in the graphREADME - Contains detailed graph description and execution instructionsds_test2_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_test2_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-test2Sample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test2.yaml\parameters.yaml-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test2.yaml\parameters.yaml-d../common/target_aarch64.yamlGraph#Sample Output#deepstream-test3#Builds on top of deepstream-test1 to demonstrate use of multiple sources in the pipeline.Graph Files#deepstream-test3.yaml – The main graph fileparameters.yaml – File containing parameters for the various components in the graphREADME - Contains detailed graph description and execution instructionsds_test3_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_test3_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-test3Sample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test3.yaml\parameters.yaml-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test3.yaml\parameters.yaml-d../common/target_aarch64.yamlGraph#Sample Output#deepstream-test4#Builds on top of deepstream-test1 to demonstrate how to send the metadata generated by the DeepStream components to the cloud using messaging components.Graph Files#deepstream-test4.yaml – The main graph fileparameters.yaml – File containing parameters for the various components in the graphREADME - Contains detailed graph description and execution instructionsds_test4_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_test4_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-test4Sample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test4.yaml\parameters.yaml-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test4.yaml\parameters.yaml-d../common/target_aarch64.yamlNoteA small note on what minimum parameter changes are needed to run the graph on any systemNoteBy default the sample is configured to send messages over Kafka and thus
needs a Kafka broker running. The graph files assume that the server
is running on “localhost:9092”. The server to send messages to along with the
topic can be changed by modifyingmsg-broker-conn-strandtopicparameters
in the parameters.yaml file.Graph#Sample Output#Following is the snapshot from output video. However, the app also sends messages over Kafka which can be viewed using the console consumer utility in the Kafka package or a similar alternative.deepstream-test5#DeepStream reference application which demonstrates device-to-cloud and cloud-to-device messaging, Smart Record and model on-the-fly update.Graph and related files#deepstream-test5.yaml – The main graph fileparameters.yaml – File containing parameters for the various components in the graphtest_sr_message_generator.yaml – Test graph for generating Smart record start/stop messagesdstest5_msgconv_sample_config.txt – Configuration files for the components used in the graphds_test5_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_test5_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformresources.yaml - List of resources required to execute the graph. This is required when using remote graph executionREADME - Contains detailed graph description and execution instructionsPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-test5Sample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test5.yaml\parameters.yaml-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-test5.yaml\parameters.yaml-d../common/target_aarch64.yamlNOTE:Whenexecutingonaremotetarget,additionalargument"--resources resources.yaml"mustbeprovidedtoexecute_graph.shscript.NoteBy default the sample is configured to send messages over Kafka and thus
needs a Kafka broker running. The graph files assume that the server
is running on “localhost:9092”. The server to send messages to along with the
topic can be changed by modifyingmsg-broker-conn-str,conn-strandtopicparameters in the parameters.yaml and test_sr_message_generator.yaml file.Graph#Sample Output#deepstream-runtime-src-add-del#Demonstrates how sources can be dynamically added/removed at runtime. Also, demonstrates the use of action/signal components. The “NvDsSourceManipulationAction” of “NvDsMultiSrcInput” component is used to add/remove the sources. This action is triggered by another sample component “NvDsSampleSourceManipulator” every fixed interval which can be configured. Or this action can also be triggered by an Http service “NvDsStreamManager” upon add source or remove source Http request.Graph Files#deepstream-runtime-src-add-del.yaml – The main graph filedeepstream-runtime-src-add-del-as-a-service.yaml – The main graph file with stream manager serviceparameters.yaml – File containing parameters for the various components in the graphREADME - Contains detailed graph description and execution instructionsds_runtime_src_add_del_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_runtime_src_add_del_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-runtime-src-add-delSample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-runtime-src-add-del.yaml\parameters.yaml-d../common/target_x86_64.yaml$/opt/nvidia/graph-composer/execute_graph.shdeepstream-runtime-src-add-del-as-a-service.yaml\-d../common/target_x86_64.yaml*Toadd/removeastreamusingaclientonthesamehostAddstreamwithid1:$curl-XPOST"http://localhost:8082/AddStream/stream"-d"{\"sensor\":{\"id\":\"1\",\"uri\":\"file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h265.mp4\"}}"Addstreamwithid2:$curl-XPOST"http://localhost:8082/AddStream/stream"-d"{\"sensor\":{\"id\":\"2\",\"uri\":\"file:///opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h265.mp4\"}}"......UntilthemaxnumberofstreamsconfiguredinNvDsStreamManagerisreachedRemovestreamwithid2:$curl-XPOST"http://localhost:8082/RemoveStream/stream"-d"{\"sensor\":{\"id\":\"2\"}}"Removestreamwithid1:$curl-XPOST"http://localhost:8082/RemoveStream/stream"-d"{\"sensor\":{\"id\":\"1\"}}"......UntilallstreamsareremovedOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-runtime-src-add-del.yaml\parameters.yaml-d../common/target_aarch64.yamlGraph#Sample Output#deepstream-template-plugin#Demonstrates the usage of configuration components used as configuration providers for other components. These graphs are meant to run only on DGPU platforms since the DeepStream template plugins are available only on DGPU platforms.Graph Files#deepstream-videotemplate.yaml – Graph demonstrating usage of DS video template plugin and a configuration provider for the pluginREADME - Contains detailed graph description and execution instructionsPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-template-pluginSample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-videotemplate.yaml\-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-videotemplate.yaml\-d../common/target_aarch64.yamlGraph#Sample Output#The sample output consists of the input video scaled by “scale-factor” mentioned in parameters of NvDsSampleVideoTemplateLib component in the graph.deepstream-app#DeepStream reference application, showing a wide variety of features such as kitti dump, performance measurement, handling tiler events. Two graphs corresponding to the two sample configurations in the DeepStreamSDK are provided.Graph Files#source30_1080p_dec_infer-resnet_tiled_display_int8.yaml – Graph file for 30 file inputs + Primary Detector + Tiled Outputsource30_1080p_dec_infer-resnet_tiled_display_int8.parameters.yaml – File with parameters for various components in the above graphsource4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.yaml – Graph file for 4 file inputs + Primary Detector + Tracker + 3 x Secondary Classifiers + Tiled Outputsource4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.parameters.yaml – File with parameters for various components in the above graphREADME - Contains detailed graph description and execution instructionsds_app_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_app_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-appSample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.sh\source30_1080p_dec_infer-resnet_tiled_display_int8.yaml\source30_1080p_dec_infer-resnet_tiled_display_int8.parameters.yaml\-d../common/target_x86_64.yaml$/opt/nvidia/graph-composer/execute_graph.sh\source4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.yaml\source4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.parameters.yaml\-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.sh\source30_1080p_dec_infer-resnet_tiled_display_int8.yaml\source30_1080p_dec_infer-resnet_tiled_display_int8.parameters.yaml\-d../common/target_aarch64.yaml$/opt/nvidia/graph-composer/execute_graph.sh\source4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.yaml\source4_1080p_dec_infer-resnet_tracker_sgie_tiled_display_int8.parameters.yaml\-d../common/target_aarch64.yamldeepstream-triton#Demonstrates usage of triton server in a simple DeepStream pipeline along with the use of NVIDIA Graph Container Builder for creating use case based containers. The graph shows object detection using SSD Inception V2 Tensorflow model via the Triton server. For DGPU, the graph must be executed inside the container built using the container builder, since Triton is available only in docker format. For Jetson, the graph can be run directly on the device.Graph and related files#deepstream-triton.yaml – The main graph filedeepstream-triton.parameters.dgpu_container.yaml – File containing parameters for executing the graph on DGPUdeepstream-triton.parameters.jetson.yaml – File containing parameters for executing the graph on Jetsonds_triton_container_builder_cfg_dgpu.yaml – Container Builder configuration file for building a container for the graphREADME - Contains detailed graph description and execution instructionsds_triton_container_builder_cfg_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_triton_container_builder_cfg_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-tritonSample Commands:On x86:
Triton samples for DGPU need to be run in containers based on Triton. This
sample uses the NVIDIA Container Builder to build a container for the sample.

Steps:
* Build the container
$ container_builder build -c ds_triton_container_builder_cfg_dgpu.yaml \
      -d target_triton_x86_64.yaml -wd $(pwd)

* Start the container
$ docker run -it --rm  -e DISPLAY=:0 -v /tmp/.X11-unix/:/tmp/.X11-unix \
      --gpus all deepstream_triton_dgpu

On Jetson:
Triton samples for Jetson can be run natively or in a container.

Steps for running natively:
* Setup the Triton Server.
- $ cd /opt/nvidia/deepstream/deepstream/samples
- $ sudo ./triton_backend_setup.sh

* Prepare the triton model repo. Downloads the model files.
- $ cd /opt/nvidia/deepstream/deepstream/samples/
- $ ./prepare_ds_triton_model_repo.sh # prepare the triton model repo

* Launch the graph
- $ /opt/nvidia/graph-composer/execute_graph.sh deepstream-triton.yaml \
      deepstream-triton.parameters.jetson.yaml -d target_triton_aarch64.yamlNoteSometime there can be following error while running the graph."unabletoloadbackendlibrary:/usr/lib/aarch64-linux-gnu/libgomp.so.1:cannotallocatememoryinstaticTLSblock"To solve the issue the libgomp.so.1 needs to be preloaded which can be done as
follows before running the sample:$exportLD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1:$LD_PRELOADGraph#Sample Output#deepstream-camera#Demonstrates usage of a camera source in a simple DeepStream pipelineGraph and related files#deepstream-camera.yaml – The main graph filev4l2-usb-camera.parameters.yaml - Parameters file for using V4L2 USB camera. Works on both x86 and jetsonargus-csi-camera.parameters.yaml - Parameters file for using CSI camera using NVIDIA Argus API. Works on jetson onlyREADME - Contains detailed graph description and execution instructionsds_camera_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_camera_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-cameraSample Commands:On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-camera.yaml \
      v4l2-usb-camera.parameters.yaml -d ../common/target_x86_64.yaml

On Jetson:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-camera.yaml \
      v4l2-usb-camera.parameters.yaml -d ../common/target_aarch64.yaml
OR
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-camera.yaml \
      argus-csi-camera.parameters.yaml -d ../common/target_aarch64.yamlGraph#Sample Output#deepstream-action-recognition#Demonstrates usage of NvDsPreProcess component to do pre-processing outside
the NvDsInferVideo component. In this sample, it is used to demonstrate
temporal batching and pre-processing required by the NVIDIA TAO Action
Recognition models.Graph and related files#deepstream-action-recognition.yaml – The main graph fileparameters.yaml - File containing parameters for the various components in the graphresources.yaml - List of resources required to execute the graph. This is required when using remote graph executionREADME - Contains detailed graph description and execution instructionsds_action_recognition_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_action_recognition_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformconfig_preprocess_3d_custom.txt - NvDsPreProcess component configuration file for the 3D Action Recogntion modelconfig_preprocess_2d_custom.txt - NvDsPreProcess component configuration file for the 2D Action Recogntion modelPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-action-recognitionSample Commands:On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-action-recognition.yaml \
      parameters.yaml -d ../common/target_x86_64.yaml

On Jetson:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-action-recognition.yaml \
      parameters.yaml -d ../common/target_aarch64.yamlNoteWhen executing on a remote target, additional argument “–resources resources.yaml” must be provided to execute_graph.sh script.Graph#Sample Output#deepstream-subgraph#Demonstrates usage of subgraphs with DS components.Graph and related files#main_graph.yaml – The main graph fileinference_subgraph.yaml - Inference subgraph used by thr main graphresources.yaml - List of resources required to execute the graph. This is required when using remote graph executionREADME - Contains detailed graph description and execution instructionsds_subgraph_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformds_subgraph_container_builder_jetson.yaml - Configuration file for building application specific container for Jetson platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-subgraphSample Commands:On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh main_graph.yaml \
      -s inference_subgraph.yaml -d ../common/target_x86_64.yaml

On Jetson:
$ /opt/nvidia/graph-composer/execute_graph.sh main_graph.yaml \
      -s inference_subgraph.yaml -d ../common/target_aarch64.yamlNoteWhen executing on a remote target, additional argument “–resources resources.yaml” must be provided to execute_graph.sh script.Graph#Main graph:Inference SubgraphSample Output#deepstream-3d-camera#Demonstrates capture, processing and rendering of 3D data from a 3D camera.Graph and related files#deepstream-3d-camera.yaml – The main graph fileparameters-2drender.yaml - Parameters to render as 2D instead of 3Dds_3d_loader_realsense.yaml - Configuration file for Data loader component (source)ds_3d_filter_depth2cloud.yaml - Configuration file for Data filtering component (nvds3dfilter)ds_3d_render_depth2d.yaml - Configuration file for Data render component (sink) - 2D renderingds_3d_render_pointcloud3d.yaml - Configuration file for Data render component (sink) - 3D renderingresources.yaml - List of resources required to execute the graph. This is required when using remote graph executionREADME - Contains detailed graph description and execution instructionsds_3d_depth_camera_container_builder_dgpu.yaml - Configuration file for building application specific container for dGPU platformPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-3d-cameraSample Commands:Onx86:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-3d-camera.yaml\-d../common/target_x86_64.yamlOnJetson:$/opt/nvidia/graph-composer/execute_graph.shdeepstream-3d-camera.yaml\-d../common/target_aarch64.yamlNOTE:Note“parameters-2drender.yaml” can be added to the commandline to render 2D depth/color images instead of the default 3D point cloud rendering.Mouse interactions are possible with default 3D point render.Graph#Sample Output#deepstream-ucx-test1#Demonstrates how to use DeepStream UCX communication components for data transfer:Graph and related files#deepstream-ucx-test1-server.yaml – Server application graph file (sender)deepstream-ucx-test1-client.yaml – Client application graph file (receiver)server-parameters.yaml - Configurable parameters for various components in the server application.client-parameters.yaml - Configurable parameters for various components in the client application.README - Contains detailed graph description and execution instructionsPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-ucx-test1Sample Commands:Run the server first:

Update `addr` parameter in `server-parameters.yaml` to mellanox NIC address on
which the server listens.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test1-server.yaml \
      server-parameters.yaml -d ../common/target_x86_64.yaml

Run the client next:

Update addr` parameters in `client-parameters.yaml` to address on which the
server is listening. This may be executed on the same device in another terminal
or on another device with a mellanox NIC connected to the server side mellanox
NIC.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test1-client.yaml \
      client-parameters.yaml -d ../common/target_x86_64.yamlNoteThis sample is supported only for x86.Graph#Server GraphClient GraphSample Output#deepstream-ucx-test2#Demonstrates how to use DeepStream UCX communication components for data transfer including DS metadata.Graph and related files#deepstream-ucx-test2-server.yaml – Server application graph file (sender)deepstream-ucx-test2-client.yaml – Client application graph file (receiver)server-parameters.yaml - Configurable parameters for various components in the server application.client-parameters.yaml - Configurable parameters for various components in the client application.README - Contains detailed graph description and execution instructionsPath- /opt/nvidia/deepstream/deepstream/reference_graphs/deepstream-ucx-test2Sample Commands:Run the server first:

Update `addr` parameter in `server-parameters.yaml` to mellanox NIC address on
which the server listens.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test2-server.yaml \
      server-parameters.yaml -d ../common/target_x86_64.yaml

Run the client next:

Update addr` parameters in `client-parameters.yaml` to address on which the
server is listening. This may be executed on the same device in another terminal
or on another device with a Mellanox NIC connected to the server side Mellanox
NIC.

On x86:
$ /opt/nvidia/graph-composer/execute_graph.sh deepstream-ucx-test2-client.yaml \
      client-parameters.yaml -d ../common/target_x86_64.yamlNoteThis sample is supported only for x86.Graph#Server GraphClient GraphSample Output#previousCreating an AI ApplicationnextExtension Development WorkflowOn this pageInstalling the reference graphsdeepstream-test1Graph FilesGraphSample Outputdeepstream-test2Graph FilesGraphSample Outputdeepstream-test3Graph FilesGraphSample Outputdeepstream-test4Graph FilesGraphSample Outputdeepstream-test5Graph and related filesGraphSample Outputdeepstream-runtime-src-add-delGraph FilesGraphSample Outputdeepstream-template-pluginGraph FilesGraphSample Outputdeepstream-appGraph Filesdeepstream-tritonGraph and related filesGraphSample Outputdeepstream-cameraGraph and related filesGraphSample Outputdeepstream-action-recognitionGraph and related filesGraphSample Outputdeepstream-subgraphGraph and related filesGraphSample Outputdeepstream-3d-cameraGraph and related filesGraphSample Outputdeepstream-ucx-test1Graph and related filesGraphSample Outputdeepstream-ucx-test2Graph and related filesGraphSample OutputPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.