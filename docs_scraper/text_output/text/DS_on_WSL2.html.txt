DeepStream On WSL — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formDeepStream On WSLDeepStream On WSL#Windows Subsystem for Linux (WSL) is a feature of Windows that allows you to run a Linux environment on your Windows machine, without the need for a separate virtual machine or dual booting.
WSL 2 is the latest version of it. This page describes the steps to run a Deepstream docker container inside WSL2.Pre-Requisites:#1. Windows 11 system with NVIDIA GPU:NOTE: Tesla/Datacenter GPUs are not supported for WSL. Only GeForce and Quadro GPUs in WDDM mode are supported. Please check the link for more info:https://docs.nvidia.com/cuda/wsl-user-guide/index.html#wsl-2-support-constraints2. NVIDIA driver (windows version) compatible for your GPU:You can download the compatible driver based on your windows OS and GPU type from here:https://www.nvidia.com/Download/index.aspxCurrently validated Driver Version and GPU info:
GameReady Driver version 546.65 with RTX-3080, RTX-3090 and RTX-A6000NOTE: This is the only driver you need to install on Windows. Do not install any Linux display driver inside WSL.3. WSL (Windows Store Version):Download and install the latest stable version of WSL2 frommicrosoft/WSL.NOTE: In some build versions of Windows, ‘wsl –install’ command will install the WSL which comes as a part of windows image, which has limited functionality. DO NOT install that.Install Ubuntu OS for WSL :#Open terminal and install Ubuntu 22:Open windows terminal with admin privilege. (Right click and run as administrator)
Check what all OS images are available for wsl to install.$wsl--list--onlineInstall Ubuntu version required for Deepstream 7.1.$wsl--installUbuntu-22.04The above step may first install dependencies for running WSL, prior to install Ubuntu and can ask for restart of Windows machine. In that case, restart the machine, open windows terminal with admin privilege and check if Ubuntu is installed properly using below command.$wsl--listIf you can’t find an installed Ubuntu version, again install it using ‘wsl –install Ubuntu-22.04’ command. Set the username and password for Ubuntu when prompted.Install Docker Engine And Dependencies Inside Ubuntu:#Start Ubuntu Inside WSL:Open windows terminal with admin privilege (Right click and run as administrator).Start Ubuntu using WSL. (This step is required only if you are not already logged into Ubuntu)$wsl-dUbuntu-22.04Verify Driver Installation from within WSL environment:$nvidia-smiNOTE: If ‘nvidia-smi’ is not working as expected, then there is some issue with the driver installation in windows and we can’t go further without fixing this.Install Docker Engine and Dependencies:$sudoapt-getupdate$sudoapt-getinstall-yapt-transport-httpsca-certificatescurlgnupg-agentsoftware-properties-common$curl-fsSLhttps://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -$sudoapt-keyfingerprint0EBFCD88$sudoadd-apt-repository"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"$sudoapt-getupdate$sudoapt-getinstall-ydocker-cedocker-ce-clicontainerd.io--fix-missingVerify docker installation:This should print a “Hello from Docker!”$sudodockerrunhello-worldNOTE: If you are not able to run the above command because of docker service not running, start the docker service before that.$sudodockerd&Enabling the Docker Repository and Installing the NVIDIA Container Toolkit:$distribution=$(./etc/os-release;echo$ID$VERSION_ID)$curl-fsSLhttps://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg$curl-s-Lhttps://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list$sudoapt-getupdate&&sudoapt-getinstall-ynvidia-container-toolkit$sudosystemctlrestartdockerRun Deepstream Container:#Pull the required deepstream docker container:$sudodockerpullnvcr.io/nvidia/deepstream:7.1-triton-multiarchStart the docker container:$sudoaptinstallx11-xserver-utils$xhost+$sudodockerrun-it--privileged--rm--name=docker--net=host--gpusall-eDISPLAY=$DISPLAY-eCUDA_CACHE_DISABLE=0--device/dev/snd-v/tmp/.X11-unix/:/tmp/.X11-unixnvcr.io/nvidia/deepstream:7.1-triton-multiarchVerify deepstream functionality:$deepstream-app--versionExpected Output: It should print the deepstream version currently installed on docker.$cd/opt/nvidia/deepstream/deepstream/samples/streams
$gst-launch-1.0filesrclocation=sample_720p.mp4!qtdemux!h264parse!nvv4l2decoder!nveglglessink-vExpected Output: Playback of the sample_720p.mp4 should happen fine. Sample screenshot attached below:NOTE: The display window size may differ in different systems based on the screen resolution supported. You can drag and adjust the display window to fit your screen.$cd/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app
$deepstream-app-csource30_1080p_dec_infer-resnet_tiled_display_int8.txtExpected Output: deepstream-app should run fine. Sample screenshot attached below:NoteThe display window size may differ in different systems based on the screen resolution supported. You can drag and adjust the display window to fit your screen.previousFrequently Asked QuestionsnextFAQ for Deepstream On WSLOn this pagePre-Requisites:Install Ubuntu OS for WSL :Install Docker Engine And Dependencies Inside Ubuntu:Run Deepstream Container:Privacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.