Gst-nvvideoconvert — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvvideoconvertGst-nvvideoconvert#This plugin performs video color format conversion. It accepts NVMM memory as well as RAW (memory allocated usingcalloc()ormalloc()), and provides NVMM or RAW memory at the output.Inputs and Outputs#InputsGst Buffer batched bufferNvDsBatchMetaFormat: (NVMM/RAW)dGPU - NV12, I420, P010_10LE, BGRx, RGBA, GRAY8, RGB, BGR, Y444, Y444_10LE, Y444_12LE, BGR10A2_LE, UYVP, I420_12LE, RGB10A2_LE, GRAY16_LEJetson - NV12, I420, P010_10LE, BGRx, RGBA, GRAY8, RGB, BGR, BGR10A2_LE, UYVP, UYVY, YUY2, YVYU, Y42B, I420_12LE, GRAY16_LEControl parametersgpu-id (dGPU only)nvbuf-memory-typesrc-cropdst-cropinterpolation-methodcompute-hwflip-methodOutputGst BufferNvDsBatchMetaFormat: (NVMM/RAW)dGPU - NV12, I420, P010_10LE, BGRx, RGBA, GRAY8, RGB, BGR, Y444, Y444_10LE, Y444_12LE, BGR10A2_LE, UYVP, I420_12LE, RGB10A2_LE, GRAY16_LEJetson - NV12, I420, P010_10LE, BGRx, RGBA, GRAY8, RGB, BGR, BGR10A2_LE, UYVP, UYVY, YUY2, YVYU, Y42B, I420_12LE, GRAY16_LENoteFor 12bit NV12 format, the input/output caps shows I420_12LE. But the data is handled as semiplanar 12 bit data. This is a workaround since gstreamer v1.16 does not have the particular caps for 12 bit NV12. Downstream component should process it considering as 12bit NV12 only.Only NVMM memory support is added for I420_12LE, Y444_10LE and Y444_12LE formats.Features#This plugin supports scaling and conversion for NVMM to NVMM, RAW to NVMM, and NVMM to RAW and RAW to RAW buffer type conversion. The plugin supports cropping of the input and output frames.Gst Properties#The following table describes the Gst properties of the Gst-nvvideoconvert plugin.Gst-nvvideoconvert gst properties#PropertyMeaningType and RangeExample Notesnvbuf-memory-typeType of memory to be allocated.
For dGPU:0 (nvbuf-mem-default): Default memory, cuda-device1 (nvbuf-mem-cuda-pinned): Pinned/Host CUDA memory2 (nvbuf-mem-cuda-device) Device CUDA memory3 (nvbuf-mem-cuda-unified): Unified CUDA memoryFor Jetson:0 (nvbuf-mem-default): Default memory, surface array1 (nvbuf-mem-cuda-pinned): Pinned/Host CUDA memory2 (nvbuf-mem-cuda-device) Device CUDA memory3 (nvbuf-mem-cuda-unified): Unified CUDA memory4 (nvbuf-mem-surface-array): Surface array memoryenum GstNvVidConvBufMemoryTypesrc-cropPixel location: left:top:width:height of the input image which will be cropped and transformed into the output buffer. If the crop location is out of bound the values will be clamped to image boundaries of the input image. This property will be applied to all the input images in the batchStringsrc-crop=”20:40:150:100”dest-cropPixel location: left:top:width:height is the location in the output image where the input image will be transformed to. If the crop location is out of bound the values will be clamped to image boundaries of the output image. This property will be applied to all the output images in the batchStringdest-crop=”20:40:150:100”interpolation-methodInterpolation method:0: Nearest1: Bilinear2: Algo-1 (GPU—Cubic, VIC—5 Tap)3: Algo-2 (GPU—Super, VIC—10 Tap)4: Algo-3 (GPU—LanzoS, VIC—Smart)5: Algo-4 (GPU—Ignored, VIC—Nicest)6: Default (GPU—Nearest, VIC—Nearest)enum GstInterpolationMethodinterpolation-method=1
Default value is 6.compute-hwType of computing hardware:0: Default (GPU for gDPU, VIC for Jetson)1: GPU2: VICenum GstComputeHWcompute-hw=0
Default value is 0.gpu-idDevice ID of GPU to use for format conversionInteger,
0 to 4,294,967,295gpu-id=0output-buffersNumber of Output Buffers for the buffer poolUnsigned integer,
1 to 4,294,967,295output-buffers=4bl-outputFlag applicable only for Jetson to output Block linear NVMM buffer for NV12 format. This is ignored for dGPU, Software memory (output buffer) and formats other than NV12Boolean. 
Default: falsebl-output=1flip-methodType of rotation method. This flag is applicable for Jetson and GPU.Flip method:0: Identity (no rotation)1: Rotate counter-clockwise 90 degrees2: Rotate 180 degrees3: Rotate clockwise 90 degrees4: Rotate horizontally5: Rotate across upper right/lower left diagonal6: Rotate vertically7: Rotate across upper left/lower right diagonalenum GstNvDsVideoFlipMethodflip-method=1 
Default value is 0.allow-odd-cropFlag to allow the odd dimensions for source and destination crop rectangleBooleanallow-odd-crop=1 Default value is 1.contiguous-buffersEnable contiguous output buffersBooleancontiguous-buffers=1 Default value is 0.disable-passthroughDisable passthrough mode at init timeBooleandisable-passthrough=1 Default value is 0.copy-hwSelect hardware used for surface copies:1: GPU2: VICflags: readable, writable, controllableenum GstNvCopyHWTypecopy-hw=2 Default value is 1.previousGst-nvdsaudiotemplatenextGst-nvdewarperOn this pageInputs and OutputsFeaturesGst PropertiesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.