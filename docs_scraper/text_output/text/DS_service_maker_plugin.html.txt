What is a Deepstream Service Maker Plugin — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formWhat is a...What is a Deepstream Service Maker Plugin#A plugin encapsulates a specialized factory, enabling the creation of user-implemented custom objects through a standardized factory API. Users have the flexibility to define a factory in a plugin with descriptive metadata, including name, version, descriptions, and more, for their custom objects. By loading the plugin, any application gains the ability to create instances of the custom object through the common factory API and facilitates the seamless reuse of user-defined custom objects (e.g., object counter, latency measurement, etc) across multiple applications.Getting Started with Your Factory and Plugin#Prior to encapsulating a factory, it is essential to come up with a custom object that the factory will create. As an illustrative example, let’s consider a simple latency measurement probe. By implementing the IBufferObserver interface for a BufferProbe, we tailor it to serve as a latency measurement tool for video frames:classMeasureLatency:publicBufferProbe::IBufferObserver{public:virtualprobeReturnhandleBuffer(BufferProbe&probe,constBuffer&buffer){autolatency_info=buffer.measureLatency();for(auto&latency:latency_info){cout<<"Source id = "<<latency.source_id<<" Frame_num = "<<latency.frame_num<<" Frame latency = "<<latency.latency<<" (ms)"<<endl;}returnprobeReturn::Probe_Ok;}};Next, you need to encapsulate a factory for this latency measurement probe within a plugin. To achieve this, we can employ macros in the plugin.h file to define both the factory and the plugin, respectively:DS_CUSTOM_PLUGIN_DEFINE(measure_latency_probe,"Custom probe to add measure Latency","0.1","Proprietary")// define a factory that creates a BufferProbe instance with a MeasureLatency implementationDS_CUSTOM_FACTORY_DEFINE("measure_latency_probe","Latency measurement calculating custom probe factory","probe","this is a latency measurement custom probe factory","NVIDIA",BufferProbe,MeasureLatency)To build the plugin, you need to create a straightforward CMakeLists.txt file with the following content:cmake_minimum_required(VERSION3.16)project(Sample)find_package(nvds_c++REQUIREDPATHS/opt/nvidia/deepstream/deepstream/service-maker/cmake)add_library(measure_latency_probeSHAREDmeasure_latency_probe.cpp)target_link_libraries(measure_latency_probePRIVATEnvds_service_makernvds_service_maker_utils)$ mkdir build && cd build && cmake .. && makeUpon successful completion of the plugin build process, you can seamlessly utilize our latency measurement-customized BufferProbe in any application:pipeline.attach("decoder","measurelatencyprobe","my probe","src")Incorporating properties to a plugin#To further increase the versatility of factory reuse, we can introduce property specification for the objects from the factory. Macros for adding property specification to the factory can be utilized as follows:DS_CUSTOM_FACTORY_DEFINE_PARAMS_BEGIN(probe_param_spec)DS_CUSTOM_FACTORY_DEFINE_PARAM(source-id,integer,"source-id","sourceid",0)DS_CUSTOM_FACTORY_DEFINE_PARAMS_ENDWithin the latency measurement implementation, the calculation of frame latency can be confined to a specified stream:classMeasureLatency:publicBufferProbe::IBufferObserver{public:virtualprobeReturnhandleBuffer(BufferProbe&probe,constBuffer&buffer){intid=0;probe.getProperty("source-size",id);autolatency_info=buffer.measureLatency();for(auto&latency:latency_info){if(latency.source_id==id){cout<<"Source id = "<<latency.source_id<<" Frame_num = "<<latency.frame_num<<" Frame latency = "<<latency.latency<<" (ms)"<<endl;}}returnprobeReturn::Probe_Ok;}};In the application, you would have the option to specify the precise source ID for latency measurement:pipeline.attach("decoder","measurelatencyprobe","my probe","src","source-id",1)Sample Plugins#Sample plugins can be found from the Deepstream installation directory/opt/nvidia/deepstream/deepstream/service-maker/sources/modules, and with the following commands user can build them:$ cmake /opt/nvidia/deepstream/deepstream/service-maker/sources/modules/sample_video_probe && makeMessage Metadata Generator#The Message Metadata Generator is a sample plugin that creates a buffer probe to generate event message metadata. This metadata can be utilized by downstream nvmsgconv to create JSON payloads for transmission to message brokers like Kafka.Registered name of the plugin is “add_message_meta_probe”.KITTI Dump Plugin#The KITTI Dump Plugin is a sample plugin that creates a buffer probe to dump the object metatdata there into a txt file in kitti format. The registered name of the plugin is “ktti_dump_probe”.Following parameters are supported:kitti-dir: the path for saving kitti files (default: /tmp/kitti).Framerate Measurement Plugin#The Framerate Measurement Plugin is a sample plugin that creates a framerate measurement probe which measures and prints the current frame rate. The registered name of the plugin is “measure_fps_probe”.Latency Measurement Plugin#The Latency Measurement Plugin is a sample plugin that creates a latency measurement probe which measures and prints the current frame latency. The registered name of the plugin is “measure_latency_probe”.Sample Video Probe Plugin#This plugin creates a sample video probe which constructs the display metadata for downstream osd plugin to show the object counter. The registered name of the plugin is “sample_video_probe”. The following parameters are supported for customizing the created buffer probe object:font-size: an integer to specify the size of the font.Sample Signal Handler Plugin#This plugin creates a sample signal handlers that responds on the “model-updated” signal from nvinfer plugin. As a sample it prints out the message whenever the model is updated. The registered name of the plugin is “sample_signal_handler”.Sample Video Feeder Plugin#This plugin creates a sample video feeder can be attached to an “appsrc”, thus injects raw video data to the pipeline from a file. The registered name of the plugin is “sample_video_feeder”. The following parameters are supported for customizing the created buffer probe object:location: a string to specifies the file as the source of video dataframe-width: width of the video frameframe-height: height of the video frameformat: format of the video frame, which can be one among RGBA, I420 and NV12use-gpu-memory: True for copying data into a GPU memoryuse-external-memory: True for allocating the memory outside the pipeline.Sample Video Receiver Plugin#This plugin creates a sample video receiver to demonstrate how to retrieve the buffer data from an “appsink”. The registered name of the plugin is “sample_video_receiver”.Smart Recording Action Plugin#This plugin creates a signal emitter object which can attach to “nvurisrcbin” to trigger smart record and pause it. As a sample plugin it interacts with a remote Kafka server and controls the smart recording based on the messages received from the Kafka server.The registered name of the plugin is “smart_recording_action”. The following parameters are supported for customizing the created buffer probe object:proto-lib: the path to the shared library that implements the device/cloud communication protocolconn-str: string for the connection in the format of ‘ip;port’proto-config-file: path to the config file of the communication protocolmsgconv-config-file: message converter config file pathtopic-list: list of topics to subscribeSmart Recording Signal Plugin#This plugin creates a sample smart recording signal handler which responds on “sr-done” signal from “nvurisrcbin” with a brief print. The registered name of the plugin is “smart_recording_signal”.Plugin Search Path#By default the plugins will be searched from the installation path/opt/nvidia/deepstream/deepstream/service-maker/sources/modules. However, users can specify their path by defining them in the NVDS_MODULE_PATH environment variable, and multiple paths can be separated by “:”.previousMigrating Traditional Deepstream Apps to Service Maker Apps in PythonnextDeepStream Libraries (Developer Preview)On this pageWhat is a Deepstream Service Maker PluginGetting Started with Your Factory and PluginIncorporating properties to a pluginSample PluginsMessage Metadata GeneratorKITTI Dump PluginFramerate Measurement PluginLatency Measurement PluginSample Video Probe PluginSample Signal Handler PluginSample Video Feeder PluginSample Video Receiver PluginSmart Recording Action PluginSmart Recording Signal PluginPlugin Search PathPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.