Gst-nvds3dfilter â€” DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvds3dfilterGst-nvds3dfilter#The Gst-nvds3dfilter plugin is a customizable plugin which provides a custom library interface to load componentds3d::datafilter.The Plugin is fully configured through YAML format content or file.sink_capsandsrc_capsis also configurable.Custom library Interfaces#The plugin parse the config file or content and set SinkCaps and SrcCaps. load a customds3d::datafilterfromcustom_lib_path. Create this datafilter bycustom_create_function.See more details ofds3d::datafilterin DS3D Manualds3d::datafilter-  DS3D Custom DataFilter.Inputs and Outputs#InputsNvDs3DBuffer orMetadata (NvDsBatchMeta) which has user meta NVDS_3D_DATAMAP_META_TYPEControl parametersconfig-fileconfig-contentOutputNvDs3DBuffer orMetadata (NvDsBatchMeta) which has user meta NVDS_3D_DATAMAP_META_TYPEsink_capsparsed from filed ofin_caps:ds3d/datamapor any user specifiedin_caps:.src_capsparsed from filed ofout_caps:ds3d/datamapor any user specifiedout_caps:.Configuration file#Example:name:multimodal_triton_infertype:ds3d::datafilterin_caps:ds3d/datamapout_caps:ds3d/datamapcustom_lib_path:libnvds_tritoninferfilter.socustom_create_function:createLidarInferenceFilterconfig_body:in_streams:[color,depth]Gst-nvds3dfilter properties Specifications#Gst-nvds3dfilter Properties.#PropertiesDescriptionReleaseconfig-contentyaml config contentDS 6.1config-fileyaml config file pathDS 6.1Supported DS3D filter custom libs#These custom libs are part of DeepStream release package.DS3D filter custom libs#DS3D Data filterData filter custom libraryCreating Instance FunctionDescriptionMulti-Modal-triton-inferlibnvds_tritoninferfilter.socreateLidarInferenceFilterMulti-modal sensor data inference library, see details inlibnvds_tritoninferfilter Configuration SpecificationsData-alignmentlibnvds_3d_alignment_datafilter.socreateLidarAlignmentFilterlidar/camera Sensor Intrinsic and Extrinsic parameters and alignmentDepth-2-point-cloudlibnvds_3d_depth2point_datafilter.socreateDepth2PointFilterConvert Image Depth data into 3D Point Cloud data, see details inCustom datafilter libnvds_3d_depth2point_datafilter Configuration SpecificationsCustomds3d::datafilterlibrary:libnvds_3d_alignment_datafilter.so#The inputkLidarXYZIfromds3d/datamapbuffer is converted intokLidarXYZIAligned.
This is done by a series of transformations.Transformationsdone inside the alignment filter are described below with the help of KITTI Data format and calibration data references.Transformations#Transform IDDetailsAL_TR_1Euclidean transformationfrom lidar to reference camera.Velodyne points convert to reference camera (cam0) coordinate.
Output = matrixmultiply(Tr_velo_to_cam, input_lidar_point)AL_TR_2Note: AL_TR_2 is done on top of AL_TR_1.Alignment filter expect users to setlidar_to_cam_extrisicwith bothTr_velo_to_camandR0_rect.Rotationto account forrectification for points in the reference camera.
Output = matrixmultiply(matmul(R0_rect, Tr_velo_to_cam), input_lidar_point)AL_TR_3[Optional and is configured to ON/OFF with config:align_to_intrinsic]Projective transformation from rectified reference camera frame (AL_TR2) to cam[2].
Note: Alignment filter expect users to setcam_intrinsicwithP_rect[2].
Output = matrixmultiply(matmul(P_rect[2], R0_rect, Tr_velo_to_cam), input_lidar_point).
Note: P_rect[2], R0_rect, Tr_velo_to_cam are all converted to 4X4 matrices.In DeepStream world:Transformations DeepStream vocab#cam_intrinsicP0 OR P_rect[0]lidar_to_cam_extrisicis a 3X4 matrix = matrix_multiply(R0_rect, Tr_velo_to_cam)More info here:Alignment configuration Options.Inputs and Outputs#Inputsds3d/datamapControl parametersconfig-fileconfig-contentOutputds3d/datamapConfiguration file#Example:name:lidar_alignment_filtertype:ds3d::datafilterlink_to:ds3d_aligned_renderin_caps:ds3d/datamapout_caps:ds3d/datamapcustom_lib_path:libnvds_3d_alignment_datafilter.socustom_create_function:createLidarAlignmentFilterconfig_body:cam_width:1242cam_height:375cam_intrinsic:[7.215377000000e+02,0.000000000000e+00,0.000000000000e+00,0.000000000000e+00,7.215377000000e+02,0.000000000000e+00,6.095593000000e+02,1.728540000000e+02,1.000000000000e+00,4.485728000000e+01,2.163791000000e-01,2.745884000000e-03]#lidar_to_cam_extrisic is a 3X4 matrix = matrix_multiply(R0_rect, Tr_velo_to_cam);#lidar_to_cam_extrisic is in column major order#For more details on R0_rect and Tr_velo_to_cam, please check: https://github.com/lkk688/3DDepth/blob/main/README.mdlidar_to_cam_extrisic:[2.34773698e-04,1.04494074e-02,9.99945389e-01,-9.99944155e-01,1.05653536e-02,1.24365378e-04,-1.05634778e-02,-9.99889574e-01,1.04513030e-02,-2.79681694e-03,-7.51087914e-02,-2.72132796e-01]#cam input keys to ratain in the output datamapcam_input_keys:[DS3D::ColorFrame+1]#lidar input and output/aligned keys to retain in the output datamap#note: lidar_input_keys and lidar_aligned_keys map the same sensor datalidar_input_keys:[DS3D::LidarXYZI+0]lidar_aligned_keys:[DS3D::LidarAlignedXYZIKey]max_points:2073600mem_pool_size:32align_to_intrinsic:falselidar_element_size:4Configuration options#Alignemnt config_body#config-keyDescriptionExample valuecam_widthThe width of camera image used for video input.1242cam_heightThe height of camera image used for video input.375cam_intrinsicIs a 3X4 matrix in column major.Projective transformation from rectified reference camera frame to cam in use for video input.More infohere(see documentation for P_rect[i]; Note: we use P_rect[2] for the default config in ds3d_lidar_video_alignment_render.yaml).[3X4] matrix in column major.lidar_to_cam_extrisicis a 3X4 matrix = matrix_multiply(R0_rect, Tr_velo_to_cam);lidar_to_cam_extrisic is in column major orderFor more details on R0_rect and Tr_velo_to_cam, please check:lkk688/3DDepth[3X4] matrix in column major.lidar_input_keyThe keyname to use for lidar input from the input datamap buffer.DS3D::LidarXYZI+0lidar_aligned_keyThe keyname to use for lidar output newly added by alignment filter into the output datamap buffer.DS3D::LidarAlignedXYZIKeymax_pointsMaximum number of Lidar points in the input datamap at:{lidar_input_key: points}.2048000mem_pool_sizeAlignment filter maintains an internal pool.This is the pool size the user want to allocate.4align_to_intrinsicIf true:AL_TR_3 is done.If false:AL_TR_2 is done.Truelidar_element_sizeThe size of output aligned lidar data points.= 3 means XYZ
= 4 means XYZI (I is the intensity)
More detailshere.4Customds3d::datafilterlibrary:libnvds_3d_depth2point_datafilter.so#previousGst-nvdspostprocess (Alpha)nextGst-nvds3dbridgeOn this pageCustom library InterfacesInputs and OutputsConfiguration fileGst-nvds3dfilter properties SpecificationsSupported DS3D filter custom libsCustomds3d::datafilterlibrary:libnvds_3d_alignment_datafilter.soInputs and OutputsConfiguration fileConfiguration optionsCustomds3d::datafilterlibrary:libnvds_3d_depth2point_datafilter.soPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright Â© 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.