Implementing a Custom GStreamer Plugin with OpenCV Integration Example — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formImplementing...Implementing a Custom GStreamer Plugin with OpenCV Integration Example#The DeepStream SDK supports a mechanism to add third party or custom algorithms within the reference application by modifying the example plugin (gst-dsexample). The sources for the plugin are insources/gst-plugins/gst-dsexampledirectory in the SDK.
This plugin was written for GStreamer 1.14.1 but is compatible with newer versions of GStreamer. This plugin derives from theGstBaseTransformclass:https://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer-libs/html/GstBaseTransform.htmlNoteTo enable OpenCV functionalities, compiledsexampleplugin with flagWITH_OPENCV=1in the plugin Makefile.Description of the Sample Plugin: gst-dsexample#The GStreamer example plugin (gst-dsexample) demonstrates the following:Processing the entire frame, with downscaling / color conversion if required.Processing objects detected by the Primary Detector, specifically, cropping these objects from the frame and then processing the crops.In-place modification of the buffer frame contents using OpenCVTwo versions of the plugin are included. Refer to the plugin’sMakefileand README to switch between themSimple (gstdsexample.cpp) - Sequential pre-processing and processingOptimized (gstdsexample_optimized.cpp) - Parallel batch pre-processing and processingThis release includes a simple static librarydsexample_libthat demonstrates the interface between custom libraries and thisGstreamerplugin. The library generates simple labels of the formObj_label. The library implements these functions:DsExampleCtxInit — Initializes the custom libraryDsExampleCtxDeinit — De-initializes the custom libraryDsExampleProcess – Process on an input frameThe GStreamer plugin itself is a standard in-place transform plugin. Because it does not generate new buffers but only adds / updates existing metadata, the plugin implements an in-place transform. Some of the code is standard GStreamer plugin boilerplate (e.g.plugin_init,class_init,instance_init). Other functions of interest are as follows:GstBaseTransfrom Class Functions#start — Acquires resources, allocate memory, initialize example library.stop — De-initializes the example library and frees up resources and memory.set_caps — Gets the capabilities of the video (i.e. resolution, color format, framerate) that flow through this element. Allocations/initializations that depend on input video format can be done here.transform_ip — Implemented in the simple version. Called when the plugin receives a buffer from upstream element.Finds the metadata of the primary detector.Useget_converted_matto pre-process frame/object crop to get the required buffer for pushing to library. Push the data to the example library. Pop the example library output.Attach/update metadata usingattach_metadata_full_frameorattach_metadata_object.Alternatively, modify frame contents in-place to blur objects usingblur_objects.submit_input_buffer — Implemented in the optimized version. Called when the plugin receives a buffer from upstream element. Works in parallel withgst_dsexample_output_loopto improve performance.Finds the metadata of the primary detector.Create a batch of frames/objects to pre-process. Pre-process the batches and push the pre-processed output to the processing thread.Pre-process on the next batch while the processing thread works on an older batch.Other supporting functions#get_converted_mat — Scales, converts, or crops the input buffer, either the full frame or the object based on its co-ordinates in primary detector metadata.attach_metadata_full_frame — Shows how the plugin can attach its own metadata for objects detected by the plugin.attach_metadata_object — Shows how the plugin can update labels for objects detected by primary detector.blur_objects — Modify buffer frame contents in-place to blur objects using OpenCV GaussianBlur. When running on dGPU make sure that input memory type to plugin isNVBUF_MEM_CUDA_UNIFIED.gst_dsexample_output_loop — Works in parallel withsubmit_input_bufferto improve performance.Wait for pre-processing of a batch to finishProcess on the batch usingdsexample_libAPIsAttach the output using one ofattach_metadata\_*functionsNoteOn Jetson devices, custom GStreamer plugins must export the environment variable DS_NEW_BUFAPI and set its value to 1. Seegst_dsexample_class_init()for an example in a plugin (Gst-dsexample).Enabling and configuring the sample plugin#The pre-compiled deepstream-app binary already has the functionality to parse the configuration and add the sample element to the pipeline.
To enable and configure the plugin, add the following section to an existing configuration file (for example,source4_720p_dec_infer-resnet_tracker_sgie_tiled_display_int8.txt):[ds-example]enable=1processing-width=640processing-height=480full-frame=0blur-objects=0unique-id=15Using the sample plugin in a custom application/pipeline#The sample plugin can be used in agst-launchpipeline. The pipeline can also be constructed in a custom application.To construct a pipeline for running the plugin in full frame modeConstruct a pipeline for running the plugin in full frame mode with the following command.For Jetson:$gst-launch-1.0filesrclocation=<mp4-file>!qtdemux!h264parse!nvv4l2decoder!m.sink_0nvstreammuxname=mbatch-size=1width=1280height=720!nvvideoconvert!dsexamplefull-frame=1<other-properties>!nvdsosd!nv3dsinkFor Tesla:$gst-launch-1.0filesrclocation=<mp4-file>!qtdemux!h264parse!nvv4l2decoder!m.sink_0nvstreammuxname=mbatch-size=1width=1280height=720!nvvideoconvert!dsexamplefull-frame=1<other-properties>!nvdsosd!nveglglessinkTo construct a pipeline for running the plugin to process on objects detected by the primary modelConstruct a pipeline for running the plugin to process on objects detected by the primary model with the following command.For Jetson:$gst-launch-1.0filesrclocation=<mp4-file>!qtdemux!h264parse!nvv4l2decoder!m.sink_0nvstreammuxname=mbatch-size=1width=1280height=720!nvinferconfig-file-path=<primary-detector-config>!nvvideoconvert!dsexamplefull-frame=0<other-properties>!nvdsosd!nv3dsinkFor Tesla:$gst-launch-1.0filesrclocation=<mp4-file>!qtdemux!h264parse!nvv4l2decoder!m.sink_0nvstreammuxname=mbatch-size=1width=1280height=720!nvinferconfig-file-path=<primary-detector-config>!nvvideoconvert!dsexamplefull-frame=0<other-properties>!nvdsosd!nveglglessinkTo construct a pipeline for running the plugin to blur objects detected by the primary modelConstruct a pipeline for running the plugin to blur objects detected by the primary model with the following command:For Jetson:$ gst-launch-1.0 filesrc location= <mp4-file> ! qtdemux ! h264parse ! nvv4l2decoder ! m.sink_0 nvstreammux name=m batch-size=1 width=1280 height=720 ! nvinfer config-file-path= <primary-detector-config> ! nvvideoconvert ! 'video/x-raw(memory:NVMM), format=RGBA' ! dsexample full-frame=0 blur-objects=1 ! nvdsosd ! nv3dsinkFor Tesla:$ gst-launch-1.0 filesrc location= <mp4-file> ! qtdemux ! h264parse ! nvv4l2decoder ! m.sink_0 nvstreammux name=m batch-size=1 width=1280 height=720 ! nvinfer config-file-path= <primary-detector-config> ! nvvideoconvert nvbuf-memory-type= nvbuf-mem-cuda-unified  ! 'video/x-raw(memory:NVMM), format=RGBA' ! dsexample full-frame=0 blur-objects=1 ! nvdsosd ! nveglglessinkImplementing Custom Logic Within the Sample Plugin#To implement custom logic within the plugin, replace the following function calls list below with corresponding functions of any other custom library.DsExampleCtxInitDsExampleCtxDeinitDsExampleProcessblur_objectsDepending on the input requirements of the library,get_converted_matmay also require modification.Adding NVTX APIs for sample plugin#Like other DeepStreamSDK GStreamer plugins, NVTX APIs can be added in a custom plugin as well. More information on these APIs can be found inhttps://docs.nvidia.com/gameworks/content/gameworkslibrary/nvtx/nvidia_tools_extension_library_nvtx.htm. Follow the steps below to add NVTX APIs for custom plugin:Includenvtx3/nvToolsExt.hheader in the source code of plugin.To measure range, two APIs are commonly used:nvtxRangePushA(context)- Point at which profiling starts for this component / plugin.nvtxRangePop()- Point at which profiling stops for this component / plugin.Make sure the markers are placed such that the core functions of the plugin are performed between the above two APIs. This will give an accurate idea of latency.Run NSight for the custom plugin to obtain information for the tasks run between these two markers.Accessing NvBufSurface memory in OpenCV#CUDA and CPU memory inNvBufSurfacecan be accessed throughcv::cuda::GpuMatandcv::Matinterface of OpenCV respectively. In that case,NvBufSurfacecan work with any computer vision algorithm implemented in OpenCV.
Following code snippet shows how to access and use CUDA memory ofNvBufSurfacein OpenCV.cv::cuda::GpuMatgpuMat;constintaDstOrder[]={2,0,1,3};unsignedintindex=0;// Index of the buffer in the batch.unsignedintwidth,height;// set width and height of bufferNvBufSurface*input_buf;// Pointer to input NvBufSurfacegpuMat=cv::cuda::GpuMat(height,width,CV_8UC4,(void*)input_buf->surfaceList[index].dataPtr);ORgpuMat=cv::cuda::GpuMat(height,width,CV_8UC4,(void*)input_buf->surfaceList[index].dataPtr,input_buf->surfaceList[index].pitch);cv::cuda::swapChannels(gpuMat,aDstOrder);On Jetson platform, if memory ofNvBufSurfaceis of type NVBUF_MEM_SURFACE_ARRAY you should convert it to CUDA through CUDA-EGL interop before accessing it in OpenCV.
Refer tosources/gst-plugins/gst-dsexample/gstdsexample.cppto access theNvBufSurfacememory in OpenCV matrix (cv::Mat).
Below steps are required:Create EGL image from NvBufSurface using NvBufSurfaceMapEglImage()Register EGL image in cuda using cuGraphicsEGLRegisterImage()Map EGL frame using cuGraphicsResourceGetMappedEglFrame() to get cuda pointerRefer to gst_nvinfer_allocator_alloc in file/opt/nvidia/deepstream/deepstream/sources/gst-plugins/gst-nvinfer/gstnvinfer_allocator.cppfor more details.previousSample Configurations and StreamsnextTAO Toolkit Integration with DeepStreamOn this pageDescription of the Sample Plugin: gst-dsexampleGstBaseTransfrom Class FunctionsOther supporting functionsEnabling and configuring the sample pluginUsing the sample plugin in a custom application/pipelineImplementing Custom Logic Within the Sample PluginAdding NVTX APIs for sample pluginAccessing NvBufSurface memory in OpenCVPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.