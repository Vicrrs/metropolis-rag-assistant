Gst-nvstreamdemux — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGStreamer Plugin OverviewGst-nvstreamdemuxGst-nvstreamdemux#The Gst-nvstreamdemux plugin demuxes batched frames into individual buffers. It creates a separate Gst Buffer for each frame in the batch. It does not copy the video frames. Each Gst Buffer contains a pointer to the corresponding frame in the batch.
The plugin pushes the unbatched Gst Buffer objects downstream on the pad corresponding to each frame’s source. The plugin gets this information through the NvDsBatchMeta attached by Gst-nvstreammux. The original buffer timestamps (PTS) of individual frames are also attached back to the Gst Buffer.
Since there is no frame copy, the input Gst Buffer is not returned upstream immediately. When all of the non-batched Gst Buffer objects demuxed from an input batched Gst Buffer are returned to the demuxer by the downstream component, the input batched Gst Buffer is returned upstream.
The demuxer does not scale the buffer back to the source’s original resolution even if Gst-nvstreammux has scaled the buffers.Inputs and Outputs#InputsGst Buffer (batched)NvDsBatchMetaOther metaControl parametersNoneOutputGst Buffer (non-batched, single source)Meta related to each Gst Buffer sourceThis plugin can be tested with the following pipelines:Use case 1#Two video sources are mux’ed together using nvstreammux.The muxer’s output goes to nvinfer which is configured withbatch-size=2.After nvinfer, we use nvstreamdemux to display the contents of video source 0, and 1 along with inference output for each overlaid using nvdsosd plugin on two separate windows.Pipeline (x86):gst-launch-1.0-envstreammuxname=muxbatch-size=2width=1920height=1080!nvinferconfig-file-path=/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txtbatch-size=2!nvstreamdemuxname=demuxfilesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4!qtdemux!h264parse!nvv4l2decoder!queue!mux.sink_0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_1demux.src_0!"video/x-raw(memory:NVMM), format=NV12"!queue!nvvideoconvert!"video/x-raw(memory:NVMM), format=RGBA"!nvdsosd!nvvideoconvert!nveglglessinkdemux.src_1!queue!"video/x-raw(memory:NVMM), format=NV12"!queue!nvvideoconvert!"video/x-raw(memory:NVMM), format=RGBA"!nvdsosd!nveglglessinkPipeline (Jetson):gst-launch-1.0-envstreammuxname=muxbatch-size=2width=1920height=1080!nvinferconfig-file-path=/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txtbatch-size=2!nvstreamdemuxname=demuxfilesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_1080p_h264.mp4!qtdemux!h264parse!nvv4l2decoder!queue!mux.sink_0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_1demux.src_0!"video/x-raw(memory:NVMM), format=NV12"!queue!nvvideoconvert!"video/x-raw(memory:NVMM), format=RGBA"!nvdsosd!nvvideoconvert!nv3dsinkdemux.src_1!queue!"video/x-raw(memory:NVMM), format=NV12"!queue!nvvideoconvert!"video/x-raw(memory:NVMM), format=RGBA"!nv3dsinkUse case 2#Two video sources are mux’ed together using nvstreammux.The muxer’s output goes to nvinfer which is configured withbatch-size=2.After nvinfer, we use nvstreamdemux to write the contents of video source 0 along with inference output overlaid using nvdsosd plugin to a file.The contents of video source 1 post demux is directly displayed on screen using nveglglessink pluginPipeline (x86):gst-launch-1.0-envstreammuxname=muxbatch-size=2width=1920height=1080!nvinferconfig-file-path=/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txtbatch-size=2!nvstreamdemuxname=demuxfilesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_1demux.src_0!"video/x-raw(memory:NVMM), format=NV12"!queue!nvvideoconvert!"video/x-raw(memory:NVMM), format=RGBA"!nvdsosd!nvvideoconvert!nvv4l2h264enc!h264parse!qtmux!filesinklocation=./out.mp4demux.src_1!queue!nveglglessinkPipeline (Jetson):gst-launch-1.0-envstreammuxname=muxbatch-size=2width=1920height=1080!nvinferconfig-file-path=/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txtbatch-size=2!nvstreamdemuxname=demuxfilesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_1demux.src_0!"video/x-raw(memory:NVMM), format=NV12"!queue!nvvideoconvert!"video/x-raw(memory:NVMM), format=RGBA"!nvdsosd!nvvideoconvert!nvv4l2h264enc!h264parse!qtmux!filesinklocation=./out.mp4demux.src_1!queue!nv3dsinkUse case 3#Use case 3 demonstrates displaying both streams as it is in two separate windows.Two video sources are mux’ed together using nvstreammux.The muxer’s output goes to nvinfer which is configured withbatch-size=2.After nvinfer, we use nvstreamdemux to display the contents of video source 0, and 1 on two separate windows.Pipeline (x86):gst-launch-1.0-envstreammuxname=muxbatch-size=2width=1920height=1080!nvinferconfig-file-path=/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txtbatch-size=2!nvstreamdemuxname=demuxfilesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_1demux.src_0!queue!nvvideoconvert!nveglglessinkdemux.src_1!queue!nveglglessinkPipeline (Jetson):gst-launch-1.0-envstreammuxname=muxbatch-size=2width=1920height=1080!nvinferconfig-file-path=/opt/nvidia/deepstream/deepstream/samples/configs/deepstream-app/config_infer_primary.txtbatch-size=2!nvstreamdemuxname=demuxfilesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_0filesrclocation=/opt/nvidia/deepstream/deepstream/samples/streams/sample_720p.h264!h264parse!nvv4l2decoder!queue!mux.sink_1demux.src_0!queue!nv3dsinkdemux.src_1!queue!nv3dsinkpreviousGst-nvstreammux NewnextGst-nvmultistreamtilerOn this pageInputs and OutputsUse case 1Use case 2Use case 3Privacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.