Registry Command Line Interface — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formRegistry...Registry Command Line Interface#The Registry command line interface (CLI) can be invoked byregistrycommand with the following options:registry –help
registry --version
registry command [args]Where-h/--helpbrings up the help options and exit-v/--versionprints the version and exits.The sections below provide details about the command options that can be used with theregistry.cache#This command is used to interact with the cache content.Command syntaxregistrycache[args]Optional arguments:-h/--help- Print help and exit.-s/--set<new_cache_path>- Set an absolute path where the cache must be located.-c/--clean- Clean the cache.-r/--refresh- Refresh the cache.-v/--view- View the cache location.repo#This command is used to interact with the repositories.Command syntaxregistryrepo[args]Optional arguments:-h/--help- Print help and exit.repo clean#This command is used to clean the default repository.Command syntaxregistryrepoclean[args]Optional arguments:-h/--help- Print help and exit.repo list#This command is used to list repositories.Command syntax:registryrepolist[args]Optional arguments:-h/--help- Print help and exit.-d/--details- Provide details about repositories.repo info#This command is used to provide information about a repository.Command syntax:registryrepoinfo[args]Required arguments:-n/--name<repository_name>- Provide details a repository.Optional arguments:-h/--help- Print help and exit.repo sync#This command is used to synchronize a repository. Also synchronizes each extension of the provided repository to the cache.Command syntax:registryreposync[args]Required arguments:-n/--name<repository_name>- Set the name of repository to be used.Optional arguments:-h/--help- Print help and exit.extn#An extension references headers, shared libraries, binary files and data
files. It is referenced byuuid(Universally unique identifier), a name
and a version. It can depend on other extensions for which their name,uuidand version must be specified. Also, an extension contains a list of
components. An extension can be implemented for several targets with
differences in architecture, operating system, distribution and CUDA
version. Each one of these combinations is called a variant.Each extension has an interface, this interface is composed of anextension.yamlfile along with optional header files. These files
are common for all variants of that extension.Each extension contains a list of components. A component contains atypename,
atype_id, a basetypename, a description and abooleantelling if the
component is abstract.Command syntax:registryextn[args]Optional arguments:-h/--help- Print help and exit.extn add#This command is used to add an extension.Command syntax:registryextnadd[args]Required arguments:-m/--manifest-name<manifest_name>- Set a manifest path.Optional arguments:-h/--help- Print help and exit.Here is an example of<manifest_name>argument:name:cudaextension_library:libgxf_cuda.souuid:d63a98fa-7882-11eb-a917-b38f664f399cversion:2.5.0license_file:gxf/cuda/LICENSEurl:www.nvidia.comgit_repository:nulllabels:-gxfpriority:1platform:arch:x86_64os:linuxdistribution:ubuntu_22.04compute:cuda:12.6tensorrt:nullcudnn:nulldeepstream:nulltriton:nullvpi:nulldependencies:-extension:stduuid:8ec2d5d6-b5df-48bf-8dee-0252606fdd7eversion:2.5.0manifest:std/register_std_ext_manifest.yamlheaders:-cuda_common.hpp-cuda_event.hpp-cuda_stream.hpp-cuda_stream_id.hpp-cuda_stream_pool.hppbinaries:[]python_alias:cudanamespace:gxfpython_bindings:-gxf/cuda/cuda_pybind.sopython_sources:-__init__.py-Components.pydata:[]extn sync#This command is used to synchronize an extension.Command syntax:registryextnsync[args]Required arguments:-r/--repo-name<repository_name>- Set a repository name.-e/--extension-name<extension_name>- Set an extension name.-s/--select-version<extension_version>- Select a version.Optional arguments:-h/--help- Print help and exit.extn import#This command is used to import extension packages from NGC. A specific version of an extension contains an interface and multiple variants.Interface Command syntax:registryextnimportinterface[args]Required arguments:-d/--output-directory<directory>- Select an output directory.-s/--select-version<extension_version>- Select an extension version.-n/--extn-name<extension_name>- Select an extension name.Optional arguments:-h/--help- Print help and exit.Variant Command syntax: ::registry extn import variant [args]Required arguments:
*-d/--output-directory<directory>- Select an output directory.
*-s/--select-version<extension_version>- Select an extension version.
*-n/--extn-name<extension_name>- Select an extension name.
*-a/--arch<architecture>- Set an architecture.
*-f/--distro<distribution>- Set a distribution.
*-o/--os<os>- Select an operating system.Optional arguments:--cuda<cuda>- Select a CUDA version.--cudnn<cudnn>- Select a CUDNN version--tensorrt<tensorrt>- Select a TensorRT version.--deepstream<deepstream>- Select a DeepStream version--triton<triton>- Select a Triton version.--vpi<vpi>- Select a VPI version.-h/--help- Print help and exit.Supported values for the required arguments:ArgumentsSupportedDefaultArchitectureaarch64, x86_64, sbsax86_64Distributionubuntu_22.04ubuntu_22.04Operating Systemlinuxlinuxextn list#This command is used to list extensions. Once extensions are present in cache,
it is possible to list them and obtain details about them. Also, it is possible
to filter extensions to display only the ones matching some characteristics.
The filtering is optional.Command syntax:registryextnlist[args]Optional arguments:-h/--help- Print help and exit.-r/--repo-name<repository_name>- Select a repository name.-n/--name<extension_name>- Select an extension name.-a/--author<extension_author>- Select an author.-l/--labels<label1>[<label2>...]- Select one or multiple labels.extn info#This command is used to provide information about an extension.Command syntax:registryextninfo[args]Required arguments:-n/--extn-name<extension_name>- Select an extension name.Optional arguments:-h/--help- Print help and exit.extn versions#This command is used to display versions of an extension.Command syntax:registryextnversions[args]Required arguments:-n/--name<extension_name>- Select an extension name.Optional arguments:-h/--help- Print help and exit.-r/--repo-name<repository_name>- Select a repository name.extn variants#This command is used to display variants of an extension.Command syntax:registryextnvariants[args]Required arguments:-n/--name<extension_name>- Select an extension name.-v/--version<version>- Select an extension version.Optional arguments:-h/--help- Print help and exit.extn dependencies#This command is used to display all dependencies of an extension.Command syntax:registryextndependencies[args]Required arguments:-n/--name<extension_name>- Select an extension name.-s/--select-version<extension_version>- Select an extension version.Optional arguments:-h/--help- Print help and exit.comp#This command is used to interact with components. Each component contains a
list of parameters. A parameter contains a key, a headline, a description,
agxf_parameter_type, a default value, a handle type and flags.Command syntax:registrycomp[args]Optional arguments:-h/--help- Print help and exit.comp list#This command is used to list components. Filters are available as it is the case for components.Command syntax:registrycomplist[args]Optional arguments:-h/--help- Print help and exit.-b/--base-type<base_type>- Select a base type.-r/--repo-name<repository_name>- Select a repository name.-t/--typename<typename>- Select a typename.comp info#This command is used to provide information about a component.Command syntax:registrycompinfo[args]Required arguments:-t/--type<component_type>- Select a component type.Optional arguments:-h/--help- Print help and exit.graph#This command is used to interact with the graph.Command syntax:registrygraph[args]Optional arguments:-h/--help- Print help and exit.graph install#This command is used to install graph and generate a manifest with the list of
extensions needed to execute the graph and in the order in which they must be
loaded. Also generates an archive of the extensions and their files
corresponding to the variant arguments specified using the target file.
For every extension used in the graph, the registry will choose the closest matching variant
from its cache and create the archive. The variant chosen by the registry will be specified in the
output manifest file. Generated archive can also be unpacked locally into a
directory specified by--archive-dir-path.Command syntax:registrygraphinstall[args]Required arguments:-g/--graph-file<graph_file>- Set the graph file to be used.-d/--target-file-path<target_file_path>- Set the target file path-m/--manifest-file-path<manifest_file_path>- Set the manifest file path.Optional arguments:-h/--help- Print help and exit.-u/--output-directory<output_directory>- Set the output directory.-r/--archive-dir-path<archive_directory_path>- Set the archive directory path.-i/--in-export-dir-path<in_export_dirpath>- Set the export directory path.Sample Target File:platform:arch:x86_64os:linuxdistribution:ubuntu_22.04compute:cuda:12.6cudnn:9.3.0tensorrt:10.3.0deepstream:7.1triton:2.49.0vpi:2.3.1previousRegistrynextComposerOn this pagecachereporepo cleanrepo listrepo inforepo syncextnextn addextn syncextn importextn listextn infoextn versionsextn variantsextn dependenciescompcomp listcomp infographgraph installPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.