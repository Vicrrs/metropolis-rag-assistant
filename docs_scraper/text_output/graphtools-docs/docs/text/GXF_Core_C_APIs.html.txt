GXF Core C APIs — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGXF Core C APIsGXF Core C APIs#Context#Create context#typegxf_context_t#Type for context handle.Defined asvoid*.kNullContext#An invalid context.Defined asnullptr.kGxfCoreVersion#GXF Core VersionDefined as4.1.0.enumgxf_result_t#An enumeration type representing GXF error and result codes.enumeratorGXF_SUCCESS#Operation was successful.enumeratorGXF_FAILURE#Operation failed.enumeratorGXF_NOT_IMPLEMENTED#Feature is not implemented.enumeratorGXF_FILE_NOT_FOUND#File was not found.enumeratorGXF_INVALID_ENUM#Invalid enumeration value.enumeratorGXF_NULL_POINTER#Null pointer was passed.enumeratorGXF_UNINITIALIZED_VALUE#Value was not initialized.enumeratorGXF_ARGUMENT_NULL#Argument is null.enumeratorGXF_ARGUMENT_OUT_OF_RANGE#Argument is out of range.enumeratorGXF_ARGUMENT_INVALID#Invalid argument.enumeratorGXF_OUT_OF_MEMORY#Out of memory.enumeratorGXF_MEMORY_INVALID_STORAGE_MODE#Invalid memory storage mode.enumeratorGXF_CONTEXT_INVALID#Invalid context.enumeratorGXF_EXTENSION_NOT_FOUND#Extension was not found.enumeratorGXF_EXTENSION_FILE_NOT_FOUND#Extension file was not found.enumeratorGXF_EXTENSION_NO_FACTORY#Extension has no factory.enumeratorGXF_FACTORY_TOO_MANY_COMPONENTS#Too many components in factory.enumeratorGXF_FACTORY_DUPLICATE_TID#Duplicate type ID in a factory.enumeratorGXF_FACTORY_UNKNOWN_TID#Unknown type ID in a factory.enumeratorGXF_FACTORY_ABSTRACT_CLASS#Factory abstract class.enumeratorGXF_FACTORY_UNKNOWN_CLASS_NAME#Unknown class name in factory.enumeratorGXF_FACTORY_INVALID_INFO#Invalid factory info.enumeratorGXF_FACTORY_INCOMPATIBLE#Factory is incompatible.enumeratorGXF_ENTITY_NOT_FOUND#Entity was not found.enumeratorGXF_ENTITY_NAME_EXCEEDS_LIMIT#Entity name string exceeds specified limit.enumeratorGXF_ENTITY_COMPONENT_NOT_FOUND#Entity component was not found.enumeratorGXF_ENTITY_CAN_NOT_ADD_COMPONENT_AFTER_INITIALIZATION#Cannot add component to entity after initialization.enumeratorGXF_ENTITY_CAN_NOT_REMOVE_COMPONENT_AFTER_INITIALIZATION#Cannot remove component from entity after initialization.enumeratorGXF_ENTITY_MAX_COMPONENTS_LIMIT_EXCEEDED#Maximum limit of number of components in an entity exceededenumeratorGXF_PARAMETER_NOT_FOUND#Parameter was not found.enumeratorGXF_PARAMETER_ALREADY_REGISTERED#Parameter is already registered.enumeratorGXF_PARAMETER_INVALID_TYPE#Invalid parameter type.enumeratorGXF_PARAMETER_OUT_OF_RANGE#Parameter is out of range.enumeratorGXF_PARAMETER_NOT_INITIALIZED#Parameter is not initialized.enumeratorGXF_PARAMETER_CAN_NOT_MODIFY_CONSTANT#Cannot modify constant parameter.enumeratorGXF_PARAMETER_PARSER_ERROR#Parameter parser error.enumeratorGXF_PARAMETER_NOT_NUMERIC#Parameter is not numeric.enumeratorGXF_PARAMETER_MANDATORY_NOT_SET#Mandatory parameter is not set.enumeratorGXF_CONTRACT_INVALID_SEQUENCE#Invalid contract sequence.enumeratorGXF_CONTRACT_PARAMETER_NOT_SET#Contract parameter is not set.enumeratorGXF_CONTRACT_MESSAGE_NOT_AVAILABLE#Contract message is not available.enumeratorGXF_INVALID_LIFECYCLE_STAGE#Invalid lifecycle stage.enumeratorGXF_INVALID_EXECUTION_SEQUENCE#Invalid execution sequence.enumeratorGXF_REF_COUNT_NEGATIVE#Reference count is negative.enumeratorGXF_RESULT_ARRAY_TOO_SMALL#Result array is too small.enumeratorGXF_INVALID_DATA_FORMAT#Invalid data format.enumeratorGXF_EXCEEDING_PREALLOCATED_SIZE#Exceeding preallocated size.enumeratorGXF_QUERY_NOT_ENOUGH_CAPACITY#Query does not have enough capacity.enumeratorGXF_QUERY_NOT_APPLICABLE#Query is not applicable.enumeratorGXF_QUERY_NOT_FOUND#Query was not found.enumeratorGXF_NOT_FINISHED#Operation is not finished.enumeratorGXF_HTTP_GET_FAILURE#HTTP GET request failed.enumeratorGXF_HTTP_POST_FAILURE#HTTP POST request failed.enumeratorGXF_ENTITY_GROUP_NOT_FOUND#Entity group was not found.enumeratorGXF_RESOURCE_NOT_INITIALIZED#Resource is not initialized.enumeratorGXF_RESOURCE_NOT_FOUND#Resource was not found.enumeratorGXF_CONNECTION_BROKEN#Connection is broken.enumeratorGXF_CONNECTION_ATTEMPTS_EXCEEDED#Connection attempts exceeded.enumeratorGXF_IPC_CONNECTION_FAILURE#IPC connection failure.enumeratorGXF_IPC_CALL_FAILURE#IPC call failure.enumeratorGXF_IPC_SERVICE_NOT_FOUND#IPC service was not found.gxf_result_tGxfContextCreate(gxf_context_t*context);#Creates a new GXF contextA GXF context is required for all almost all GXF operations. The context must be destroyed with
‘GxfContextDestroy’. Multiple contexts can be created in the same process, however they can not
communicate with each other.Parameters:context– The new GXF context is written to the given pointer.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Create a context from a shared context#gxf_result_tGxfContextCreateShared(gxf_context_tshared,gxf_context_t*context,);#Creates a new runtime context from shared context.A shared runtime context is used for sharing entities between graphs running within the same process.Parameters:shared– A valid GXF shared context.context– The new GXF context is written to the given pointerReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get a shared context from a context#gxf_result_tGxfGetSharedContext(gxf_context_tcontext,gxf_context_t*shared,);#Get a shared context from an existing runtime context.Parameters:context– A valid GXF shared context.shared– The shared context.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Destroy context#gxf_result_tGxfContextDestroy(gxf_context_tcontext);#Destroys a GXF contextEvery GXF context must be destroyed by calling this function. The context must have been
previously created with ‘GxfContextCreate’. This will also destroy all entities and components
which were created as part of the context.Parameters:context– A valid GXF context.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Extensions#kMaxExtensions#Maximum number of extensions in a context.Defined as 1024.GxfLoadExtensionsInfo#typeGxfLoadExtensionsInfo#A structure specifying parameters for loading extensions.constchar*const*extension_filenames#Optional list of extension filenames to load.uint32_textension_filenames_count#The number of extensions to load.constchar*const*manifest_filenames#Optional list of manifest filenames to load.uint32_tmanifest_filenames_count#The number of manifests to load.constchar*base_directory#An optional base directory which is prepended to all extensions filenames, including those loaded via manifests.Load Extension libraries#gxf_result_tGxfLoadExtensions(gxf_context_tcontext,constGxfLoadExtensionsInfo*info,);#Loads GXF extension librariesLoads one or more extensions either directly by their filename or indirectly by loading manifest files. Before a component can be added to a GXF entity the GXF extension shared library providing the component must be loaded. An extensions must only be loaded once.To simplify loading multiple extensions at once the developer can create a manifest file which lists all extensions he needs. This function will then load all extensions listed in the manifest file. Multiple manifest may be loaded, however each extensions may still be loaded only a single time.A manifest file is a YAML file with a single top-level entry ‘extensions’ followed by a
list of filenames of GXF extension shared libraries.Example:
—–  START OF FILE  —–
extensions:
- gxf/std/libgxf_std.so
- gxf/npp/libgxf_npp.so
—–   END OF FILE   —–Parameters:context– A valid GXF contextfilename– A valid filename.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Load Extension from a pointer#gxf_result_tGxfLoadExtensionFromPointer(gxf_context_tcontext,void*extension_ptr,);#Loads an extension from a pointer to the Extension object.Parameters:context– A valid GXF contextextension_ptr– A pointer to ExtensionReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Load Metadata files#gxf_result_tGxfLoadExtensionMetadataFiles(gxf_context_tcontext,constchar*const*filenames,uint32_tcount,);#Loads a metadata file generated by the gxf_registryThe gxf_registry tool generates a metadata file of the contents of an extension during registration. These metadata files can be used to resolve typename and TID’s of components for other extensions which depend on them. metadata files do not contain the actual implementation of the extension and must be loaded only to run the extension query API’s on extension libraries which have the actual implementation and only depend on the metadata for type
resolution.If some components of extension B depend on some components in extension A:
- Load metadata file for extension A
- Load extension library for extension B using ‘GxfLoadExtensions’
- Run extension query api’s on extension B and it’s components.Parameters:context– A valid GXF context.filenames– absolute paths of metadata files generated by the registry during extension registrationcount– The number of metadata files to be loadedReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Register component#gxf_result_tGxfRegisterComponent(gxf_context_tcontext,gxf_tid_ttid,constchar*name,constchar*base_name,);#Registers a component with a GXF extensionA GXF extension need to register all of its components in the extension factory function. For
convenience the helper macros in gxf/std/extension_factory_helper.hpp can be used.The developer must choose a unique GXF tid with two random 64-bit integers. The developer
must ensure that every GXF component has a unique tid. The name of the component must be
the fully qualified C++ type name of the component. A component may only have a single base
class and that base class must be specified with its fully qualified C++ type name as the
parameter ‘base_name’.ref: gxf/std/extension_factory_helper.hpp
ref: core/type_name.hppParameters:context– A valid GXF contexttid– The chosen GXF tidname– The type name of the componentbase_name– The type name of the base class of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Register a component during runtime#gxf_result_tGxfRegisterComponentInExtension(gxf_context_tcontext,gxf_tid_tcomponent_tid,gxf_tid_textension_tid,);#Registers a new component from an extension during runtimeOnce an extension is loaded any newly added components to that extension can be registered
with the context using this functionParameters:context– A valid GXF contextcomponent_tid– The valid GXF tid of a unregistered new componentextension_tid– The valid GXF tid of an extension which has already been loadedReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Graph Execution#Loads a list of entities from YAML file#gxf_result_tGxfGraphLoadFile(gxf_context_tcontext,constchar*filename,constchar*parameters_override[],constuint32_tnum_overrides,);#Parameters:context– A valid GXF contextfilename– A valid YAML filename.params_override– An optional array of strings used for override parameters in yaml file.num_overrides– Number of optional override parameter strings.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Set the root folder for searching YAML files during loading#gxf_result_tGxfGraphSetRootPath(gxf_context_tcontext,constchar*path,);#Parameters:context– A valid GXF contextpath– Path to root folder for searching YAML files during loadingReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Loads a list of entities from YAML text#gxf_result_tGxfGraphParseString(gxf_context_tcontext,constchar*tex,constchar*parameters_override[],constuint32_tnum_overrides,);#Parameters:context– A valid GXF contexttext– A valid YAML text.params_override– An optional array of strings used for override parameters in yaml file.num_overrides– Number of optional override parameter strings.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Activate all system components#gxf_result_tGxfGraphActivate(gxf_context_tcontext);#Parameters:context– A valid GXF contextReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Deactivate all System components#gxf_result_tGxfGraphDeactivate(gxf_context_tcontext);#Parameters:context– A valid GXF contextReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Starts the execution of the graph asynchronously#gxf_result_tGxfGraphRunAsync(gxf_context_tcontext);#Parameters:context– A valid GXF contextReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Interrupt the execution of the graph#gxf_result_tGxfGraphInterrupt(gxf_context_tcontext);#Parameters:context– A valid GXF contextReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Waits for the graph to complete execution#gxf_result_tGxfGraphWait(gxf_context_tcontext);#Parameters:context– A valid GXF contextReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.`Runs all System components and waits for their completion#gxf_result_tGxfGraphRun(gxf_context_tcontext);#Parameters:context– A valid GXF contextReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Entities#typegxf_uid_t#Type of unique GXF object identifiers (UID/uid).Uids are used to reference entities and components throughout the GXF API.Defined asint64_t.kNullUid#A GXF UID which can be used to indicate an invalid or unused GXF UID.Defined as 0L.kUnspecifiedUid#A GXF UID which can be used to indicate an unspecified component during
graph load operation. This component should be updated in a subsequent
graph/parameters file. Failing to do so will result in an error during graph activation.Defined as -1L.typegxf_tid_t#Type of unique GXF type identifier (TID/tid)Tids are used to uniquely identify the type of a component, instead of for example using a string with the type name.uint64_thash1#The first part of the hash.uint64_thash2#The second part of the hash.kMaxEntities#Maximum number of entities in a context.Defined as 1024.enumgxf_entity_status_t#An enumeration representing various lifecycle states of an entity.enumeratorGXF_ENTITY_STATUS_NOT_STARTED#Entity has not started.enumeratorGXF_ENTITY_STATUS_START_PENDING#Entity start is pending.enumeratorGXF_ENTITY_STATUS_STARTED#Entity has started.enumeratorGXF_ENTITY_STATUS_TICK_PENDING#Entity tick is pending.enumeratorGXF_ENTITY_STATUS_TICKING#Entity is ticking.enumeratorGXF_ENTITY_STATUS_IDLE#Entity is idle.enumeratorGXF_ENTITY_STATUS_STOP_PENDING#Entity stop is pending.enumeratorGXF_ENTITY_MAX#Entity maxtypeGxfFlags#GXF bitmasks.Defined as uint32_t.typeGxfEntityCreateFlags#Bitmask ofGxfEntityCreateFlagBits.typeGxfEntityCreateFlagBits#Bitmask specifying storage mode for an entity.typeGXF_ENTITY_CREATE_PROGRAM_BIT#specifies that the entity will be added to the program entities.
Program entities are kept alive for the duration of the program.
They are activated automatically when the program is activated and deactivated when the program is deactivated.
If the program was already activated when the entity is created the entity must still be activated manually.typeGxfEntityCreateInfo#A structure specifying parameters for creating entities.constchar*entity_name#the name of the entity which is created.
If this is a nullptr an undefined unique name is chosen.
The name must not start with a double underscore.GxfEntityCreateFlagsflags#Bitmask of GxfEntityCreateFlagsBits indicating storage method and usage behavior for the created entity.Create an entity#gxf_result_tGxfCreateEntity(gxf_context_tcontext,constGxfEntityCreateInfo*info,gxf_uid_t*eid,);#Create a new GXF entity.Entities are light-weight containers to hold components and form the basic building blocks of a GXF application. Entities are created when a GXF file is loaded, or they can be created manually using this function. Entities created with this function must be destroyed using ‘GxfEntityDestroy’. After the entity was created components can be added to it with ‘GxfComponentAdd’. To start execution of codelets on an entity the entity needs to be activated first. This can happen automatically using ‘GXF_ENTITY_CREATE_PROGRAM_BIT’ or
manually using ‘GxfEntityActivate’.Parameters:context– GXF context that creates the entity.info– pointer to a GxfEntityCreateInfo structure containing parameters affecting the creation of the entity.eid– pointer to a gxf_uid_t handle in which the resulting entity is returned.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.gxf_result_tGxfCreateEntityAndGetItem(gxf_context_tcontext,constGxfEntityCreateInfo*info,gxf_uid_t*eid,void**item_ptr,);#Create a new GXF entity and return the entity item ptrEntities are light-weight containers to hold components and form the basic building blocks of a GXF application. Entities are created when a
GXF file is loaded, or they can be created manually using this function. Entities created with this function must be destroyed using ‘GxfEntityDestroy’.
After the entity was created components can be added to it with ‘GxfComponentAdd’. To start execution of codelets on an entity the entity needs to be
activated first. This can happen automatically using ‘GXF_ENTITY_CREATE_PROGRAM_BIT’ or manually using ‘GxfEntityActivate’.
This function also returns the pointer entity item which can be used to create C++ nvidia::gxf::Entity type objects.Parameters:context– is the GXF context that creates the entity.info– is a pointer to a GxfEntityCreateInfo structure containing parameters affecting the creation of the entity.eid– is a pointer to a gxf_uid_t handle in which the resulting entity is returned.item_ptr– is a pointer to pointer to entity item which is createdReturns:On success the function returns GXF_SUCCESS.Activate an entity#gxf_result_tGxfEntityActivate(gxf_context_tcontext,gxf_uid_teid);#Activates a previously created and inactive entityActivating an entity generally marks the official start of its lifetime and has multiple
implications:
- If mandatory parameters, i.e. parameter which do not hav the flag “optional”, are not set
the operation will fail.All components on the entity are initialized.All codelets on the entity are scheduled for execution. The scheduler will start calling
start, tick and stop functions as specified by scheduling terms.After activation trying to change a dynamic parameters will result in a failure.Adding or removing components of an entity after activation will result in a failure.Parameters:context– A valid GXF contexteid– UID of a valid entityReturns:GXF error codeDeactivate an entity#gxf_result_tGxfEntityDeactivate(gxf_context_tcontext,gxf_uid_teid,);#Deactivates a previously activated entityDeactivating an entity generally marks the official end of its lifetime and has multiple
implications:All codelets are removed from the schedule. Already running entities are run to completion.All components on the entity are deinitialized.Components can be added or removed again once the entity was deactivated.Mandatory and non-dynamic parameters can be changed again.Note: In case that the entity is currently executing this function will wait and block untilthe current execution is finished.Parameters:context– A valid GXF contexteid– UID of a valid entityReturns:GXF error codeDestroy an entity#gxf_result_tGxfEntityDestroy(gxf_context_tcontext,gxf_uid_teid);#Destroys a previously created entityDestroys an entity immediately. The entity is destroyed even if the reference count has not
yet reached 0. If the entity is active it is deactivated first.Note: This function can block for the same reasons as ‘GxfEntityDeactivate’.Parameters:context– A valid GXF contexteid– The returned UID of the created entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Find an entity#gxf_result_tGxfEntityFind(gxf_context_tcontext,constchar*name,gxf_uid_t*eid,);#Finds an entity by its nameParameters:context– A valid GXF contextname– A C string with the name of the entity. Ownership is not transferred.eid– The returned UID of the entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Find all entities#gxf_result_tGxfEntityFindAll(gxf_context_tcontext,uint64_t*num_entities,gxf_uid_t*entities,);#Finds all entities in the current applicationFinds and returns all entity ids for the current application. If more thanmax_entitiesexist
onlymax_entitieswill be returned. The order and selection of entities returned is abritrary.Parameters:context– A valid GXF contextnum_entities– In/Out: the max number of entities that can fit in the buffer/the number of entities that exist in the applicationentities– A buffer allocated by the caller for returned UIDs of all entities, with capacity fornum_entities.Returns:GXF_SUCCESS if the operation was successful, GXF_QUERY_NOT_ENOUGH_CAPACITY if more entites exist in the application thanmax_entities, or otherwise one of the GXF error codes.Increase reference count of an entity#gxf_result_tGxfEntityRefCountInc(gxf_context_tcontext,gxf_uid_teid,);#Increases the reference count for an entity by 1.By default reference counting is disabled for an entity. This means that entities created with
‘GxfEntityCreate’ are not automatically destroyed. If this function is called for an entity
with disabled reference count, reference counting is enabled and the reference count is set to
1. Once reference counting is enabled an entity will be automatically destroyed if the reference
count reaches zero, or if ‘GxfEntityCreate’ is called explicitely.Parameters:context– A valid GXF contexteid– The UID of a valid entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Decrease reference count of an entity#gxf_result_tGxfEntityRefCountDec(gxf_context_tcontext,gxf_uid_teid,);#Decreases the reference count for an entity by 1.See ‘GxfEntityRefCountInc’ for more details on reference counting.Parameters:context– A valid GXF contexteid– The UID of a valid entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get the reference count of an entity#gxf_result_tGxfEntityGetRefCount(gxf_context_tcontext,gxf_uid_teid,int64_t*count,);#Provides the reference count for an entity.See ‘GxfEntityRefCountInc’ for more details on reference counting.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of a valid entitycount– The reference count of a valid entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get status of an entity#gxf_result_tGxfEntityGetStatus(gxf_context_tcontext,gxf_uid_teid,gxf_entity_status_t*entity_status,);#Gets the status of the entity.See ‘gxf_entity_status_t’ for the various status.Parameters:context– A valid GXF contexteid– The UID of a valid entityentity_status– output; status of an entity eidReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.constchar*GxfEntityStatusStr(gxf_entity_status_tstatus);#Gets a string describing an GXF entity status.The caller does not get ownership of the return C string and must not delete it.Parameters:status– A GXF entity statusReturns:A pointer to a C string with the entity status description.Gets the name of the entity#gxf_result_tGxfEntityGetName(gxf_context_tcontext,gxf_uid_teid,constchar**entity_name,);#Parameters:context– A valid GXF contexteid– The unique object ID (UID) of a valid entityentity_name– output; name of the entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get state of an entity#enumentity_state_t#An enumeration used by behavior parent codelet in Behavior Tree denoting the result ofcodelet::tick().enumeratorGXF_BEHAVIOR_INIT#For codelet that have not yet started running.enumeratorGXF_BEHAVIOR_SUCCESS#For codelet that terminates with success after ticking.enumeratorGXF_BEHAVIOR_RUNNING#For codelet that needs multiple ticks to complete.enumeratorGXF_BEHAVIOR_FAILURE#For codelet that terminates with failure after ticking.enumeratorGXF_BEHAVIOR_UNKNOWN#For non-behavior-tree codelet because we don’t care about the behavior status returned by controller if it is not a BT codelet.gxf_result_tGxfEntityGetState(gxf_context_tcontext,gxf_uid_teid,entity_state_t*entity_state,);#Gets the state of the entity.See ‘gxf_entity_status_t’ for the various status.Parameters:context– A valid GXF contexteid– The UID of a valid entityentity_state– output; behavior status of an entity eid used by the behavior tree parent codeletReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Notify entity of an event#gxf_result_tGxfEntityEventNotify(gxf_context_tcontext,gxf_uid_teid,);#Notifies the occurrence of an event and inform the scheduler to check the status of the
entityThe entity must have an ‘AsynchronousSchedulingTerm’ scheduling term component and it must be in
“EVENT_WAITING” state for the notification to be acknowledged.See ‘AsynchronousEventState’ for various statesParameters:context– A valid GXF contexteid– The UID of a valid entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Notify entity of an event including the event type#enumgxf_event_t#An enumeration of various types of events used to communicate with a GXF scheduler.GXF_EVENT_EXTERNAL is supported by all GXF schedulers and the rest of the event types
are supported by event based scheduler only. GXF_EVENT_EXTERNAL is typically intended
to be used by events originating outside of the GXF framework by threads which are not
owned by GXF. All other event types occur within GXF and each of them describe a specific
event trigger scenarioenumeratorGXF_EVENT_CUSTOM#enumeratorGXF_EVENT_EXTERNAL#enumeratorGXF_EVENT_MEMORY_FREE#enumeratorGXF_EVENT_MESSAGE_SYNC#enumeratorGXF_EVENT_TIME_UPDATE#enumeratorGXF_EVENT_STATE_UPDATE#gxf_result_tGxfEntityNotifyEventType(gxf_context_tcontext,gxf_uid_teid,gxf_event_tevent,);#Notifies the occurrence of an event with event type and inform the scheduler to check the status
of the entityGXF_EVENT_EXTERNAL is supported by all GXF schedulers and the rest of the event types are
supported by event based scheduler only.Parameters:context– A valid GXF contexteid– The UID of a valid entityevent– The type of event. Can be GXF_EVENT_CUSTOM, GXF_EVENT_EXTERNAL,
GXF_EVENT_MEMORY_FREE, GXF_EVENT_MESSAGE_SYNC, GXF_EVENT_TIME_UPDATE, GXF_EVENT_STATE_UPDATE.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.constchar*GxfEventStr(gxf_event_tevent);#Gets a string describing an GXF event type.The caller does not get ownership of the return C string and must not delete it.Parameters:result– A GXF error codeReturns:A pointer to a C string with the error code description.Check if an entity is valid#gxf_result_tGxfEntityIsValid(gxf_context_tcontext,gxf_uid_teid,bool*valid,);#Check if an entity id is valid currently in GXF runtime.Parameters:context– A valid GXF contexteid– eid of an Entity to checkvalid– returned boolean indicating if the entity is valid in Gxf runtime(warden)Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Components#kMaxComponents#Maximum number of components in an entity or extension.Defined as 1024.kMaxEntityNameSize#Maximum number of characters in the name of an entity.Defined as 2048.kMaxComponentNameSize#Maximum number of characters in the name of a component.Defined as 256.Get component type identifier#gxf_result_tGxfComponentTypeId(gxf_context_tcontext,constchar*name,gxf_tid_t*tid,);#Gets the GXF unique type ID (TID) of a componentGet the unique type ID which was used to register the component with GXF. The function expects
the fully qualified C++ type name of the component including namespaces.Example of a valid component type name: “nvidia::gxf::test::PingTx”Parameters:context– A valid GXF contextname– The fully qualified C++ type name of the componenttid– The returned TID of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get component type name#gxf_result_tGxfComponentTypeName(gxf_context_tcontext,gxf_tid_ttid,constchar**name,);#Gets the fully qualified C++ type name GXF component typenameGet the unique typename of the component with which it was registered using one of
the GXF_EXT_FACTORY_ADD*() macrosParameters:context– A valid GXF contexttid– The unique type ID (TID) of the component with which the component was registeredname– The returned name of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get component type name from component UID#gxf_result_tGxfComponentTypeNameFromUID(gxf_context_tcontext,gxf_uid_tcid,constchar**name,);#Gets the fully qualified C++ type name GXF component typename from the component UIDGet the unique typename of the component with which it was registered using one of
the GXF_EXT_FACTORY_ADD*() macrosParameters:context– A valid GXF contextcid– The UID of a valid componentname– The returned name of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get component name#gxf_result_tGxfComponentName(gxf_context_tcontext,gxf_uid_tcid,constchar**name,);#Gets the name of a componentEach component has a user-defined name which was used in the call to ‘GxfComponentAdd’.
Usually the name is specified in the GXF application file.Parameters:context– A valid GXF contextcid– The unique object ID (UID) of the componentname– The returned name of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get unique identifier of the entity of given component#gxf_result_tGxfComponentEntity(gxf_context_tcontext,gxf_uid_tcid,gxf_uid_t*eid,);#Gets the unique object ID of the entity of a componentEach component has a unique ID with respect to the context and is stored in one entity. This
function can be used to retreive the ID of the entity to which a given component belongs.Parameters:context– A valid GXF contextcid– The unique object ID (UID) of the componenteid– The returned UID of the entityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Gets the pointer to an entity item#gxf_result_tGxfEntityGetItemPtr(gxf_context_tcontext,gxf_uid_teid,void**ptr,);#Each entity has a unique ID with respect to the context and is stored in the entity warden. This function can be used to retrieve the
pointer to entity item stored in the entity warden for a given entity id.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entityptr– The returned pointer to the entity itemReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Add a new component#gxf_result_tGxfComponentAdd(gxf_context_tcontext,gxf_uid_teid,gxf_tid_ttid,constchar*name,gxf_uid_t*cid,);#Adds a new component to an entityAn entity can contain multiple components and this function can be used to add a new component
to an entity. A component must be added before an entity is activated, or after it was
deactivated. Components must not be added to active entities. The order of components is stable
and identical to the order in which components are added (see ‘GxfComponentFind’).Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entity to which the component is added.tid– The unique type ID (TID) of the component to be added to the entity.name– The name of the new component. Ownership is not transferred.cid– The returned UID of the created componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Adds a new component to an entity and returns the pointer to the component#gxf_result_tGxfComponentAddAndGetPtr(gxf_context_tcontext,void*item_ptr,gxf_tid_ttid,constchar*name,gxf_uid_t*cid,void**comp_ptr,);#An entity can contain multiple components and this function can be used to add a new component to an Entity. A component must be added before an
entity is activated, or after it was deactivated. Components must not be added to active entities. The order of components is stable
and identical to the order in which components are added (see ‘GxfComponentFind’).Parameters:context– A valid GXF contextitem_ptr– The pointer to entity itemtid– The unique type ID (TID) of the component to be added to the entity.name– The name of the new component. Ownership is not transferred.cid– The returned UID of the created componentcomp_ptr– The returned pointer to the created component objectReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Remove a component#gxf_result_tGxfComponentRemoveWithUID(gxf_context_tcontext,gxf_uid_tcid,);#Removes a component from an entityAn entity can contain multiple components and this function can be used to remove a component from an entity.
A component must be removed before an entity is activated, or after it was deactivated. Components must not be removed from active entities.Parameters:context– A valid GXF contextcid– The UID of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.gxf_result_tGxfComponentRemove(gxf_context_tcontext,gxf_uid_teid,gxf_tid_ttid,constchar*name,);#Removes a component from an entityAn entity can contain multiple components and this function can be used to remove a component from an entity.
A component must be removed before an entity is activated, or after it was deactivated. Components must not be removed from active entities.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entity to which the component is added.tid– The unique type ID (TID) of the component to be added to the entity.name– The name of the new component. Ownership is not transferred.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Add component to entity interface#gxf_result_tGxfComponentAddToInterface(gxf_context_tcontext,gxf_uid_teid,gxf_uid_tcid,constchar*name,);#Adds an existing component to the interface of an entityAn entity can holds references to other components in its interface, so that when finding a component in an entity, both the component this entity holds and those it refers to will be returned.
This supports the case when an entity contains a subgraph, then those components that has been declared in the subgraph interface will be put to the interface of the parent entity.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entity to which the component is added.cid– The unique object ID of the component.name– The name of the new component. Ownership is not transferred.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Find a component in an entity#gxf_result_tGxfComponentFind(gxf_context_tcontext,gxf_uid_teid,gxf_tid_ttid,constchar*name,int32_t*offset,gxf_uid_t*cid,);#Finds a component in an entitySearches components in an entity which satisfy certain criteria: component type, component
name, and component min index. All three criteria are optional; in case no criteria is given
the first component is returned. The main use case for “component min index” is a repeated
search which continues at the index which was returned by a previous search.In case no entity with the given criteria was found GXF_ENTITY_NOT_FOUND is returned.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entity which is searched.tid– The component type ID (TID) of the component to find (optional)name– The component name of the component to find (optional). Ownership not transferred.offset– The index of the first component in the entity to search. Also contains the index of the component which was found.cid– The returned UID of the searched componentReturns:GXF_SUCCESS if a component matching the criteria was found, GXF_ENTITY_NOT_FOUND if no component matching the criteria was found, or otherwise one of the GXF error codes.Finds a component in an entity and returns pointer to component#gxf_result_tGxfComponentFindAndGetPtr(gxf_context_tcontext,gxf_uid_teid,void*item_ptr,gxf_tid_ttid,constchar*name,int32_t*offset,gxf_uid_t*cid,void**ptr,);#Searches components in an entity which satisfy certain criteria: component type, component name. All two criteria are optional;
in case no criteria is given the first component is returned. The main use case for “component min index” is a repeated search which continues at the index
which was returned by a previous search.In case no entity with the given criteria was found GXF_ENTITY_NOT_FOUND is returned.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entity which is searched.item_ptr– The pointer to entity itemtid– The component type ID (TID) of the component to find (optional)name– The component name of the component to find (optional). Ownership not transferred.offset– The index of the first component in the entity to search. Also contains the index of the component which was found.cid– The returned UID of the searched componentptr– The returned pointer of the searched componentReturns:GXF_SUCCESS if a component matching the criteria was found, GXF_ENTITY_NOT_FOUND if no component matching the criteria was found, or otherwise one of the GXF error codes.Find all components in an entity#gxf_result_tGxfComponentFindAll(gxf_context_tcontext,gxf_uid_teid,uint64_t*num_cids,gxf_uid_t*cids,);#Finds all components in an entityFinds and returns all component ids for the given entity. If more thannum_cidsexist
GXF_QUERY_NOT_ENOUGH_CAPACITY will be returned andnum_cidswill be updated to the actual
number of components in the entity.Parameters:context– A valid GXF contexteid– The unique object ID (UID) of the entity which is searched.num_cids– In/Out: the max number of components that can fit in the buffer/the number of components that exist in the entitycids– A buffer allocated by the caller for returned UIDs of all components, with capacity fornum_cids.Returns:GXF_SUCCESS if the operation was successful, GXF_QUERY_NOT_ENOUGH_CAPACITY if more components exist in the entity thannum_cids, or otherwise one of the GXF error codes.Get type identifier for a component#gxf_result_tGxfComponentType(gxf_context_tcontext,gxf_uid_tcid,gxf_tid_t*tid,);#Gets the component type ID (TID) of a componentParameters:context– A valid GXF contextcid– The component object ID (UID) for which the component type is requested.tid– The returned TID of the componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Gets pointer to component#gxf_result_tGxfComponentPointer(gxf_context_tcontext,gxf_uid_tuid,gxf_tid_ttid,void**pointer,);#Verifies that a component exists, has the given type, gets a pointer to it.Parameters:context– A valid GXF contextuid– The component object ID (UID).tid– The expected component type ID (TID) of the componentpointer– The returned pointer to the component object.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Check if a component is derived from another component#gxf_result_tGxfComponentIsBase(gxf_context_tcontext,gxf_tid_tderived,gxf_tid_tbase,bool*result,);#Check if a registered type in an extension is derived from another registered type from the same or any other extension.This is useful query the component hierarchies using their type id’s.
Both the derived and base types have to be registered in an extension via
one of the registered via GXF_EXT_FACTORY_ADD* macros.Parameters:context– A valid GXF contextderived– The type ID (TID) of a derived typebase– The type ID (TID) of a base typeReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Parameter#kMaxParameters#Maximum number of parameters in a component.Defined as 1024.enumgxf_parameter_flags_t_#Flags describing the behavior of a parameter.
Parameter flags are specified when a parameter is registered as part of the component interface.
Multiple flags can be OR combined.enumeratorGXF_PARAMETER_FLAGS_NONE#No additional flags are set (the default). This means the parameter is mandatory and static.
The parameter must be set before entity activation and can not be changed after entity
activation.enumeratorGXF_PARAMETER_FLAGS_OPTIONAL#The parameter value is optional and might not be available after entity activation.
This implies that it is not allowed to access the parameter with ‘get()’ in the C++ API.
Instead ‘try_get’ must be used.enumeratorGXF_PARAMETER_FLAGS_DYNAMIC#The parameter is dynamic an might change after entity activation. However it is still
guaranteed that parameters do not change during the initialize, deinitialize, start, tick,
or stop functions.typegxf_parameter_flags_t#typedef uint32_t gxf_parameter_flags_tType used for parameter flags. Seegxf_parameter_flags_t_.64-bit floating point#Set#gxf_result_tGxfParameterSetFloat64(gxf_context_tcontext,gxf_uid_tuid,constchar*key,doublevalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– a double valueReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetFloat64(gxf_context_tcontext,gxf_uid_tuid,constchar*key,double*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the double value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.64-bit signed integer#Set#gxf_result_tGxfParameterSetInt64(gxf_context_tcontext,gxf_uid_tuid,constchar*key,int64_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 64-bit integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetInt64(gxf_context_tcontext,gxf_uid_tuid,constchar*key,int64_t*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the 64-bit integer value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.64-bit unsigned integer#Set#gxf_result_tGxfParameterSetUInt64(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint64_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– unsigned 64-bit integet value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetUInt64(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint64_t*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the unsigned 64-bit integer value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.32-bit signed integer#Set#gxf_result_tGxfParameterSetInt32(gxf_context_tcontext,gxf_uid_tuid,constchar*key,int32_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 32-bit integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetInt32(gxf_context_tcontext,gxf_uid_tuid,constchar*key,int32_t*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the 32-bit integer value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.32-bit unsigned integer#Set#gxf_result_tGxfParameterSetUInt32(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint32_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 32-bit unsigned integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetUInt32(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint32_t*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the 32-bit unsigned integer value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.16-bit unsigned integer#Set#gxf_result_tGxfParameterSetUInt16(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint16_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 16-bit unsigned integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetUInt16(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint16_t*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the 16-bit unsigned integer value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.16-bit signed integer#Set#gxf_result_tGxfParameterSetInt16(gxf_context_tcontext,gxf_uid_tuid,constchar*key,int16_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 16-bit signed integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.8-bit unsigned integer#Set#gxf_result_tGxfParameterSetUInt8(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint8_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 8-bit unsigned integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.8-bit signed integer#Set#gxf_result_tGxfParameterSetInt8(gxf_context_tcontext,gxf_uid_tuid,constchar*key,int8_tvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– 8-bit signed integer value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.String parameter#Set#gxf_result_tGxfParameterSetStr(gxf_context_tcontext,gxf_uid_tuid,constchar*key,constchar*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– A char array containing value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetStr(gxf_context_tcontext,gxf_uid_tuid,constchar*key,constchar**value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to a char* array to get the value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Boolean#Set#gxf_result_tGxfParameterSetBool(gxf_context_tcontext,gxf_uid_tuid,constchar*key,boolvalue,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– A boolean value to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetBool(gxf_context_tcontext,gxf_uid_tuid,constchar*key,bool*value,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– pointer to get the boolean value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Handle#Set#gxf_result_tGxfParameterSetHandle(gxf_context_tcontext,gxf_uid_tuid,constchar*key,gxf_uid_tcid,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.cid– Unique identifier to set.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get#gxf_result_tGxfParameterGetHandle(gxf_context_tcontext,gxf_uid_tuid,constchar*key,gxf_uid_t*cid,);#Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– Pointer to a unique identifier to get the value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Vector Parameters#To set/get the vector parameters of a component, users can use the following C-APIs for various
data types:Set 1-D Vetor Parameters#gxf_result_tGxfParameterSet1DDataTypeVector(gxf_context_tcontext,gxf_uid_tuid,constchar*key,data_type*value,uint64_tlength,);#valueshould point to an array of the data to be set of the corresponding type. The size of
the stored array should match thelengthargument passed.See the table below for all the supported data types and their corresponding function signatures.Parameters:key– The name of the parametervalue– The value to set of the parameterlength– The length of the vector parameterReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Supported Data Types to Set 1D Vector Parameters#Function Namedata_typeGxfParameterSet1DFloat64Vector(...)doubleGxfParameterSet1DInt64Vector(...)int64_tGxfParameterSet1DUInt64Vector(...)uint64_tGxfParameterSet1DInt32Vector(...)int32_tSet 2-D Vetor Parameters#gxf_result_tGxfParameterSet2DDataTypeVector(gxf_context_tcontext,gxf_uid_tuid,constchar*key,data_type**value,uint64_theight,uint64_twidth,);#valueshould point to an array of array (and not to the address of a contiguous array of data)
of the data to be set of the corresponding type. The length of the first dimension of the array
should match theheightargument passed and similarly the length of the second dimension of the
array should match thewidthpassed.See the table below for all the supported data types and their corresponding function signatures.Parameters:key– The name of the parametervalue– The value to set of the parameterheight– The height of the 2-D vector parameterwidth– The width of the 2-D vector parameterReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Supported Data Types to Set 2D Vector Parameters#Function Namedata_typeGxfParameterSet2DFloat64Vector(...)doubleGxfParameterSet2DInt64Vector(...)int64_tGxfParameterSet2DUInt64Vector(...)uint64_tGxfParameterSet2DInt32Vector(...)int32_tGet 1-D Vetor Parameters#Usegxf_result_tGxfParameterGet1D"DataType"Vector(gxf_context_tcontext,gxf_uid_tuid,constchar*key,data_type**value,uint64_t*length)to get the value of a 1-D vector.Before calling this method, useGxfParameterGet1D"DataType"VectorInfo(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint64_t*length)to obtain thelengthof the vector param and then
allocate at least that much memory to retrieve thevalue.valueshould point to an array of size greater than or equal tolengthallocated by user of
the corresponding type to retrieve the data. If thelengthdoesn’t match the size of stored vector
then it will be updated with the expected size.See the table below for all the supported data types and their corresponding function signatures.param key:The name of the parameterparam value:The value to set of the parameterparam length:The length of the 1-D vector parameter obtained by callingGxfParameterGet1D"DataType"VectorInfo(...)Supported Data Types to Get the Value of 1D Vector Parameters#Function Namedata_typeGxfParameterGet1DFloat64Vector(...)doubleGxfParameterGet1DInt64Vector(...)int64_tGxfParameterGet1DUInt64Vector(...)uint64_tGxfParameterGet1DInt32Vector(...)int32_tGet 2-D Vetor Parameters#Usegxf_result_tGxfParameterGet2D"DataType"Vector(gxf_context_tcontext,gxf_uid_tuid,constchar*key,data_type**value,uint64_t*height,uint64_t*width)to get
the value of a -2D vector.Before calling this method, users should callGxfParameterGet1D"DataType"VectorInfo(gxf_context_tcontext,gxf_uid_tuid,constchar*key,uint64_t*height,uint64_t*width)to obtain theheightandwidthof the 2D-vector param and then allocate at least that much memory to retrieve thevalue.valueshould point to an array of array of height (size of first dimension) greater than or
equal toheightand width (size of the second dimension) greater than or equal towidthallocated by user of the corresponding type to get the data. If theheightorwidthdon’t
match the height and width of the stored vector then they will be updated with the expected values.See the table below for all the supported data types and their corresponding function signatures.parameter”:keyThe name of the parameterparameter”:valueAllocated array to get the value of the parameterparameter”:heightThe height of the 2-D vector parameter obtained by callingGxfParameterGet2D"DataType"VectorInfo(...)parameter”:widthThe width of the 2-D vector parameter obtained by callingGxfParameterGet2D"DataType"VectorInfo(...)Supported Data Types to Get the Value of 2D Vector Parameters#Function Namedata_typeGxfParameterGet2DFloat64Vector(...)doubleGxfParameterGet2DInt64Vector(...)int64_tGxfParameterGet2DUInt64Vector(...)uint64_tGxfParameterGet2DInt32Vector(...)int32_tYAML Parameters#Sets a parameter from YAML#gxf_result_tGxfParameterSetFromYamlNode(gxf_context_tcontext,gxf_uid_tuid,constchar*key,void*yaml_node,constchar*prefix,);#Sets a parameter from YAML. The YAML node pointer should be a type of ‘YAML::Node*’.Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.yaml_node– a yaml node pointerprefix– prefixReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.File Parameters#Sets a FilePath parameter#gxf_result_tGxfParameterSetPath(gxf_context_tcontext,gxf_uid_tuid,constchar*key,constchar*value,);#Sets a FilePath parameter.Parameters:context– A valid GXF context.uid– A valid component identifier.key– A valid name of a component to set.value– a file pathReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.EntityGroup#kDefaultEntityGroupName#kDefaultEntityGroupName#Name of default entity group.Defined as“default_entity_group”.Create an entity group#gxf_result_tGxfCreateEntityGroup(gxf_context_tcontext,constchar*name,gxf_uid_t*gid,);#Create a new GXF EntityGroup.EntityGroup is a group of EntityItems, such that these entities are bonded to some
common properties. For now the common property is all kinds of resources.Parameters:context– A valid GXF contextname– name to create the EntityGroupgid– pointer to returned uid for the created EntityGroup, abbreviation for group idReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Update entity’s EntityGroup#gxf_result_tGxfUpdateEntityGroup(gxf_context_tcontext,gxf_uid_tgid,gxf_uid_teid,);#Update entity’s EntityGroup by adding the entity eid into the target EntityGroup;
and remove the entity eid from previous EntityGroup.Each entity always has one and only one EntityGroup. The entity holds the entity group gid,
and the EntityGroup holds a set of entity eids that has this entity eid. Each entity is created
with default EntityGroup. When update an entity’s EntityGroup:
1. updates EntityGroup uid in current EntityItem, to new group id gid;
2. Remove eid from its previous EntityGroup;
3. add eid to its new EntityGroupParameters:context– A valid GXF contextgid– UID of an existing (new) EntityGroupeid– eid of an EntityReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Find all resources from an EntityGroup#gxf_result_tGxfEntityGroupFindResources(gxf_context_tcontext,gxf_uid_teid,uint64_t*num_resource_cids,gxf_uid_t*resource_cids,);#Find all resources from an EntityGroupFinds and returns all resource component cids for EntityGroup pointed by eid.
If more thanmax_entitiesexist onlymax_entitieswill be returned.Parameters:context– A valid GXF contexteid– eid of an Entitynum_resource_cids– In/Out: the max number of components that can fit in the buffer/the number of resources in eid’s EntityGroupresource_cids– A buffer allocated by the caller for returned UIDs of all resources, with capacity fornum_resource_cids.Returns:GXF_SUCCESS if the operation was successful, GXF_QUERY_NOT_ENOUGH_CAPACITY if more resources exist in eid’s EntityGroup, or otherwise one of the GXF error codes.Find the EntityGroup gid that the entity belongs to#gxf_result_tGxfEntityGroupId(gxf_context_tcontext,gxf_uid_teid,gxf_uid_t*gid,);#EntityGroup is a group of EntityItems, such that these entities are bonded to some common properties. For now the common property is all kinds of resources.
Through life time of each entity, it always corresponds to an EntityGroup. Eg, newly created EntityItem points to Default EntityGroup, and user can
update its EntityGroup to valid one only.Parameters:context– A valid GXF contexteid– eid of an EntityItem, whose EntityGroup id field is used find EntityGroup namegid– The returned id of the entity group.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get name of an EntityGroup#gxf_result_tGxfEntityGroupName(gxf_context_tcontext,gxf_uid_teid,constchar**name,);#Get name of EntityGroup held by entityEntityGroup is a group of EntityItems, such that these entities are bonded to some
common properties. For now the common property is all kinds of resources. Through
life time of each entity, it always corresponds to an EntityGroup. Eg, newly created
Entity item points to Default EntityGroup, and user can update its EntityGroup to valid
one only.Parameters:context– A valid GXF contexteid– eid of an Entity item, whose EntityGroup id field is used find EntityGroup namename– The returned name of the EntityGroupReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get resource component id from EntityGroup#gxf_result_tGxfEntityResourceGetHandle(gxf_context_tcontext,gxf_uid_teid,constchar*type,constchar*resource_key,gxf_uid_t*resource_cid,);#Gets cid of a resource component that is grouped with the given entityParameters:context– A valid GXF contexteid– eid of an Entitytype– The fully qualified C++ type name of the componentresource_key– the key or name of the resourceresource_cid– The returned cid of the resource componentReturns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Information Queries#Get Meta Data about the GXF Runtime#typegxf_runtime_info#A structure representing version of GXF Runtime and list of loaded extensions.constchar*version#GXF Runtime version.uint64_tnum_extensions#In-out capacity of extensions/Number of extension types.gxf_tid_t*extensions#List of extension IDs.gxf_result_tGxfRuntimeInfo(gxf_context_tcontext,gxf_runtime_info*info,);#Parameters:context– A valid GXF context.info– pointer to gxf_runtime_info object to get the meta data.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get description and list of components in loaded Extension#typegxf_extension_info_t#A structure representing description and list of components for a loaded extension.gxf_tid_tid#Extension ID (UUID) registered viaGXF_EXT_FACTORY_SET_INFO.constchar*name#Extension name registered viaGXF_EXT_FACTORY_SET_INFO.constchar*description#Description registered viaGXF_EXT_FACTORY_SET_INFO.constchar*version#Extension version registered viaGXF_EXT_FACTORY_SET_INFO.constchar*runtime_version#GXF Core version the extension was compiled with.constchar*license#Extension license registered viaGXF_EXT_FACTORY_SET_INFO.constchar*author#Extension author registered viaGXF_EXT_FACTORY_SET_INFO.constchar*display_name#Extension display name registered viaGXF_EXT_FACTORY_SET_DISPLAY_INFO.constchar*category#Extension category registered viaGXF_EXT_FACTORY_SET_DISPLAY_INFO.constchar*brief#Extension brief registered viaGXF_EXT_FACTORY_SET_DISPLAY_INFO.uint64_tnum_components#In-out capacity of components/Number of components.gxf_tid_t*components#List of IDs of provided components.gxf_result_tGxfExtensionInfo(gxf_context_tcontext,gxf_tid_ttid,gxf_extension_info_t*info,);#Parameters:context– A valid GXF context.tid– The unique identifier of the extension.info– pointer to gxf_extension_info_t object to get the meta data.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get description and list of parameters of Component#typegxf_component_info_t#A structure representing description and list of parameters of a component.gxf_tid_tcid#Component ID registered viaGXF_EXT_FACTORY_ADD.constchar*base_name#Base class name registered viaGXF_EXT_FACTORY_ADD.intis_abstract#Whether the component is abstract and cannot be instantiated.constchar*type_name#Component name registered viaGXF_EXT_FACTORY_ADD.constchar*display_name#Component display name registered viaGXF_EXT_FACTORY_SET_DISPLAY_INFO, maximum 30 characters.constchar*brief#Component brief registered viaGXF_EXT_FACTORY_SET_DISPLAY_INFO, maximum 50 characters.constchar*description#Description registered viaGXF_EXT_FACTORY_ADD.uint64_tnum_parameters#In-out capacity of parameters/Number of parameters.constchar**parameters#List of names for parameters.gxf_result_tGxfComponentInfo(gxf_context_tcontext,gxf_tid_ttid,gxf_component_info_t*info,);#Note: Parameters are only available after at least one instance is created for the Component.Parameters:context– A valid GXF context.tid– The unique identifier of the component.info– pointer to gxf_component_info_t object to get the meta data.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get parameter type description#enumgxf_parameter_type_t#An enumeration representing the type of a parameter.enumeratorGXF_PARAMETER_TYPE_CUSTOM#A custom type not natively supported by GXF.enumeratorGXF_PARAMETER_TYPE_HANDLE#A GXF handle. The handle type is specified separately.enumeratorGXF_PARAMETER_TYPE_STRING#A null-terminated character string (const char*).enumeratorGXF_PARAMETER_TYPE_INT64#A 64-bit signed integer (int64_t).enumeratorGXF_PARAMETER_TYPE_UINT64#A 64-bit unsigned integer (uint64_t).enumeratorGXF_PARAMETER_TYPE_FLOAT64#A 64-bit floating point (double).enumeratorGXF_PARAMETER_TYPE_BOOL#A boolean type (bool).enumeratorGXF_PARAMETER_TYPE_INT32#A 32-bit signed integer (int32_t).enumeratorGXF_PARAMETER_TYPE_FILE#A file system path (string).enumeratorGXF_PARAMETER_TYPE_INT8#A 8-bit signed integer (int8_t).enumeratorGXF_PARAMETER_TYPE_INT16#A 16-bit signed integer (int16_t).enumeratorGXF_PARAMETER_TYPE_UINT8#A 8-bit unsigned integer (uint8_t).enumeratorGXF_PARAMETER_TYPE_UINT16#A 16-bit unsigned integer (uint16_t).enumeratorGXF_PARAMETER_TYPE_UINT32#A 32-bit unsigned integer (uint32_t).enumeratorGXF_PARAMETER_TYPE_FLOAT32#A 32-bit floating point (float).enumeratorGXF_PARAMETER_TYPE_COMPLEX64#A 64-bit complex floating point (float).enumeratorGXF_PARAMETER_TYPE_COMPLEX128#A 128-bit complex floating point (double).Gets a string describing the parameter typeconstchar*GxfParameterTypeStr(gxf_parameter_type_tparam_type);#Parameters:param_type– Type of parameter to get info about.Returns:C-style string description of the parameter type.Get flag type description#Gets a string describing the flag typeconstchar*GxfParameterFlagTypeStr(gxf_parameter_flags_t_flag_type);#Parameters:flag_type– Type of flag to get info about.Returns:C-style string description of the flag type.Get parameter description#typegxf_parameter_info_t#A structure holding metadata information about a parameter which was registered as part of the component interface.constchar*key#The name of the parameter as it appears in the GXF file.constchar*headline#A short headline used to display the parameter to a human.constchar*description#A longer text describing the usage of the parameter.gxf_parameter_flags_tflags#Parameter flags for example to make a parameter optional.gxf_parameter_type_ttype#The type of the parametergxf_tid_thandle_tid#In case the parameter is a handle the TID of the component.constvoid*default_value#Default value of parameter, N/A for handle and custom params.constvoid*numeric_min#Min value of range for numeric parameters, N/A for other types.constvoid*numeric_max#Max value of range for numeric parameters, N/A for other types.constvoid*numeric_step#Step value of range for numeric parameters, N/A for other types.constchar*platform_information#Platforms separated by comma. Empty means all platforms.int32_trank#Rank of the parameter. 0-scalar, 1-list etc. Max rank is 8.int32_tshape[8]#Sizes of multi dimensional parameters if it is of fixed length.
Shape of a dimension is -1 for scalar and variable length arrays.Gets description of specific parameter. Fails if the component is not instantiated yet.gxf_result_tGxfGetParameterInfo(gxf_context_tcontext,gxf_tid_tcid,constchar*key,gxf_parameter_info_t*info,);#Parameters:context– A valid GXF context.cid– The unique identifier of the component.key– The name of the parameter.info– Pointer to a gxf_parameter_info_t object to get the value.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Redirect logs to a file#Redirect console logs to the provided file.gxf_result_tGxfRedirectLog(gxf_context_tcontext,FILE*fp);#Parameters:context– A valid GXF context.fp– File path for the redirected logs.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Miscellaneous#Get string description of error#constchar*GxfResultStr(gxf_result_tresult);#Gets a string describing an GXF error code.The caller does not get ownership of the return C string and must not delete it.Parameters:result– A GXF error codeReturns:A pointer to a C string with the error code description.Check if a result is successful#boolisSuccessful(gxf_result_tresult);#Checks if a result code is GXF_SUCCESS or not.Parameters:result– A GXF result codeReturns:A boolean value indicating if the result code is GXF_SUCCESS.Set log severity#typegxf_severity_t#An enumeration of severity levels forGXF_LOG_*logging macros.typeGXF_SEVERITY_NONE#typeGXF_SEVERITY_ERROR#typeGXF_SEVERITY_WARNING#typeGXF_SEVERITY_INFO#typeGXF_SEVERITY_DEBUG#typeGXF_SEVERITY_VERBOSE#gxf_result_tGxfSetSeverity(gxf_context_tcontext,gxf_severity_tseverity,);#Sets the severity level of the logs (corresponding to GXF_LOG_* logging macros) for the entire application.Parameters:context– a valid GXF contextseverity– a valid severity level as defined ingxf_severity_t. Logs corresponding to any level <= severity will be logged.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.Get log severity#gxf_result_tGxfGetSeverity(gxf_context_tcontext,gxf_severity_tseverity,);#Returns the current severity level of the logs.Parameters:context– a valid GXF contextseverity– a pointer to a gxf_severity_t in which the resulting severity is returned.Returns:GXF_SUCCESS if the operation was successful, or otherwise one of the GXF error codes.previousGXF Core C++ APIsnextGXF Core Python APIsOn this pageContextCreate contextCreate a context from a shared contextGet a shared context from a contextDestroy contextExtensionsGxfLoadExtensionsInfoLoad Extension librariesLoad Extension from a pointerLoad Metadata filesRegister componentRegister a component during runtimeGraph ExecutionLoads a list of entities from YAML fileSet the root folder for searching YAML files during loadingLoads a list of entities from YAML textActivate all system componentsDeactivate all System componentsStarts the execution of the graph asynchronouslyInterrupt the execution of the graphWaits for the graph to complete executionRuns all System components and waits for their completionEntitiesCreate an entityActivate an entityDeactivate an entityDestroy an entityFind an entityFind all entitiesIncrease reference count of an entityDecrease reference count of an entityGet the reference count of an entityGet status of an entityGets the name of the entityGet state of an entityNotify entity of an eventNotify entity of an event including the event typeCheck if an entity is validComponentsGet component type identifierGet component type nameGet component type name from component UIDGet component nameGet unique identifier of the entity of given componentGets the pointer to an entity itemAdd a new componentAdds a new component to an entity and returns the pointer to the componentRemove a componentAdd component to entity interfaceFind a component in an entityFinds a component in an entity and returns pointer to componentFind all components in an entityGet type identifier for a componentGets pointer to componentCheck if a component is derived from another componentParameter64-bit floating pointSetGet64-bit signed integerSetGet64-bit unsigned integerSetGet32-bit signed integerSetGet32-bit unsigned integerSetGet16-bit unsigned integerSetGet16-bit signed integerSet8-bit unsigned integerSet8-bit signed integerSetString parameterSetGetBooleanSetGetHandleSetGetVector ParametersSet 1-D Vetor ParametersSet 2-D Vetor ParametersGet 1-D Vetor ParametersGet 2-D Vetor ParametersYAML ParametersSets a parameter from YAMLFile ParametersSets a FilePath parameterEntityGroupkDefaultEntityGroupNameCreate an entity groupUpdate entity’s EntityGroupFind all resources from an EntityGroupFind the EntityGroup gid that the entity belongs toGet name of an EntityGroupGet resource component id from EntityGroupInformation QueriesGet Meta Data about the GXF RuntimeGet description and list of components in loaded ExtensionGet description and list of parameters of ComponentGet parameter type descriptionGet flag type descriptionGet parameter descriptionRedirect logs to a fileMiscellaneousGet string description of errorCheck if a result is successfulSet log severityGet log severityPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.