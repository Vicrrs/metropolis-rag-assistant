Graph Execution Engine — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formGraph...Graph Execution Engine#Graph Execution Engine is used to execute AI application graphs. It accepts multiple graph files as input, and all graphs are executed in same process context. It also needs manifest files as input which includes list of extensions to load. It must list all extensions required for the graph. Registrygraphinstallcommand can be used to download all required extensions and generate manifest file./opt/nvidia/graph-composer/gxe--helpFlagsfromgxf/gxe/gxe.cpp:-app(GXFappfiletoexecute.Multiplefilescanbecomma-separated)type:stringdefault:""-app_root(RootpathforGXFappandsubgraphfileswithrelativepath)type:stringdefault:""-graph_directory(Pathtoadirectoryforsearchinggraphfiles.)type:stringdefault:""-log_file_path(Pathtoafileforlogging.)type:stringdefault:""-manifest(GXFmanifestfilewithextensions.Multiplefilescanbecomma-separated)type:stringdefault:""-severity(Setlogseveritylevels:0=None,1=Error,2=Warning,3=Info,4=Debug.Default:Info)type:int32default:3Other options1. How to override the parameters that are specified in the graph file using command line options?#1. Single graph file#Command line option--paramof gxe can be used to override the parameters specified
in the graph file. Complete path is delimited by/only exception being the last literal whose value has to be
overridden is delimited by=Below is the snippet of a graph file---name:Entity1components:-type:nvidia::gxf::PeriodicSchedulingTermparameters:recess_period:2000000-type:nvidia::gxf::CountSchedulingTermparameters:count:100-type:nvidia::gxf::test::StepCountparameters:expected_count:100---To override thecountofCountSchedulingTermbelow command line option can be used.--param=Entity1/nvidia::gxf::CountSchedulingTerm/count=1012. Multiple subgraph files#When multiple subgraph files are used, then the entity names of various subgraphs are delimited by.until the
componet name is reached whose parameter has to be overriden. Hereafter the component type and the parameter will be
delimited by/Below is the snippet of multiple sub graph filestest_subgraph.yaml---name:gather_subgraphcomponents:-type:nvidia::gxf::Subgraphname:gather_subgraphparameters:location:"gxf/test/apps/gather_subgraph.yaml"prerequisites:monitored_rx:rx/signal-name:outputparameters:max_capacity:2-name:forward1_buf_termparameters:min_size:1---gather_subgraph.yaml---name:forward_subgraph_1components:-name:forwardtype:nvidia::gxf::Subgraphparameters:location:gxf/test/apps/forward_subgraph.yamlprerequisites:monitored_rx:prerequisites/monitored_rx---forward_subgraph.yaml---name:countercomponents:-name:step_countertype:nvidia::gxf::test::StepCountparameters:expected_count:100---To override theexpected_countofstep_counterbelow command line option can be used.--param=gather_subgraph.forward_subgraph_1.counter/nvidia::gxf::test::StepCount/expected_count=101previousGXF InternalsnextGraph Composer and GXF ContainersOn this page1. How to override the parameters that are specified in the graph file using command line options?1. Single graph file2. Multiple subgraph filesPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.