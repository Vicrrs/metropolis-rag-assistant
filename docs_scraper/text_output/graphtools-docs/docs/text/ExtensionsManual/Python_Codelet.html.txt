Python Codelets — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsPython CodeletsPython Codelets#Python Codelets allow users to build parts of their application in Python. This also allows users to add custom
implementation without creating a custom Extension. This section gives an overview of the how
to implement codelets in python and how to use them in an application.Codelets are user implemented units which can be run as part of the graph. Python codelets allow the users to
implement this functionality in python.
Like C++ codelets, python codelets have the following functions users have to implement:start()- called once when the codelet startstick()- called on every tickstop()- called once when the codelet is stoppedUnlike the C++ codelets, all the python codelets are registered via a same interface namely:nvidia::gxf::PyCodeletV0.To implement a codelet in python, users have to implement the classCodeletAdapter. As explained above, the users
implementstart(),stop()andtick()methods in Python.Running an application containing a Python Codelet has to be done usinggxe.pyand notgxebinary. Graphs
containing Python Codelets
cannot run directly using thegxebinary because a python interpreter has to be started before running any Python
code.A graph can also be run ifgraph-composerandregistryare already installed.
Use the following command to install the relevant extensions:registrygraphinstall-gpath/to/graph.yaml-moutput/path/to/generated/manifest.yaml-dpath/to/target.yaml--output-directoryoutput/directoryA sample target file can be found in/opt/nvidia/graph-composer/.The above command will install the relevant extensions and other required files tooutput/directory.Copy the core extension and Run the following command:cp-r/opt/nvidia/graph-composer/coreoutput/directory/gxfFinally add output/directory to PYTHONPATH using the following command:exportPYTHONPATH=output/directoryRunning a graph usinggxe.py:python3output/directory/gxf/std/gxe.py--apppath/to/graph.yaml--manifestpath/to/manifest/file.yamlFollowing are some of the Python Codelet examples which can be found ingxf/python/tests:Ping Codelets demonstrate the basic usage of python codeletsPingTx.pyConstructs an empty message which is anEntityTransmits it on the first transmitterPingRx.pyReceives a message on first transmitterPasses if it’s non-null else raises an exceptionObtaining tensor data in pythonVerifyEqual.pyThis codelet has two receivers.It receives two messages one from each receiver.Extracts tensor data from both the message.Copies the data on the host if the tensor is on the device.Asserts that the data on the tensors is equal.Generating tensor data from pythonStreamGeneratorOn every tick, this codelet generates four tensors: two on host and two on device.It uses TensorDescription object to reshape the tensor to desired shape.Creates a host message and a device message.Adds the device tensors to device messages and host tensors to host messagesPublishes the host message on the first transmitter and the device message on the second transmitter.Please refer to the sample graph files present in thegxf/python/testsdirectory for examples on
how to use the Python Codelets in an application.General Concepts#Python enables users to add a lot of functionality with very less boiler plate code and hence is heavily used in the
Machine Learning Community.For e.g. simulating a sensor for data, vizualizing the generated output or running various ML models on the data can
be easily implemented in python. Python Codelets allow users to implement these functionalities in python.Unlike C++ codelets, python codelets are not registered individually. To create a python codelet users implementCodeletAdapter(a python base class) and all python codelets are registered in the registry asPyCodeletV0which is a classic C++ codelet. ThisC++codelet calls thestart(),tick()andstop()methods of the
python codelet implementation.PyCodeletV0User’s Python Codeletstart()start()tick()tick()stop()stop()Implenting a Python Codelet#Implementing Class#To implement a python codelet, users implementCodeletAdapter. This is available ingxf.python_codelet.codelet. Specifically, users implement the following functions:start()- Setting up the codelet. Called once when the codelet starts.tick()- Business logic. Called based on Scheduling Terms.stop()- Clean up. Called when entity containing the python codelet is terminated.Adding Python Codelet to the Graph#Adding a python codelet to the graph is different from adding a C++ codelet. Unlike C++ codelets, thetypeof python
codelet isnvidia::gxf::PyCodeletV0and notnvidia::gxf::Codelet. Linking the implementation of the codelet is
done via params directly.
Also, python codelets can obtain only parameters which have a corresponding python bindings.nvidia::gxf::PyCodeletV0accepts the following parameters:ParameterMandatory/OptionalDescriptioncodelet_nameMandatoryName of the user’s python codelet class which implements CodeletAdaptercodelet_fileMandatoryAbsolute path to the file containing the implementationcodelet_paramsOptionalA string which the users can parse for setting additional paramsFollowing is an entity namedrxwhich contains the following components:A python codelet calledpython_receiverADoubleBufferReceivercalled signalA namelessMessageAvailableSchedulingTermThe implementation of the python codelet is present insome/path/to/PythonCodelets.pyfile under the class
calledPingRxwhich should implementCodeletAdapter. The python codelet also accept two other parameters:receivers: A list containing single item,signal, which is a double buffer receiver component.codelet_params: a custom string which the user can parse in thestart(),tick()orstop()method and use accordingly.---name:rxcomponents:-name:signaltype:nvidia::gxf::DoubleBufferReceiver-type:nvidia::gxf::MessageAvailableSchedulingTermparameters:receiver:signalmin_size:1-name:python_receivertype:nvidia::gxf::PyCodeletV0parameters:codelet_name:"PingRx"codelet_file:"some/path/to/PingRx.py"codelet_params:log_count:5receiver:signalAccessing Parameters#CodeletAdapterhas a method calledget_paramswhich returns a dict of all the params mentioned in the yaml file.classSampleCodelet(CodeletAdapter):"""Sample class to show how to access params"""defstart(self):self.params=self.get_params()deftick(self):print(self.params['log_count'])defstop(self):returnAccessing other Components#Users can also access other components such as transmitter and receiver as follows:fromgxf.stdimportReceiverclassSampleCodelet(CodeletAdapter):"""Sample class to show how to access params"""defstart(self):self.params=self.get_params()deftick(self):rx=Receiver.get(self.context(),\self.cid(),\self.params["receiver"])msg=rx.receive()defstop(self):returnCodeletAdapteralso implements the following utility methods:MethodDescriptioneid()returns the unique ID of the entity containing this codelet.cid()returns the unique ID of the codelet component.name()returns the name of the python codelet.get_execution_timestamp()returns the last timestamp in nanoseconds when the codelet was either started, ticked, or stopped.get_execution_time()same asget_execution_timestamp()returns a floating points with seconds as unit.get_delta_time()returns the time difference between the current call (start(),tick()orstop()) and the last call.get_execution_count()returns the number of times the codelet has been executed.is_first_tick()returnsTrueiftick()is called for the first time afterstart().previousStandardExtensionnextNetworkExtensionOn this pageGeneral ConceptsImplenting a Python CodeletImplementing ClassAdding Python Codelet to the GraphAccessing ParametersAccessing other ComponentsPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.