StandardExtension — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsStandardExtensionStandardExtension#Most commonly used interfaces and components in Gxf Core.UUID: 8ec2d5d6-b5df-48bf-8dee-0252606fdd7eVersion: 2.6.0Author: NVIDIALicense: LICENSEInterfaces#nvidia::gxf::Codelet#Interface for a component which can be executed to run custom code.Component ID: 5c6166fa-6eed-41e7-bbf0-bd48cd6e1014Base Type: nvidia::gxf::ComponentDefined in: gxf/std/codelet.hppnvidia::gxf::Clock#Interface for clock components which provide time.Component ID: 779e61c2-ae70-441d-a26c-8ca64b39f8e7Base Type: nvidia::gxf::ComponentDefined in: gxf/std/clock.hppnvidia::gxf::System#Component interface for systems which are run as part of the application run cycle.Component ID: d1febca1-80df-454e-a3f2-715f2b3c6e69Base Type: nvidia::gxf::Componentnvidia::gxf::Queue#Interface for storing entities in a queue.Component ID: 792151bf-3138-4603-a912-5ca91828dea8Base Type: nvidia::gxf::ComponentDefined in: gxf/std/queue.hppnvidia::gxf::Router#Interface for classes which are routing messages in and out of entities.Component ID: 8b317aad-f55c-4c07-8520-8f66db92a19eDefined in: gxf/std/router.hppnvidia::gxf::Transmitter#Interface for publishing entities.Component ID: c30cc60f-0db2-409d-92b6-b2db92e02cceBase Type: nvidia::gxf::QueueDefined in: gxf/std/transmitter.hppnvidia::gxf::Receiver#Interface for receiving entities.Component ID: a47d2f62-245f-40fc-90b7-5dc78ff2437eBase Type: nvidia::gxf::QueueDefined in: gxf/std/receiver.hppnvidia::gxf::Scheduler#A simple poll-based single-threaded scheduler which executes codelets.Component ID: f0103b75-d2e1-4d70-9b13-3fe5b40209beBase Type: nvidia::gxf::SystemDefined in: nvidia/gxf/system.hppnvidia::gxf::SchedulingTerm#Interface for terms used by a scheduler to determine if codelets in an entity are ready to step.Component ID: 184d8e4e-086c-475a-903a-69d723f95d19Base Type: nvidia::gxf::ComponentDefined in: gxf/std/scheduling_term.hppnvidia::gxf::Allocator#Provides allocation and deallocation of memory.Component ID: 3cdd82d0-2326-4867-8de2-d565dbe28e03Base Type: nvidia::gxf::ComponentDefined in: nvidia/gxf/allocator.hppnvidia::gxf::Monitor#Monitors entities during execution.Component ID: 9ccf9421-b35b-8c79-e1f0-97dc23bd38eaBase Type: nvidia::gxf::ComponentDefined in: nvidia/gxf/monitor.hppnvidia::gxf::IPCServer#Interface for a component which works as a API server to respond on remote requests.Component ID: 00e6f23d-0bf6-4c1c-ada5-630c711d3be1Base Type: nvidia::gxf::ComponentDefined in: nvidia/gxf/ipc_server.hppnvidia::gxf::IPCClient#Interface for a component which works as a API client to send remote requests. It’s the counterpart to IPCServerComponent ID: 6f3cf830-7628-49a6-b925-f94171b019daBase Type: nvidia::gxf::ComponentDefined in: nvidia/gxf/ipc_client.hppnvidia::gxf::ResourceBase#A resource component base type.Component ID: 76b9234d-5eac-4c65-b1a1-0306d3f354e5Base Type: nvidia::gxf::ComponentDefined in: nvidia/gxf/resources.hppnvidia::gxf::Controller#Controls entities’ termination policy and tracks behavior status during execution.Component ID: c8e80475-3c79-43a4-9083-eaf294b0600dBase Type: nvidia::gxf::ComponentDefined in: nvidia/gxf/controller.hppComponents#nvidia::gxf::RealtimeClock#A real-time clock which runs based off a system steady clock.Component ID: 7b170b7b-cf1a-4f3f-997c-bfea25342381Base Type: nvidia::gxf::ClockParameters#initial_time_offsetThe initial time offset used until time scale is changed manually.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_FLOAT64initial_time_scaleThe initial time scale used until time scale is changed manually.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_FLOAT64use_time_since_epochIf true, clock time is time sinceepoch+initial_time_offsetatinitialize().Otherwise clock time isinitial_time_offsetatinitialize().Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLnvidia::gxf::ManualClock#A manual clock which is instrumented manually.Component ID: 52fa1f97-eba8-472a-a8ca-4cff1a2c440fBase Type: nvidia::gxf::ClockParameters#initial_timestampThe initial timestamp on the clock (in nanoseconds).Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64nvidia::gxf::SyntheticClock#A synthetic clock used to inject simulated time.Component ID: 9a2bfd7b-2d84-79b4-bc71-f47eb53f28c8Base Type: nvidia::gxf::ClockParameters#initial_timestampThe initial timestamp on the clock (in nanoseconds).Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64Default: 0nvidia::gxf::SystemGroup#A group of systems.Component ID: 3d23d470-0aed-41c6-ac92-685c1b5469a0Base Type: nvidia::gxf::Systemnvidia::gxf::MessageRouter#A router which sends transmitted messages to receivers.Component ID: 84fd5d56-fda6-4937-0b3c-c283252553d8Base Type: nvidia::gxf::Routernvidia::gxf::NetworkRouter#A router which sends transmitted messages to remote receivers.Component ID: a1e6c5d5-947d-40fd-b248-117dddc9f0aeBase Type: nvidia::gxf::Routernvidia::gxf::RouterGroup#A group of routers.Component ID: ca64ee14-2280-4099-9f10-d4b501e09117Base Type: nvidia::gxf::Routernvidia::gxf::DoubleBufferTransmitter#A transmitter which uses a double-buffered queue where messages are pushed to a backstage after they are published.Component ID: 0c3c0ec7-77f1-4389-aef1-6bae85bddc13Base Type: nvidia::gxf::TransmitterParameters#capacityFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64Default: 1policy0: pop, 1: reject, 2: fault.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64Default: 2nvidia::gxf::DoubleBufferReceiver#A receiver which uses a double-buffered queue where new messages are first pushed to a backstage.Component ID: ee45883d-bf84-4f99-8419-7c5e9deac6a5Base Type: nvidia::gxf::ReceiverParameters#capacityFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64Default: 1policy0: pop, 1: reject, 2: faultFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64Default: 2nvidia::gxf::Connection#A component which establishes a connection between two other components.Component ID: cc71afae-5ede-47e9-b267-60a5c750a89aBase Type: nvidia::gxf::ComponentParameters#sourceFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::TransmittertargetFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::PeriodicSchedulingTerm#A component which specifies that an entity shall be executed periodically.Component ID: d392c98a-9b08-49b4-a422-d5fe6cd72e3eBase Type: nvidia::gxf::SchedulingTermParameters#recess_periodThe recess period indicates the minimum amount of time which has to pass before the entity is permitted to execute again. The period is specified as a string containing of a number and an (optional) unit. If no unit is given the value is assumed to be in nanoseconds. Supported units are: Hz, s, ms. Example: 10ms, 10000000, 0.2s, 50Hz.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGnvidia::gxf::CountSchedulingTerm#A component which specifies that an entity shall be executed exactly a given number of times.Component ID: f89da2e4-fddf-4aa2-9a80-1119ba3fde05Base Type: nvidia::gxf::SchedulingTermParameters#countThe total number of time this term will permit execution.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64nvidia::gxf::TargetTimeSchedulingTerm#A component where the next execution time of the entity needs to be specified after every tick.Component ID: e4aaf5c3-2b10-4c9a-c463-ebf6084149bfBase Type: nvidia::gxf::SchedulingTermParameters#clockThe clock used to define target time.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clocknvidia::gxf::DownstreamReceptiveSchedulingTerm#A component which specifies that an entity shall be executed if receivers for a certain transmitter can accept new messages.Component ID: 9de75119-8d0f-4819-9a71-2aeaefd23f71Base Type: nvidia::gxf::SchedulingTermParameters#min_sizeThe term permits execution if the receiver connected to the transmitter has at least the specified number of free slots in its back buffer.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64transmitterThe term permits execution if this transmitter can publish a message, i.e. if the receiver which is connected to this transmitter can receive messages.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmitternvidia::gxf::MessageAvailableSchedulingTerm#A scheduling term which specifies that an entity can be executed when the total number of messages over a set of input channels is at least a given number of messages.Component ID: fe799e65-f78b-48eb-beb6-e73083a12d5bBase Type: nvidia::gxf::SchedulingTermParameters#front_stage_max_sizeIf set the scheduling term will only allow execution if the number of messages in the front stage does not exceed this count. It can for example be used in combination with codelets which do not clear the front stage in every tick.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64min_sizeThe scheduling term permits execution if the given receiver has at least the given number of messages available.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64receiverThe scheduling term permits execution if this channel has at least a given number of messages available.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::MultiMessageAvailableSchedulingTerm#A component which specifies that an entity shall be executed when a queue has at least a certain number of elements.Component ID: f15dbeaa-afd6-47a6-9ffc-7afd7e1b4c52Base Type: nvidia::gxf::SchedulingTermParameters#min_sizeThe scheduling term permits execution if all given receivers together have at least the given number of messages available.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64receiversThe scheduling term permits execution if the given channels have at least a given number of messages available.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::ExpiringMessageAvailableSchedulingTerm#A component which tries to wait for specified number of messages in queue for at most specified time.Component ID: eb22280c-76ff-11eb-b341-cf6b417c95c9Base Type: nvidia::gxf::SchedulingTermParameters#clockClock to get time from.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clockmax_batch_sizeThe maximum number of messages to be batched together.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64max_delay_nsThe maximum delay from first message to wait before submitting workload anyway.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64receiverReceiver to watch on.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::BooleanSchedulingTerm#A component which acts as a boolean AND term that can be used to control the execution of the entity.Component ID: e07a0dc4-3908-4df8-8134-7ce38e60fbefBase Type: nvidia::gxf::SchedulingTermParameters#enable_tickThe default initial condition for enabling tick.Flags: GXF_PARAMETER_FLAGS_DYNAMICType: GXF_PARAMETER_TYPE_BOOLnvidia::gxf::BTSchedulingTerm#A component which is used to control the execution of the behavior tree entities.Component ID: 0161ca51-2fed-4a8c-8f24-67cf1b5e330aBase Type: nvidia::gxf::SchedulingTermParameters#is_rootIf entity is a root nodeFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLnvidia::gxf::AsynchronousSchedulingTerm#A component which is used to inform of that an entity is dependent upon an async event for its execution.Component ID: 56be1662-ff63-4179-9200-3fcd8dc38673Base Type: nvidia::gxf::SchedulingTermnvidia::gxf::MessageAvailableFrequencyThrottler#A component which is used to execute an entity at specific frequency or sooner if there are a minimum number of incoming messages in its receivers.Component ID: 5ae1d56c-a196-11ed-8759-ef34a33d45a6Base Type: nvidia::gxf::SchedulingTermParameters#execution_frequencyThe recess period indicates the minimum amount of time which has to pass before the entity is permitted to execute again. The period is specified
as a string containing of a number and an (optional) unit. If no unit is given the value is assumed to be in nanoseconds.
Supported units are: Hz, s, ms. Example: 10ms, 10000000, 0.2s, 50HzFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGreceiversThe scheduling term permits execution if the given channels have at least a given number of messages available.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_CUSTOMsampling_modeThe sampling method to use when checking for messages in receiver queues. Option: SumOfAll,PerReceiverFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_CUSTOMmin_sizesThe scheduling term permits execution if all given receivers have at least the given number of messages available in this list.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_CUSTOMmin_sumThe scheduling term permits execution if the sum of message counts of all receivers have at least the given number of messages available.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64nvidia::gxf::MemoryAvailableSchedulingTerm#A component waiting until a minimum amount of memory is available.Component ID: f976d23a-8220-74e2-a5d9-04ed71b2454aBase Type: nvidia::gxf::SchedulingTermParameters#allocatorThe allocator to wait on.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Allocatormin_bytesThe minimum number of bytes that must be available for the codelet to get scheduled. Exclusive with min_blocks.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64min_blocksThe minimum number of blocks that must be available for the codelet to get scheduled. On allocators that do not support
block allocation, this behaves the same as min_bytes. Exclusive with min_bytes.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_UINT64nvidia::gxf::GraphWorker#A GXF System component which governs the execution of one or multiple graph segments.
The key ingredients are event based thread, IPC server, and IPC client.
The graph segments can be provided by users via YAML config or C++ API.Component ID: 54b88529-2c91-436b-83b6-7f5c10369354Base Type: nvidia::gxf::GraphWorkerParameters#serverGXF IPC server to handle the service callbacks in GraphWorker. Example server implementation can be nvidia::gxf::HttpServerFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::IPCServerclientGXF IPC client to communicate with the IPC server. Example client implementation can be nvidia::gxf::HttpIPCClientFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::IPCClientgraph-specsA dictionary of graph specs that are executed by this GraphWorker. The schema for each entry is:
{user_given_segment_name: {app-path: , parameter-path: , manifest-path: , severity: }}Example:graph-specs:ucx_upstream:app-path:gxf/ucx/tests/test_ping_ucx_tx.yamlmanifest-path:gxf/test/distributed/test_graph_worker_manifest.yamlseverity:4ucx_downstream:app-path:gxf/ucx/tests/test_ping_ucx_rx.yamlmanifest-path:gxf/test/distributed/test_graph_worker_manifest.yamlseverity:4Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_CUSTOMdriver-reconnection-timesHow many times to try to reconnect the GraphDriver at startup. Abandon the execution after the last try.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64nvidia::gxf::GraphDriver#A GXF System component which coordinates the execution of GraphWorker, resolving graph segments UCX connection addresses.Listen to remote or local GraphWorkers that each runs one or more segments.Register all GraphWorkers until all segments are discoveredResolve connection address between each segment pairSend result address to each target segment via GraphWorker that manages the segmentComponent ID: 76ca3719-fcd1-4ae3-8e06-8ce161b0f881Base Type: nvidia::gxf::GraphDriverParameters#serverGXF IPC server to handle the service callbacks in GraphDriver. Example server implementation can be nvidia::gxf::HttpServerFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::IPCServerclientGXF IPC client to communicate with the IPC server. Example client implementation can be nvidia::gxf::HttpIPCClientFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::IPCClientconnectionsA dictionary of graph segment connections. A segment connection consists of source field and target field.
The schema for each entry is: {Connections: [source: , target: ]}
The schema for source and target is: user_given_segment_name.entity_name.queue_nameExample:connections:-source:ucx_upstream.tx.signaltarget:ucx_downstream.rx.signalFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_CUSTOMnvidia::gxf::GreedyScheduler#A simple poll-based single-threaded scheduler which executes codelets.Component ID: 869d30ca-a443-4619-b988-7a52e657f39bBase Type: nvidia::gxf::SchedulerParameters#clockThe clock used by the scheduler to define flow of time. Typical choices are aRealtimeClockor aManualClock.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clockmax_duration_msThe maximum duration for which the scheduler will execute (in ms). If not specified the scheduler will run until all work is done. If periodic terms are present this means the application will run indefinitely.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64realtimeThis parameter is deprecated. Assign a clock directly.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLstop_on_deadlockIf enabled the scheduler will stop when all entities are in a waiting state, but no periodic entity exists to break the dead end. Should be disabled when scheduling conditions can be changed by external actors, for example by clearing queues manually.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLnvidia::gxf::MultiThreadScheduler#A multi thread scheduler that executes codelets for maximum throughput.Component ID: de5e0646-7fa5-11eb-a5c4-330ebfa81bbfBase Type: nvidia::gxf::SchedulerParameters#check_recession_perios_msThe maximum duration for which the scheduler would wait (in ms) when an entity is not ready to run yet.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64clockThe clock used by the scheduler to define flow of time. Typical choices are aRealtimeClockor aManualClock.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clockmax_duration_msThe maximum duration for which the scheduler will execute (in ms). If not specified the scheduler will run until all work is done. If periodic terms are present this means the application will run indefinitely.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64stop_on_deadlockIf enabled the scheduler will stop when all entities are in a waiting state, but no periodic entity exists to break the dead end. Should be disabled when scheduling conditions can be changed by external actors, for example by clearing queues manually.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLworker_thread_numberNumber of threads.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64Default: 1nvidia::gxf::EpochScheduler#A scheduler for running loads in externally managed threads.Component ID: 3d175ab4-2e0d-11ec-8d3d-0242ac130003Base Type: nvidia::gxf::SchedulerParameters#clockThe clock used by the scheduler to check maximum time budget. Typical choice is aRealtimeClock.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clocknvidia::gxf::EventBasedScheduler#A multi thread event based scheduler that executes codelets for maximum throughput.Component ID: 99bef5a8-48bc-11ee-be56-0242ac120002Base Type: nvidia::gxf::SchedulerParameters#clockThe clock used by the scheduler to define flow of time. Typical choices are aRealtimeClockor aManualClock.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clockmax_duration_msThe maximum duration for which the scheduler will execute (in ms). If not specified the scheduler will run until all work is done. If periodic terms are present this means the application will run indefinitely.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64stop_on_deadlockIf enabled the scheduler will stop when all entities are in a waiting state, but no periodic entity exists to break the dead end. Should be disabled when scheduling conditions can be changed by external actors, for example by clearing queues manually.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: Trueworker_thread_numberNumber of threads.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64Default: 1thread_pool_allocation_autoIf enabled, only one thread pool will be created. If disabled, user should enumerate pools and prioritiesFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: Truestop_on_deadlock_timeoutScheduler will wait this amount of time when stop_on_dead_lock indicates should stop. It will reset if a job comes in during the wait. Negative value means not stop on deadlock.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_INT64Default: 0nvidia::gxf::BlockMemoryPool#A memory pools which provides a maximum number of equally sized blocks of memory.Component ID: 92b627a3-5dd3-4c3c-976c-4700e8a3b96aBase Type: nvidia::gxf::AllocatorParameters#block_sizeThe size of one block of memory in byte. Allocation requests can only be fulfilled if they fit into one block. If less memory is requested still a full block is issued.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64do_not_use_cuda_malloc_hostIf enabled operator new will be used to allocate host memory instead ofcudaMallocHost.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: Truenum_blocksThe total number of blocks which are allocated by the pool. If more blocks are requested allocation requests will fail.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64storage_typeThe memory storage type used by this allocator. Can be kHost (0) or kDevice (1) or kSystem (2).Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 0nvidia::gxf::UnboundedAllocator#Allocator that uses dynamic memory allocation without an upper bound.Component ID: c3951b16-a01c-539f-d87e-1dc18d911ea0Base Type: nvidia::gxf::AllocatorParameters#do_not_use_cuda_malloc_hostIf enabled operator new will be used to allocate host memory instead ofcudaMallocHost.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: Truenvidia::gxf::ThreadPool#Component ID: 4025b68b-206b-4b3d-a088-f4805fdf8703Base Type: nvidia::gxf::ResourceBaseParameters#initial_sizeInitial number of worker threads in the pool.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64Default: 0priorityPriority level for threads in the pool. Default is 0 (low). Can also be set to 1 (medium) or 2 (high).Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64Default: 0nvidia::gxf::GPUDevice#Component ID: 2036939f-a32a-43ee-83f8-826576d8f170Base Type: nvidia::gxf::ResourceBaseParameters#dev_idCreate CUDA Stream on which device.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 0nvidia::gxf::CPUThread#Component ID: 34f46728-496d-4d8b-b9c9-c5a54de5d3a0Base Type: nvidia::gxf::ComponentParameters#pin_entitySet the cpu_core to be pinned to a worker thread or not.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: falsenvidia::gxf::Forward#Forwards incoming messages at the receiver to the transmitter.Component ID: 97cee543-8fb5-4541-8ff7-589318187ec0Base Type: nvidia::gxf::CodeletParameters#inThe channel for incoming messages.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::ReceiveroutThe channel for outgoing messages.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmitternvidia::gxf::Topic#Adds transmitters/receivers to a topic.Component ID: 70529494-8bca-49ef-51bf-44b08ecf460bBase Type: nvidia::gxf::ComponentParameters#topic_nameTopic name.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGtransmittersTransmitters that will be added to this topic.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::TransmitterreceiversReceivers that will be added to this topic.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::Tensor#A component which holds a single tensor.Component ID: 377501d6-9abf-447c-a617-0114d4f33ab8Defined in: gxf/std/tensor.hppnvidia::gxf::Timestamp#Holds message publishing and acquisition related timing information.Component ID: d1095b10-5c90-4bbc-bc89-601134cb4e03Defined in: gxf/std/timestamp.hppnvidia::gxf::MultiSourceTimestamp#Holds timestamps from various sources.Component ID: 872e77ec-bde8-11ed-afa1-0242ac120002Defined in: gxf/std/timestamp.hppnvidia::gxf::Metric#Collects, aggregates, and evaluates metric data.Component ID: f7cef803-5beb-46f1-186a-05d3919842acBase Type: nvidia::gxf::ComponentParameters#aggregation_policyAggregation policy used to aggregate individual metric samples. Choices:{mean, min, max}.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_STRINGlower_thresholdLower threshold of the metric’s expected range.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_FLOAT64upper_thresholdUpper threshold of the metric’s expected range.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_FLOAT64nvidia::gxf::JobStatistics#Collects runtime statistics.Component ID: 2093b91a-7c82-11eb-a92b-3f1304ecc959Base Type: nvidia::gxf::ComponentParameters#clockThe clock component instance to retrieve time from.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Clockcodelet_statisticsIf set to true, JobStatistics component will collect performance statistics related to codelets.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_BOOLjson_file_pathIf provided, all the collected performance statistics data will be dumped into a json file.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_STRINGnvidia::gxf::Broadcast#Messages arrived on the input channel are distributed to all transmitters.Component ID: 3daadb31-0bca-47e5-9924-342b9984a014Base Type: nvidia::gxf::CodeletParameters#modeThe broadcast mode. Can be Broadcast or RoundRobin.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_CUSTOMsourceFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::Gather#All messages arriving on any input channel are published on the single output channel.Component ID: 85f64c84-8236-4035-9b9a-3843a6a2026fBase Type: nvidia::gxf::CodeletParameters#sinkThe output channel for gathered messages.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmittertick_source_limitMaximum number of messages to take from each source in one tick. 0 means no limit.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT64nvidia::gxf::TensorCopier#Copies tensor either from host to device or from device to host.Component ID: c07680f4-75b3-189b-8886-4b5e448e7bb6Base Type: nvidia::gxf::CodeletParameters#allocatorMemory allocator for tensor dataFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::AllocatormodeConfiguration to select what tensors to copy:kCopyToDevice (0) - copies to device memory, ignores device allocationkCopyToHost (1) - copies to pinned host memory, ignores host allocationkCopyToSystem (2) - copies to system memory, ignores system allocation.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32receiverReceiver for incoming entities.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::ReceivertransmitterTransmitter for outgoing entities.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmitternvidia::gxf::TimedThrottler#Publishes the received entity respecting the timestamp within the entity.Component ID: ccf7729c-f62c-4250-5cf7-f4f3ec80454bBase Type: nvidia::gxf::CodeletParameters#execution_clockClock on which the codelet is executed by the scheduler.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::ClockreceiverChannel to receive messages that need to be synchronized.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receiverscheduling_termScheduling term for executing the codelet.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::TargetTimeSchedulingTermthrottling_clockClock which the received entity timestamps are based on.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::ClocktransmitterTransmitter channel publishing messages at appropriate timesteps.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmitternvidia::gxf::Vault#Safely stores received entities for further processing.Component ID: 1108cb8d-85e4-4303-ba02-d27406ee9e65Base Type: nvidia::gxf::CodeletParameters#drop_waitingIf too many messages are waiting the oldest ones are dropped.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLmax_waiting_countThe maximum number of waiting messages. If exceeded the codelet will stop pulling messages out of the input queue.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64sourceReceiver from which messages are taken and transferred to the vault.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receivernvidia::gxf::Subgraph#Helper component to import a subgraph.Component ID: 576eedd7-7c3f-4d2f-8c38-8baa79a3d231Base Type: nvidia::gxf::ComponentParameters#locationYamlsource of the subgraph.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGnvidia::gxf::EndOfStream#A component which represents end-of-stream notification.Component ID: 8c42f7bf-7041-4626-9792-9eb20ce33cceDefined in: gxf/std/eos.hppnvidia::gxf::Synchronization#Component to synchronize messages from multiple receivers based on theacq_time.Component ID: f1cb80d6-e5ec-4dba-9f9e-b06b0def4443Base Type: nvidia::gxf::CodeletParameters#inputsAll the inputs for synchronization. Number of inputs must match that of the outputs.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::ReceiveroutputsAll the outputs for synchronization. Number of outputs must match that of the inputs.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmittersigned char#Component ID: 83905c6a-ca34-4f40-b474-cf2cde8274deunsigned char#Component ID: d4299e15-0006-d0bf-8cbd-9b743575e155short int#Component ID: 9e1dde79-3550-307d-e81a-b864890b3685short unsigned int#Component ID: 958cbdef-b505-bcc7-8a43-dc4b23f8ceadint#Component ID: b557ec7f-49a5-08f7-a35e-086e9d1ea767unsigned int#Component ID: d5506b68-5c86-fedb-a2a2-a7bae38ff3eflong int#Component ID: c611627b-6393-365f-d234-1f26bfa8d28flong unsigned int#Component ID: c4385f5b-6e25-01d9-d7b5-6e7cadc704e8float#Component ID: a81bf295-421f-49ef-f24a-f59e9ea0d5d6double#Component ID: d57cee59-686f-e26d-95be-659c126b02eabool#Component ID: c02f9e93-d01b-1d29-f523-78d2a9195128Python Bindings#Python binings for the standard extension’s components enable them to be used in python codelets. These python bindings are present ingxf.stdand contain the following:Clock#fromgxf.stdimportClockThe python binding fornvidia::gxf::Clock.Methods:time()Returns: float The current time of the clock. Time is measured in seconds.timestamp()Returns: float The current timestamp of the clock. Timestamps are measured in nanoseconds.Receiver#fromgxf.stdimportReceiverThe python binding fornvidia::gxf::Receivercomponent which connects with a transmitter and can receive a message.gxf.std.Receiverhas the following methods:receive()Returns:gxf.std.Entity- Receives the next entity from the main stage.sync()Returns:None- Moves entities which recently arrived to the main stage.back_size()Returns:Integer- The total number of entities which have recently arrived but are not yet on the main stage.size()Returns:Integer- The total number of entities present in the main stage.capacity()Returns:Integer- The total number of entities the receiver can hold.Transmitter#fromgxf.stdimportTransmitterThe python binding fornvidia::gxf::Transmittercomponent which connects with a receiver and can transmit a message.gxf.std.Transmitterhas the following methods:publish(message,acqtime):ValueReturn TypeDescriptionmessagegxf.std.EntityA message entity.acqtimeIntegerAcqusition time of the messageReturns:String- Error message or Success.back_size()Returns:Integer- The total number of entities which have recently arrived but are not yet on the main stage.size()Returns:Integer- The total number of entities present in the main stage.capacity()Returns:Integer- The total number of entities the transmitter can hold.PrimitiveType#fromgxf.stdimportPrimitiveTypeA python enum which defines types of data types.ValueDescriptionkCustomCustom data typekInt8Signed Integer 8 byteskUnsigned8Unsigned Interger 8 byteskInt16Signed Integer 16 byteskUnsigned16Unsigned Integer 16 byteskInt32Signed Integer 32 byteskUnsigned32Unsigned Integer 32 byteskInt64Signed Integer 64 byteskUnsigned64Unsigned Integer 64 byteskFloat32Floating Point 32 byteskFloat64Floating point 64 bytesShape#fromgxf.stdimportShapeShape of the tensor data.Shape(dims)ParameterDescriptiondimsListA list containing the size of each dimensionReturns:gxf.std.Shapewith set values.rank()Returns:IntegerRank of the tensor Dimensionsize()Returns:IntegerNumber of elements in the tensordimension(index)Returns:IntegerSize of the dimension at indexMemoryStorageType#fromgxf.stdimportMemoryStorageTypeA python enum which defines where the data is stored.ValueDescriptionkHostData is stored on HostkDeviceData is stored on the Device (GPU)kSystemData is stored on the System (TODO(sl)Tensor#fromgxf.stdimportTensorThe python binding fornvidia::gxf::Tensorcomponent which contains the tensor data which can be attached to messages.gxf.std.Tensorhas the following methods:get_tensor_info():Returns: TupleTuple ValuesReturn TypeDescriptionbuffer pointerpybind11 objectContaining the buffer pointersizeIntegerSize of one elementdtypeStringDescription of the type of datarankIntegerRank of the tensordimsIntegerArray of size rank containing the dimensionsstrideIntegerArray of size rank containing the strides for each dimensionshape()Returns:gxf.std.Shape- Shape of the tensorelement_type()Returns:gxf.std.PrimitiveType- Element type of the data.storage_type()Returns:gxf.std.MemoryStorageType- The device on which the data is stored.reshape_custom(shape,element_type,bytes_per_element,strides,storage_type,allocator)ParameterReturn TypeDescriptionshapegxf.std.ShapeShape of the tensorelement_typePrimitiveTypeType of elementsbytes_per_elementIntegerSize of individual elementstridesIntegerArray of size rank containing the strides for each dimensionstorage_typegxf.std.MemoryStorageTypeThe deive on which the data is stored.allocatorgxf.std.AllocatorAllocator to provide memory for the tensor data.Returns:Nonegxf.std.add_to_entity(entity,name=nullptr)ParameterReturn TypeDescriptionentitygxf.std.EntityA message entity to attach the tensornameStringName of the tensorReturns:gxf.std.TensorAdded Tensorgxf.std.get_from_entity(entity,name=nullptr)ParameterReturn TypeDescriptionentitygxf.std.EntityA message entity to extract the tensornameStringName of the tensorReturns:gxf.std.TensorTensor, if present. Throwsvalue_errorif not.find_all_from_entity(entity)ParameterReturn TypeDescriptionentitygxf.std.EntityA message entity to extract all the tensorsReturns:List(Tensors)A list of tensors present in the message entity.Allocator#fromgxf.stdimportAllocatorThe python binding fornvidia::gxf::Allocatorto allocate memory on device, host, or system needed for gxf.std.Tensor.custom_reshape().previousGXF Stream SyncnextPython CodeletsOn this pageInterfacesnvidia::gxf::Codeletnvidia::gxf::Clocknvidia::gxf::Systemnvidia::gxf::Queuenvidia::gxf::Routernvidia::gxf::Transmitternvidia::gxf::Receivernvidia::gxf::Schedulernvidia::gxf::SchedulingTermnvidia::gxf::Allocatornvidia::gxf::Monitornvidia::gxf::IPCServernvidia::gxf::IPCClientnvidia::gxf::ResourceBasenvidia::gxf::ControllerComponentsnvidia::gxf::RealtimeClockParametersnvidia::gxf::ManualClockParametersnvidia::gxf::SyntheticClockParametersnvidia::gxf::SystemGroupnvidia::gxf::MessageRouternvidia::gxf::NetworkRouternvidia::gxf::RouterGroupnvidia::gxf::DoubleBufferTransmitterParametersnvidia::gxf::DoubleBufferReceiverParametersnvidia::gxf::ConnectionParametersnvidia::gxf::PeriodicSchedulingTermParametersnvidia::gxf::CountSchedulingTermParametersnvidia::gxf::TargetTimeSchedulingTermParametersnvidia::gxf::DownstreamReceptiveSchedulingTermParametersnvidia::gxf::MessageAvailableSchedulingTermParametersnvidia::gxf::MultiMessageAvailableSchedulingTermParametersnvidia::gxf::ExpiringMessageAvailableSchedulingTermParametersnvidia::gxf::BooleanSchedulingTermParametersnvidia::gxf::BTSchedulingTermParametersnvidia::gxf::AsynchronousSchedulingTermnvidia::gxf::MessageAvailableFrequencyThrottlerParametersnvidia::gxf::MemoryAvailableSchedulingTermParametersnvidia::gxf::GraphWorkerParametersnvidia::gxf::GraphDriverParametersnvidia::gxf::GreedySchedulerParametersnvidia::gxf::MultiThreadSchedulerParametersnvidia::gxf::EpochSchedulerParametersnvidia::gxf::EventBasedSchedulerParametersnvidia::gxf::BlockMemoryPoolParametersnvidia::gxf::UnboundedAllocatorParametersnvidia::gxf::ThreadPoolParametersnvidia::gxf::GPUDeviceParametersnvidia::gxf::CPUThreadParametersnvidia::gxf::ForwardParametersnvidia::gxf::TopicParametersnvidia::gxf::Tensornvidia::gxf::Timestampnvidia::gxf::MultiSourceTimestampnvidia::gxf::MetricParametersnvidia::gxf::JobStatisticsParametersnvidia::gxf::BroadcastParametersnvidia::gxf::GatherParametersnvidia::gxf::TensorCopierParametersnvidia::gxf::TimedThrottlerParametersnvidia::gxf::VaultParametersnvidia::gxf::SubgraphParametersnvidia::gxf::EndOfStreamnvidia::gxf::SynchronizationParameterssigned charunsigned charshort intshort unsigned intintunsigned intlong intlong unsigned intfloatdoubleboolPython BindingsClockReceiverTransmitterPrimitiveTypeShapeMemoryStorageTypeTensorAllocatorPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.