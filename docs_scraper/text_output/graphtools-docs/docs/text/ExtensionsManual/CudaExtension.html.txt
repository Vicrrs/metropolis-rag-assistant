CudaExtension — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsCudaExtensionCudaExtension#Extension for CUDA operations.UUID: d63a98fa-7882-11eb-a917-b38f664f399cVersion: 2.6.0Author: NVIDIALicense: LICENSEComponents#nvidia::gxf::CudaStream#Holds and provides access to nativecudaStream_t.nvidia::gxf::CudaStreamhandle must be allocated bynvidia::gxf::CudaStreamPool. Its lifecycle is valid until explicitly recycled throughnvidia::gxf::CudaStreamPool.releaseStream()or implicitly untilnvidia::gxf::CudaStreamPoolis deactivated.You may callstream()to get the nativecudaStream_thandle, and to submit GPU operations. After the submission, GPU takes over the input tensors/buffers and keeps them in use. To prevent host carelessly releasing these in-use buffers, CUDA Codelet needs to callrecord(event,input_entity,sync_cb)to extendinput_entity’s lifecycle until GPU completely consumes it.
Alternatively, you may callrecord(event,event_destroy_cb)for nativecudaEvent_toperations and free in-use resource viaevent_destroy_cb.It is required to have anvidia::gxf::CudaStreamSyncin the graph pipeline after all the CUDA operations. See more details innvidia::gxf::CudaStreamSyncComponent ID: 5683d692-7884-11eb-9338-c3be62d576beDefined in: gxf/cuda/cuda_stream.hppnvidia::gxf::CudaStreamId#Holds CUDA stream Id to deducenvidia::gxf::CudaStreamhandle.stream_cidshould benvidia::gxf::CudaStreamcomponent id.Component ID: 7982aeac-37f1-41be-ade8-6f00b4b5d47cDefined in: gxf/cuda/cuda_stream_id.hppnvidia::gxf::CudaEvent#Holds and provides access to nativecudaEvent_thandle.When anvidia::gxf::CudaEventis created, you’ll need to initialize a nativecudaEvent_tthroughinit(flags,dev_id),  or set third party event throughinitWithEvent(event,dev_id,free_fnc). The event keeps valid untildeinitis called explicitly otherwise gets recycled in destructor.Component ID: f5388d5c-a709-47e7-86c4-171779bc64f3Defined in: gxf/cuda/cuda_event.hppnvidia::gxf::CudaStreamPool#CudaStreamallocation.You must explicitly callallocateStream()to get a validnvidia::gxf::CudaStreamhandle. This component would hold all the its allocatednvidia::gxf::CudaStreamentities untilreleaseStream(stream)is called explicitly or theCudaStreamPoolcomponent is deactivated.Component ID: 6733bf8b-ba5e-4fae-b596-af2d1269d0e7Base Type: nvidia::gxf::AllocatorParameters#dev_idGPU device id.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default Value: 0stream_flagsFlag values to create CUDA streams.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default Value: 0stream_priorityPriority values to create CUDA streams.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default Value: 0reserved_sizeUser-specified file name without extension.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default Value: 1max_sizeMaximum Stream Size.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default Value: 0, no limitation.nvidia::gxf::CudaStreamSync#Synchronize all CUDA streams which are carried by message entities.This codelet is required to get connected in the graph pipeline after all CUDA ops codelets. When a message entity is received, it would find all of thenvidia::gxf::CudaStreamIdin that message, and extract out eachnvidia::gxf::CudaStream. With eachCudaStreamhandle, it synchronizes all previousnvidia::gxf::CudaStream.record()events, along with all submitted GPU operations before this point.NoteCudaStreamSyncmust be set in the graph whennvidia::gxf::CudaStream.record()is used, otherwise it may cause memory leak.Component ID: 0d1d8142-6648-485d-97d5-277eed00129cBase Type: nvidia::gxf::CodeletParameters#rxReceiver to receive all messages carryingnvidia::gxf::CudaStreamId.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::ReceivertxTransmitter to send messages to downstream.Flags: GXF_PARAMETER_FLAGS_OPTIONALType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Transmitternvidia::gxf::CudaAllocator#Base class for RMMAllocator and StreamOrderedAllocator/Component ID: cac15f93-6438-4ed3-bc61-b5dba25b6f91Base Type: nvidia::gxf::AllocatorDefined in: gxf/cuda/cuda_allocator.hppnvidia::gxf::StreamOrderedAllocator#Memory Allocator with stream order memory allocation on GPU device.Component ID: 63d1d168-13d7-11ef-931a-0be4a6378384Base Type: nvidia::gxf::CudaAllocatorParameters#gpu_deviceGPU device resource from which is used allocate CUDA memory.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::GPUDevicedevice_memory_initial_sizeThe initial memory pool size used by device memory resource. The size is specified as a string containing a number and an (optional) unit.
If no unit is given the value is assumed to be in bytes.
Supported units are: B, KB, MB, GB, TB.Flags: GXF_PARAMETER_FLAGS_NONEType:GXF_PARAMETER_TYPE_STRINGDefault: “16MB” (non-Jetson machine) or “8MB” (Jetson machine)device_memory_max_sizeThe maximum memory pool size used by device memory resource. The size is specified as a string containing a number and an (optional) unit.
If no unit is given the value is assumed to be in bytes.
Supported units are: B, KB, MB, GB, TB.Flags: GXF_PARAMETER_FLAGS_NONEType:GXF_PARAMETER_TYPE_STRINGDefault: “32MB” (non-Jetson machine) or “16MB” (Jetson machine)release_thresholdThe release threshold specifies the maximum amount of memory the pool caches. The size is specified as a string containing a number and an (optional) unit.
If no unit is given the value is assumed to be in bytes.
Supported units are: B, KB, MB, GB, TB.Flags: GXF_PARAMETER_FLAGS_NONEType:GXF_PARAMETER_TYPE_STRINGDefault: 0previousExtensionsnextGXF Stream SyncOn this pageComponentsnvidia::gxf::CudaStreamnvidia::gxf::CudaStreamIdnvidia::gxf::CudaEventnvidia::gxf::CudaStreamPoolParametersnvidia::gxf::CudaStreamSyncParametersnvidia::gxf::CudaAllocatornvidia::gxf::StreamOrderedAllocatorParametersPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.