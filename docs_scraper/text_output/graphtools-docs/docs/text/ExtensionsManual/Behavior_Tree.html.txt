Behavior Trees — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsBehavior TreesBehavior Trees#Behavior tree codelets are one of the mechanisms to control the flow of tasks in GXF. They follow the same general behavior as classical behavior trees, with some useful additions for robotics applications. This document gives an overview of the general concept, the available behavior tree node types, and some examples of how to use them individually or in conjunction with
each other.General Concept#Behavior trees consist of n-ary trees of entities that can have zero or more children. The conditional execution of parent entity is based on the status of execution of the children. A behavior tree is graphically represented as a directed tree in which
the nodes are classified as root, control flow nodes, or execution nodes
(tasks). For each pair of connected nodes, the outgoing node is called
parent and the incoming node is called child.The execution of a behavior tree starts from the root which sends ticks
with a certain frequency to its child. When the execution of a node in
the behavior tree is allowed, it returns to the parent a
status running if its execution has not finished yet, success if it has
achieved its goal, or failure otherwise. The behavior tree also uses a
controller component for controlling the entity’s termination policy and
the execution status. One of the controller behaviors currently
implemented for Behavior Tree isEntityCountFailureRepeatController, which repeats the entity on
failure up torepeat_counttimes before deactivating it.GXF supports several behavior tree codelets which are explained in the
following section.Behavior Tree Codelets#Each behavior tree codelet can have a set of parameters defining how it
should behave. Note that in all the examples given below, the naming convention for configuring thechildrenparameter for root codelets is[child_codelet_name\child_codelet_scheduling_term].Constant Behavior#After each tick period, switches its own status to the configured
desired constant status.ParameterDescriptions_termscheduling term used for scheduling the entity itselfconstant_statusThe desired status to switch to during each tick time.An example diagram depicting Constant behavior used in conjunction with a Sequence behavior defined for root entity is shown belowHere, the child1 is configured to return a constant status of success
(GXF_BEHAVIOR_SUCCESS) and child2 returns failure (GXF_BEHAVIOR_FAILURE), resulting into the root node (configured to exhibit sequence behavior) returning GXF_BEHAVIOR_FAILURE.The controller for each child can be configured to repeat the execution
on failure. A code snippet of configuring the example described is shown below.name:rootcomponents:-name:root_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:root_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:true-name:root_codelettype:nvidia::gxf::SequenceBehaviorparameters:children:[child1/child1_st,child2/child2_st]s_term:root_st---name:child2components:-name:child2_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:3return_behavior_running_if_failure_repeat:true-name:child2_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:false-name:child2_codelettype:nvidia::gxf::ConstantBehaviorparameters:s_term:child2_stconstant_status:1Parallel Behavior#Runs its child nodes in parallel. By default, succeeds when all child
nodes succeed, and fails when all child nodes fail. This behavior can be
customized using the parameters below.ParameterDescriptions_termscheduling term used for scheduling the entity itselfchildrenChild entitiessuccess_thresholdNumber of successful children required for success. A value of -1 means all children must succeed for this node to succeed.failure_thresholdNumber of failed children required for failure. A value of -1 means all children must fail for this node to fail.The diagram below shows a graphical representation of a parallel
behavior configured with failure_threshold configured as -1. Hence, the
root node returns GXF_BEHAVIOR_SUCCESS even if one child returns a
failure status.A code snippet to configure the example described is shown below.name:rootcomponents:-name:root_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:root_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:true-name:root_codelettype:nvidia::gxf::ParallelBehaviorparameters:children:[child1/child1_st,child2/child2_st]s_term:root_stsuccess_threshold:1failure_threshold:-1Repeat Behavior#Repeats its only child entity. By default, won’t repeat when the child
entity fails. This can be customized using the parameters below.ParameterDescriptions_termscheduling term used for scheduling the entity itselfrepeat_after_failureDenotes whether to repeat the child after it has failed.The diagram below shows a graphical representation of a repeat behavior.
The root entity can be configured to repeat the only child to repeat
after failure. It succeeds when the child entity succeeds.A code snippet to configure a repeat behavior is as shown below -name:repeat_knockcomponents:-name:repeat_knock_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:repeat_knock_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:false-name:repeat_codelettype:nvidia::gxf::RepeatBehaviorparameters:s_term:repeat_knock_stchildren:[knock_on_door/knock_on_door_st]repeat_after_failure:true---Selector Behavior#Runs all child entities in sequence until one succeeds, then reports
success. If all child entities fail (or no child entities are present),
this codelet fails.ParameterDescriptions_termscheduling term used for scheduling the entity itselfchildrenChild entitiesThe diagram below shows a graphical representation of a Selector
behavior. The root entity starts child_1, child_2 and child_3 in a
sequence. Although child_1 and child_2 fail, the root entity will
return success since child_3 returns successfully.A code snippet to configure a selector behavior is as shown below -name:rootcomponents:-name:root_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:root_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:true-name:root_sel_codelettype:nvidia::gxf::SelectorBehaviorparameters:children:[door_distance/door_distance_st,door_detected/door_detected_st,knock/knock_st]s_term:root_st---name:door_distancecomponents:-name:door_distance_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:door_distance_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:false-name:door_disttype:nvidia::gxf::SequenceBehaviorparameters:children:[]s_term:door_distance_st---Sequence Behavior#Runs its child entities in sequence, in the order in which they are
defined. Succeeds when all child entities succeed or fails as soon as
one child entity fails.ParameterDescriptions_termscheduling term used for scheduling the entity itselfchildrenChild entitiesThe diagram below shows a graphical representation of a Sequence
behavior. The root entity starts child_1, child_2 and child_3 in a
sequence. Although child_1 and child_2 pass, the root entity will
return failure since child_3 returns failure.A code snippet to configure a sequence behavior is as shown below -name:rootcomponents:-name:root_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:root_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:true-name:root_codelettype:nvidia::gxf::SequenceBehaviorparameters:children:[child1/child1_st,child2/child2_st]s_term:root_stSwitch Behavior#Runs the child entity with the index defined as desired_behavior.ParameterDescriptions_termscheduling term used for scheduling the entity itselfchildrenChild entitiesdesired_behaviorThe index of child entity to switch to when this entity runsIn the code snippet shown below, the desired behavior of the root entity
is designated to be the the child at index 1. (scene). Hence, that is
the entity that is run.name:rootcomponents:-name:root_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:root_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:true-name:root_switch_codelettype:nvidia::gxf::SwitchBehaviorparameters:children:[scene/scene_st,ref/ref_st]s_term:root_stdesired_behavior:0---name:scenecomponents:-name:scene_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:0-name:scene_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:false-name:scene_seqtype:nvidia::gxf::SequenceBehaviorparameters:children:[pose/pose_st,det/det_st,seg/seg_st]s_term:scene_st---Timer Behavior#Waits for a specified amount of time delay and switches to the
configured result switch_status afterwards.ParameterDescriptions_termscheduling term used for scheduling the entity itselfclockClockswitch_statusConfigured result to switch to after the specified delaydelayConfigured delayIn the diagram shown below, the child entity switches to failure after a
configured delay period. The root entity hence returns failure.A code snippet for the same shown below -name:knock_on_doorcomponents:-name:knock_on_door_controllertype:nvidia::gxf::EntityCountFailureRepeatControllerparameters:max_repeat_count:10-name:knock_on_door_sttype:nvidia::gxf::BTSchedulingTermparameters:is_root:false-name:knocktype:nvidia::gxf::TimerBehaviorparameters:switch_status:1clock:sched/clockdelay:1s_term:knock_on_door_st---previousVideoDecoderExtensionnextUCX ExtensionOn this pageGeneral ConceptBehavior Tree CodeletsConstant BehaviorParallel BehaviorRepeat BehaviorSelector BehaviorSequence BehaviorSwitch BehaviorTimer BehaviorPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.