GXF Stream Sync — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsGXF Stream SyncGXF Stream Sync#GXF Stream Sync is responsible for synchronization across two CUDA codelets
without involving CPU wait. When two CUDA codelets are used, the first CUDA
codelet that generates the data or triggers the CUDA kernel is called as the
signaler. The second CUDA codelet that waits for the data or for the CUDA job
that was submitted by the upstream codelet is called as the waiter.
Signaling and waiting is based on a single synchronization object. Signaler
and waiter both make use of the same synchronization object. CUDA stream is
associated with the signaler and the waiter. The synchronization object
provides APIs for signaling and waiting mechanisms.Signaler#The signaler codelet upon submitting all the work on a specific CUDA stream,
will call the signalSemaphore API of synchronization object. Internally GXF
stream sync will make use of a fence to track the completion of the tasks
submitted on the CUDA stream. Signaling happens asynchronously on the GPU and
the signalSemaphore API returns immediately.
signalSemaphore will make use of the same CUDA stream on which the work was
submitted.
Signaler is also responsible for allocating the synchronization object and
passes the same as message entity to the waiter.Waiter#The waiter codelet will issue a call to waitSemaphore and submit its own work to
the same CUDA stream on which the signaler codelet submitted the work or it may
make use of another CUDA stream. GXF stream sync will wait until the fence is
signaled which ensures that the work submitted by the signaler codelet is
complete. Waiting happens asynchronously on the GPU and the waitSemaphore API
returns immediately.The below figure depicts concept of signaler and waiterFigure: Synchronization across two CUDA codeletsGxfStreamExtension#Extension for synchronization across two CUDA modules without a CPU wait.UUID:918e6ad7-8e1a-43aa-9b49-251d4b6072b0Version:0.5.0Author:NVIDIALicense:LICENSEComponents#nvidia::gxf::GxfStreamSync#Component which helps to achieve synchronization across two CUDA codelets
without involving CPU wait.
Holds a synchronization object that can be used by the signaler and the waiter.Component ID: 0011bee7-5d53-43ee-aafa-61485a436bc4Base Type: nvidia::gxf::ComponentDefined in: gxf/stream/stream_nvscisync.hppParameters#signalerParameter indicating the type of signaler.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32waiterParameter indicating the type of waiter.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32signaler_device_idDevice id on which signaler is running.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32waiter_device_idDevice id on which waiter is running.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32GXF Stream Sync Workflow#Cuda to Cuda codelet communication happens with the help of message.At the Signaler codelet#Add StreamSync handle to the mesage.Get the streamsync Handle.Initiatlize streamsyncAllocate Sync Object based on the signaler and waiterSet cuda Stream for signaler and waiterSubmit work of signaler codelet on CUDA stream.Signal Semaphore (Asynchronous call)Publish messageAt the Waiter Codelet#Receive the messageFind the streamsync handleWait Semaphore (Asynchronous call)Submit the work of waiter codelet on CUDA stream.Now wait will happen on the GPU asynchronouslyExample#Below example describes on how to make use of GXF Stream Sync in the application.Yaml file#1---2name:global3components:4-name:cuda_dot_pool5type:nvidia::gxf::BlockMemoryPool6parameters:7storage_type:1# cuda8block_size:163849num_blocks:1010-name:stream_sync_cuda_to_cuda11type:nvidia::gxf::StreamSync12parameters:13signaler:1# Cuda signaler14waiter:3# Cuda waiter15---16name:stream_tensor_generator17components:18-name:cuda_out19type:nvidia::gxf::DoubleBufferTransmitter20-name:generator21type:nvidia::gxf::stream::test::StreamTensorGeneratorNew22parameters:23cuda_tx:cuda_out24cuda_tensor_pool:global/cuda_pool25stream_sync:global/stream_sync_cuda_to_cuda26-type:nvidia::gxf::DownstreamReceptiveSchedulingTerm27parameters:28transmitter:cuda_out29min_size:130-type:nvidia::gxf::CountSchedulingTerm31parameters:32count:5033---34components:35-type:nvidia::gxf::Connection36parameters:37source:stream_tensor_generator/cuda_out38target:cuda_dotproduct/rx39---40name:cuda_dotproduct41components:42-name:rx43type:nvidia::gxf::DoubleBufferReceiver44parameters:45capacity:246-name:tx47type:nvidia::gxf::DoubleBufferTransmitter48-type:nvidia::gxf::MessageAvailableSchedulingTerm49parameters:50receiver:rx51min_size:152-type:nvidia::gxf::DownstreamReceptiveSchedulingTerm53parameters:54transmitter:tx55min_size:156-type:nvidia::gxf::stream::test::CublasDotProductNew57parameters:58rx:rx59tx:tx60tensor_pool:global/cuda_dot_pool61---previousCudaExtensionnextStandardExtensionOn this pageSignalerWaiterGxfStreamExtensionComponentsnvidia::gxf::GxfStreamSyncParametersGXF Stream Sync WorkflowAt the Signaler codeletAt the Waiter CodeletExampleYaml filePrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.