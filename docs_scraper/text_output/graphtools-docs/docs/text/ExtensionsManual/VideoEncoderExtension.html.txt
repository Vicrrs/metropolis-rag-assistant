VideoEncoderExtension — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsVideoEncoder...VideoEncoderExtension#NVIDIA GXF component for H.264 video encode.
The video encoder GXF extension is based on V4L2 APIs.
It uses the hardware video encode engine on the platform by interfacing with V4L2 APIs.
It gives out elimetary H.264 bit stream.This extension is supported on Tegra and dGPU platforms.For x86+dGPU, the extension has a dependency on DeepStream. Please install nvidia DeepStream SDK (version 7.1) before running pipelines for x86+dGPU.UUID: ea5c44e4-15db-4448-a3a6-f32004303338Version: 1.3.0Author: NVIDIALicense: ProprietaryComponents#This extension is implemented using three components:VideoEncoderRequest,VideoEncoderResponseandVideoEncoderContextnvidia::gxf::VideoEncoderRequest#This codelet starts H.264 video encoding process by queueing the input buffer.Component ID: 48251354-3a91-4033-9a0f-8ac2230f1c9cBase Type: nvidia::gxf::CodeletParameters#input_frameReceiver to get the input video Buffer(input frame data)Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Receiverinbuf_storage_typeInput buffer storage typeValid values:0: Host memory1: Device memoryFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT32Default: 1scheduling_termHandle to async scheduling term to get/set event state for VideoEncoderResponse codelet.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: gxf::Handle<gxf::AsynchronousSchedulingTerm>videoencoder_contextHandle to video encoder context componentFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: gxf::Handle<VideoEncoderContext>codecVideo codec to be used. Only H.264 supported.Valid values:0: H.264 codecFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 0input_heightInput frame heightFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT32input_widthInput frame widthFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT32input_formatInput frame color formatFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGValid values:nv12:  NV12(YUV420, 2 planes: Y, UV interleaved) pitch linear formatyuv420planar:  YUV420 planar(3 planes:Y,U,V) pitch linear formatprofileEncode profileValid values:0: Baseline Profile1: MainProfile2: High ProfileFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 2bitrateBitrate of the encoded stream, in bits per second. This parmaeter is used when rate_control_mode != 0.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 20000000framerateFrame rate (frames per second)Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 30levelH.264 level parameter(Maximum data rate and resolution). This parameter is supported on Tegra only.
For dGPU, the level parameter is automatically set based on input resolution and data rate.Valid values: 0 - 140: Level 1.0…14: Level 5.1Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 14hw_preset_typeEncode hw preset typeValid values:Tegra Presets: 0-40: V4L2_ENC_HW_PRESET_ULTRAFAST1: V4L2_ENC_HW_PRESET_FAST2: V4L2_ENC_HW_PRESET_MEDIUM3: V4L2_ENC_HW_PRESET_SLOWdGPU Presets: 0-70: p0…7: p7Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 1iframe_intervalInterval between two IDR frames. This parameter is supported on Tegra only.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 30rate_control_modeRate control mode. This parameter is supported on Tegra only.Valid values:0:Constant QP mode(Rate control off)1:CBR (Constant Bit Rate mode)2:VBR (variable Bit Rate mode)Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 1qpH.264 Quantization Parameter(QP). This QP value is used in constant QP mode. This parameter is supported on Tegra only.Valid values: 0-51Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT32Default: 20configPreset of encoder config parametersValid values:pframe_cqp: This config uses P frames, rate_control_mode = 0(Constant QP), QP=20, iframe_interval = 5, Main profile, hw_preset_type = 0iframe_cqp: This config uses all IDR frames(iframe_interval=1), rate_control_mode = 0(Constant QP), QP=20, Main profile, hw_preset_type = 0custom: Use the parmaters set by the userNote: pframe_cqp,iframe_cqp configs are supported on Tegra only. For dGPU, use ‘custom’ config.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGDefault: customnvidia::gxf::VideoEncoderResponse#This codelet completes the video encoding process by publishing encoded bit stream(H.264 elementary bit stream).Component ID: c88585c4-bce0-48d1-9680-2309e63c1ff8Base Type: nvidia::gxf::CodeletParameters#output_transmitterTransmitter to publish the compressed data(output tensor)Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::TransmitterpoolMemory pool for allocating output data(tensor).Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Allocatoroutbuf_storage_typeOutput buffer storage typeValid values:0: Host memory1: Device memoryFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 1videoencoder_contextHandle to video encoder context componentFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: gxf::Handle<VideoEncoderContext>nvidia::gxf::VideoEncoderContext#Component that implements the Video Encoder ContextComponent ID: c5bdaa9f4b15-43c7-8066-20195122a5b5Base Type:  nvidia::gxf::ComponentParameters#NonepreviousMultimediaExtensionnextVideoDecoderExtensionOn this pageComponentsnvidia::gxf::VideoEncoderRequestParametersnvidia::gxf::VideoEncoderResponseParametersnvidia::gxf::VideoEncoderContextParametersPrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.