UCX Extension — DeepStream documentationSkip to main contentBack to topCtrl+KDeepStream documentationDeepStream documentationTable of ContentsDeepStream Getting StartedWelcome to the DeepStream DocumentationMigration GuideInstallationQuickstart GuideDocker ContainersDeepStream SamplesC/C++ Sample Apps Source DetailsPython Sample Apps and Bindings Source DetailsDeepStream Reference Application - deepstream-appDeepStream Reference Application - deepstream-test5 appDeepStream Reference Application - deepstream-nmos appDeepStream Reference Application on GitHubSample Configurations and StreamsImplementing a Custom GStreamer Plugin with OpenCV Integration ExampleTAO toolkit Integration with DeepStreamTAO Toolkit Integration with DeepStreamTutorials and How-to'sDeepStream-3D Custom Apps and Libs TutorialsDeepStream PerformancePerformanceDeepStream AccuracyAccuracy Tuning ToolsDeepStream Custom ModelUsing a Custom Model with DeepStreamDeepStream Key FeaturesDeepStream-3D Sensor Fusion Multi-Modal Application and FrameworkDeepStream-3D Multi-Modal BEVFusion SetupDeepStream-3D Multi-Modal V2XFusion SetupSmart Video RecordIoTOn the Fly Model UpdateNTP Timestamp in DeepStreamAV Sync in DeepStreamDeepStream With REST API SeverDeepStream 3D Action Recognition AppDeepStream 3D Depth Camera AppDeepStream 3D Lidar Inference AppNetworked Media Open Specifications (NMOS) in DeepStreamGst-nvdspostprocess in DeepStreamDeepStream Can Orientation AppDeepStream Application MigrationApplication Migration to DeepStream 7.1 from DeepStream 7.0DeepStream Plugin GuideGStreamer Plugin OverviewMetaData in the DeepStream SDKGst-nvdspreprocess (Alpha)Gst-nvinferGst-nvinferserverGst-nvtrackerGst-nvstreammuxGst-nvstreammux NewGst-nvstreamdemuxGst-nvmultistreamtilerGst-nvdsosdGst-nvdsmetautilsGst-nvdsvideotemplateGst-nvdsaudiotemplateGst-nvvideoconvertGst-nvdewarperGst-nvofGst-nvofvisualGst-nvsegvisualGst-nvvideo4linux2Gst-nvjpegdecGst-nvimagedecGst-nvjpegencGst-nvimageencGst-nvmsgconvGst-nvmsgbrokerGst-nvdsanalyticsGst-nvdsudpsrcGst-nvdsudpsinkGst-nvdspostprocess (Alpha)Gst-nvds3dfilterGst-nvds3dbridgeGst-nvds3dmixerGst-NvDsUcxGst-nvdsxferGst-nvvideotestsrcGst-nvmultiurisrcbinGst-nvurisrcbinDeepStream Troubleshooting and FAQTroubleshootingFrequently Asked QuestionsDeepStream On WSL2DeepStream On WSLFAQ for Deepstream On WSLDeepStream API GuideDeepStream API GuidesDeepStream Service MakerWhat is Deepstream Service MakerService Maker for C/C++ DevelopersService Maker for Python Developers(alpha)Quick Start GuideIntroduction to Flow APIsIntroduction to Pipeline APIsAdvanced FeaturesMigrating Traditional Deepstream Apps to Service Maker Apps in PythonWhat is a Deepstream Service Maker PluginDeepstream LibrariesDeepStream Libraries (Developer Preview)Graph ComposerOverviewPlatformsSupported platformsGetting StartedApplication Development WorkflowCreating an AI ApplicationReference graphsExtension Development WorkflowDeveloping Extensions for DeepStreamDeepStream ComponentsGXF InternalsGXF InternalsGraph eXecution EngineGraph Execution EngineGraph Composer ContainersGraph Composer and GXF ContainersGXF Component InterfacesGXF Component InterfacesGXF Application API'sGXF App C++ APIsGXF App Python APIsGXF Runtime API'sGXF Core C++ APIsGXF Core C APIsGXF Core Python APIsExtension ManualExtensionsCudaExtensionGXF Stream SyncStandardExtensionPython CodeletsNetworkExtensionNvTritonExtSerializationExtensionMultimediaExtensionVideoEncoderExtensionVideoDecoderExtensionBehavior TreesUCX ExtensionHttpExtensionGrpcExtensionTensorRTExtensionNvDs3dProcessingExtNvDsActionRecognitionExtNvDsAnalyticsExtNvDsBaseExtNvDsCloudMsgExtNvDsConverterExtNvDsDewarperExtNvDsInferenceExtNvDsInferenceUtilsExtNvDsInterfaceExtNvDsMuxDemuxExtNvDsOpticalFlowExtNvDsOutputSinkExtNvDsSampleExtNvDsSampleModelsExtNvDsSourceExtNvDsTemplateExtNvDsTrackerExtNvDsTranscodeExtNvDsTritonExtNvDsUcxExtNvDsUdpExtNvDsVisualizationExtToolsRegistryRegistry Command Line InterfaceComposerContainer BuilderGXF Command Line InterfacePipetuner GuideFAQ GuideFAQDeepStream Legal InformationDeepStream End User License AgreementDeepStream FeedbackFeedback formExtensionsUCX ExtensionUCX Extension#Description#The UCX extension leverages the Unified Communication X (UCX) library to disaggregate a graph
in the GXF framework. This extension facilitates graph distribution across multiple hosts, enabling
the utilization of distributed GPU resources. UCX, an open-source library, is known for its
capability to speed up data across high-performance networks. It can tap into GPUDirect RDMA
technology to optimize network latencies and maximize distributed GPU traffic throughput. As a
result, users of this extension can harness the combined processing power of multiple GPUs
across diverse hosts. This can lead to substantial improvements in the speed and efficiency of
workflows. For more UCX details, visithttps://openucx.org.For ExampleThe subsequent diagram illustrates a disaggregated graph, composed of two tensor generators and a
tensor comparator. This tensor comparator assesses the outputs produced by these tensor generators.
The UcxExtension offers the capability to execute each entity on a distinct host.For this, every graph that uses the UCX extension needs a UcxContext component. This component hosts the
UCP context and takes care of all connections, manages the data, and ensures that all operations close
properly at deinitialization.
When you’re setting up your graph, replace your entity’s standard transmitter and receiver with the
UcxTransmitter and UcxReceiver components. Be sure to configure all the parameters, including the IP,
port, and others, to establish the connection properly.Currently, UCX supports sending messages of same type of memory (host or device).
This is the limitation of UCX not of the extension.UUID: 525f8a1a-dfb5-426b-8ddb-00c3ac839994Version: 0.8.0Author: NVIDIALicense: LICENSERequirements#NVIDIA ConnectX6-DX NIC or later.For more information on installing and configuring NICs, see:https://docs.nvidia.com/networking/display/ConnectX6VPI/IntroductionMellanox Open Fabrics Enterprise Distribution (MLNX_OFED) - version 5.5 or later, seehttps://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/For installation instructions, seehttps://docs.nvidia.com/networking/display/MLNXOFEDv551032/Installing+MLNX_OFEDIf installing the Mellanox OFED within a container:Make sure to install the kernel drivers in the host OS by passing the--allflag to mlnxofedinstall script.In the container you can only install the user space libraries using the--user-space-onlyflag to the mlnxofedinstall script.UCX - version 1.13 or later - needs to be compiled with CUDA support or use CUDA-enabled UCX packages
from the git repository directly, seeopenucx/ucxFor installation instructions, follow the Release build instructions from here:openucx/ucx.Note that UCX library should be compiled with CUDA as follows::
..  code-block:: bash$ ./contrib/configure-release –prefix=/install/path –enable-examples –with-java=no –with-cuda=/path/to/cuda –enable-mtComponents#UcxContext#UcxContext is essential within the GXF UCX extension. It’s responsible for initializing
the UCX context, running listeners, and managing connection requests and data receipts
for UcxReceivers.
UcxContext also sets up UcxTransmitter connections and resources. All connections -
for both UcxReceivers and UcxTransmitter - are managed within UcxContext.
Upon completion of the graph, UcxContext takes the lead in closing all connections
and releasing all resources.Component ID: 755d20a5-d794-467d-a86c-290eb2c32052Base Type: nvidia::gxf::NetworkContextDefined in: extensions/ucx/ucx_context.hppParameters#serializerThe entity serializer used by the component.
Should use UcxComponentSerializer type.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::EntitySerializerreconnectTry to reconnect if a connection is closed during run.
For UcxReceiver it would wait for a new connect request to establish new connection.
For UcxTransmitter it would send new connect request to the server to establish new connection.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: trueOptional GPU device resourceOptional resource for GPU device.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::GPUDeviceUcxTransmitter#Transmitter component for the GXF UCX extension.
This component is used as a transmitter of an entity.
At the initilization stage it would send connect request for connection establishment.
When the Network Router executes the SyncOutbox function, it invokes the sync_io method of the UcxTransmitter.
This method, in turn, transmits the message leveraging the UCX Active Message Rendezvous protocol.Component ID: 58165d03-78b7-4696-b200-71621f90aee7Base Type: nvidia::gxf::TransmitterDefined in: extensions/ucx/ucx_transmitter.hppParameters#capacityQueue’s capacity of the transmitter.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64policyQueue’s policy for handling data. Valid values:0: pop
1: reject
2: faultFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64receiver_addressReceiver address to connect to.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGportPort of the receiver.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32bufferSerialization Buffer to hold serialized data.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: Handle<UcxSerializationBuffer>maximum_connection_retriesMaximum retries for connection establishment.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32gpu_deviceOptional GPU device resource.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: Handle<GPUDevice>UcxReceiver#Receives data in the GXF UCX extension.
This component replace a receiver of an entity.
When an entity sends a message to this receiver, the UCXContext receives the message header, prompting
the router to execute the SyncInbox function. The SyncInbox function subsequently triggers the sync_io
method of the UcxReceiver. This method utilizes the UCX Active Message Rendezvous protocol to receive
the data content of the message.Component ID: e961132b-45d5-48b8-ac5d-2bb1a4a42279Base Type: nvidia::gxf::ReceiverDefined in: extensions/ucx/ucx_receiver.hppParameters#capacityQueue’s capacity of the receiver.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64Default: 10policyQueue’s policy for handling data. 0: pop, 1: reject, 2: faultFlags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_UINT64Default: 2addressListener address to receive data.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_STRINGDefault: “0.0.0.0”portListener’s port for receiving data.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_INT32Default: 13337bufferSerialization Buffer to hold serialized data.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: UcxSerializationBufferOptional GPU device resourceOptional resource for GPU device.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::GPUDeviceUcxComponentSerializer#Serializer for the components in the GXF UCX extension.
Currently supports serializaing Timestamps, Tensors, Video Buffer,
Audio Buffer and integer components.
Valid for sharing data between devices with the same endianness.Component ID: 64994305-4260-4f5c-ac5f-69da6dd6cfa5Base Type: nvidia::gxf::ComponentSerializerDefined in: extensions/ucx/ucx_component_serializer.hppParameters#allocatorMemory allocator for tensor components.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::AllocatorUcxEntitySerializer#Serializer for the entities in the GXF UCX extension.Component ID: 14997aa4-4a01-4cd4-86ab-687f85a13f10Base Type: nvidia::gxf::EntitySerializerDefined in: extensions/ucx/ucx_entity_serializer.hppParameters#component_serializersList of serializers for serializing and deserializing components.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: FixedVector<nvidia::gxf::Handle<nvidia::gxf::ComponentSerializer>, kMaxTempComponents>verbose_warningWhether or not to print verbose warning.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_BOOLDefault: trueUcxSerializationBuffer#Serialization buffer for the GXF UCX extension.Component ID: 1d9fcaf7-1db1-4992-93ec-714979f7d78d
Base Type: nvidia::gxf::Endpoint
Defined in: extensions/ucx/ucx_serialization_buffer.hppParameters#allocatorMemory allocator for tensor components.Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_HANDLEHandle Type: nvidia::gxf::Handle<nvidia::gxf::Allocator>buffer_sizeSize of the buffer in bytes (4kB by default).Flags: GXF_PARAMETER_FLAGS_NONEType: GXF_PARAMETER_TYPE_SIZEDefault: 4096 (4kB)Example#This section provides an example of utilizing the UCX extension within a simple graph.
This graph comprises two subgraphs, interconnected through the UCX extension.
The configuration details for both the server and client side are encapsulated in their
respective YAML files, which are shared below for your reference.Server side - test_ping_rx.yaml file:name:rxcomponents:-name:allocatortype:nvidia::gxf::test::MockAllocator-name:serialization_buffertype:nvidia::gxf::UcxSerializationBufferparameters:allocator:allocator-name:signaltype:nvidia::gxf::UcxReceiverparameters:address:5.5.5.5port:13337buffer:serialization_buffer-type:nvidia::gxf::MessageAvailableSchedulingTermparameters:receiver:signalmin_size:1-type:nvidia::gxf::PingRxparameters:signal:signal-type:nvidia::gxf::test::StepCountparameters:expected_count:10-type:nvidia::gxf::CountSchedulingTermparameters:count:10---name:ucxcomponents:-name:allocatortype:nvidia::gxf::test::MockAllocator-name:component_serializertype:nvidia::gxf::UcxComponentSerializerparameters:allocator:allocator-name:entity_serializertype:nvidia::gxf::UcxEntitySerializerparameters:component_serializers:[component_serializer]-name:ucx_contexttype:nvidia::gxf::UcxContextparameters:serializer:entity_serializer---name:schedulercomponents:-name:clocktype:nvidia::gxf::RealtimeClock-type:nvidia::gxf::GreedySchedulerparameters:max_duration_ms:1000000clock:clockstop_on_deadlock:False---name:gpu_resource_entity_0components:-type:nvidia::gxf::GPUDevicename:gpu_resource_0parameters:dev_id:0---EntityGroups:-name:entity_group_0target:-"rx"-"ucx"-"gpu_resource_entity_0"Client side - test_ping_tx.yaml file:name:txcomponents:-name:allocatortype:nvidia::gxf::test::MockAllocator-name:serialization_buffertype:nvidia::gxf::UcxSerializationBufferparameters:allocator:allocator-name:signaltype:nvidia::gxf::UcxTransmitterparameters:receiver_address:5.5.5.5port:13337buffer:serialization_buffer-type:nvidia::gxf::PingTxparameters:signal:signal-type:nvidia::gxf::CountSchedulingTermparameters:count:10-type:nvidia::gxf::test::StepCountparameters:expected_count:10---name:ucxcomponents:-name:allocatortype:nvidia::gxf::test::MockAllocator-name:component_serializertype:nvidia::gxf::UcxComponentSerializerparameters:allocator:allocator-name:entity_serializertype:nvidia::gxf::UcxEntitySerializerparameters:component_serializers:[component_serializer]-name:ucx_contexttype:nvidia::gxf::UcxContextparameters:serializer:entity_serializer---name:schedulercomponents:-name:clocktype:nvidia::gxf::RealtimeClock-type:nvidia::gxf::GreedySchedulerparameters:stop_on_deadlock:falsemax_duration_ms:1000000clock:clock---name:gpu_resource_entity_0components:-type:nvidia::gxf::GPUDevicename:gpu_resource_0parameters:dev_id:0---EntityGroups:-name:entity_group_0target:-"tx"-"ucx"-"gpu_resource_entity_0"previousBehavior TreesnextHttpExtensionOn this pageDescriptionRequirementsComponentsUcxContextParametersUcxTransmitterParametersUcxReceiverParametersUcxComponentSerializerParametersUcxEntitySerializerParametersUcxSerializationBufferParametersExamplePrivacy Policy|Manage My Privacy|Do Not Sell or Share My Data|Terms of Service|Accessibility|Corporate Policies|Product Security|ContactCopyright © 2024-2025, NVIDIA Corporation.Last updated on Jan 13, 2025.